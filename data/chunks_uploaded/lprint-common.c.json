[
  {
    "type": "struct_assignment",
    "start_line": 1,
    "end_line": 1040,
    "code": "//\n// Common driver code for LPrint, a Label Printer Application\n//\n// Copyright \u00a9\u00a02019-2025 by Michael R Sweet.\n//\n// Licensed under Apache License v2.0.  See the file \"LICENSE\" for more\n// information.\n//\n\n#include \"lprint.h\"\n\n\n//\n// Constants...\n//\n\n#define LPRINT_WHITE\t56\n#define LPRINT_BLACK\t199\n#define LPRINT_TRASH\t\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi bi-trash3-fill\\\" viewBox=\\\"0 0 16 16\\\"><path d=\\\"M11 1.5v1h3.5a.5.5 0 0 1 0 1h-.538l-.853 10.66A2 2 0 0 1 11.115 16h-6.23a2 2 0 0 1-1.994-1.84L2.038 3.5H1.5a.5.5 0 0 1 0-1H5v-1A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5Zm-5 0v1h4v-1a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5ZM4.5 5.029l.5 8.5a.5.5 0 1 0 .998-.06l-.5-8.5a.5.5 0 1 0-.998.06Zm6.53-.528a.5.5 0 0 0-.528.47l-.5 8.5a.5.5 0 0 0 .998.058l.5-8.5a.5.5 0 0 0-.47-.528ZM8 4.5a.5.5 0 0 0-.5.5v8.5a.5.5 0 0 0 1 0V5a.5.5 0 0 0-.5-.5Z\\\"/></svg>\"\n\n\n//\n// Local functions...\n//\n\nstatic void\tfree_cmedia(pappl_printer_t *printer, pappl_pr_driver_data_t *data);\nstatic char\t*localize_keyword(pappl_client_t *client, const char *attrname, const char *keyword, char *buffer, size_t bufsize);\nstatic void\tmedia_chooser(pappl_client_t *client, pappl_pr_driver_data_t *driver_data, const char *title, const char *name, pappl_media_col_t *media);\n\n\n//\n// 'lprintDitherAlloc()' - Allocate memory for a dither buffer.\n//\n\nbool\t\t\t\t\t// O - `true` on success, `false` on error\nlprintDitherAlloc(\n    lprint_dither_t    *dither,\t\t// I - Dither buffer\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Print options\n    cups_cspace_t      out_cspace,\t// I - Output color space\n    double             out_gamma)\t// I - Output gamma correction\n{\n  int\t\ti, j;\t\t\t// Looping vars\n  unsigned\tright;\t\t\t// Right margin\n\n\n  // Adjust dithering array and compress to a range of 16 to 239\n  for (i = 0; i < 16; i ++)\n  {\n    for (j = 0; j < 16; j ++)\n    {\n      dither->dither[i][j] = (unsigned char)((LPRINT_BLACK - LPRINT_WHITE) * pow(options->dither[i][j] / 255.0, out_gamma) + LPRINT_WHITE);\n    }\n  }\n\n  // Calculate margins and dimensions...\n  if (!options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop])\n  {\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft]   = options->header.HWResolution[0] * (unsigned)options->media.left_margin / 2540;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop]    = options->header.HWResolution[1] * (unsigned)options->media.top_margin / 2540;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight]  = options->header.cupsWidth - options->header.HWResolution[0] * (unsigned)options->media.right_margin / 2540 - 1;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] = options->header.cupsHeight - options->header.HWResolution[1] * (unsigned)options->media.bottom_margin / 2540 - 1;\n  }\n\n  dither->in_left   = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft];\n  right             = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight];\n  dither->in_top    = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop];\n  dither->in_bottom = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom];\n  dither->in_width  = right - dither->in_left + 1;\n  dither->in_height = dither->in_bottom - dither->in_top + 1;\n  dither->out_width = (right - dither->in_left + 8) / 8;\n\n  if (dither->in_width > 65536)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Page too wide.\");\n    return (false);\t\t\t// Protect against large allocations\n  }\n\n  // Calculate input/output color values\n  dither->in_bpp = options->header.cupsBitsPerPixel;\n\n  switch (options->header.cupsColorSpace)\n  {\n    case CUPS_CSPACE_W :\n    case CUPS_CSPACE_SW :\n    case CUPS_CSPACE_RGB :\n    case CUPS_CSPACE_SRGB :\n    case CUPS_CSPACE_ADOBERGB :\n        dither->in_white = 255;\n        break;\n\n    default :\n        dither->in_white = 0;\n        break;\n  }\n\n  switch (out_cspace)\n  {\n    case CUPS_CSPACE_W :\n    case CUPS_CSPACE_SW :\n    case CUPS_CSPACE_RGB :\n    case CUPS_CSPACE_SRGB :\n    case CUPS_CSPACE_ADOBERGB :\n        dither->out_white = 255;\n        break;\n\n    default :\n        dither->out_white = 0;\n        break;\n  }\n\n  // Allocate memory...\n  if ((dither->input[0] = calloc(4 * dither->in_width, sizeof(unsigned char))) == NULL)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate input buffer.\");\n    return (false);\n  }\n\n  for (i = 1; i < 4; i ++)\n    dither->input[i] = dither->input[0] + i * dither->in_width;\n\n  if ((dither->output = malloc(dither->out_width)) == NULL)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate output buffer.\");\n    return (false);\n  }\n\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"dither=[\");\n  for (i = 0; i < 16; i ++)\n    papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"  [ %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u ]\", dither->dither[i][0], dither->dither[i][1], dither->dither[i][2], dither->dither[i][3], dither->dither[i][4], dither->dither[i][5], dither->dither[i][6], dither->dither[i][7], dither->dither[i][8], dither->dither[i][9], dither->dither[i][10], dither->dither[i][11], dither->dither[i][12], dither->dither[i][13], dither->dither[i][14], dither->dither[i][15]);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"]\");\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_bottom=%u\", dither->in_bottom);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_left=%u\", dither->in_left);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_top=%u\", dither->in_top);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_width=%u\", dither->in_width);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_bpp=%u\", dither->in_bpp);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_white=%u\", dither->in_white);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"out_white=%u\", dither->out_white);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"out_width=%u\", dither->out_width);\n\n  // Return indicating success...\n  return (true);\n}\n\n\n//\n// 'lprintDitherFree()' - Free memory for a dither buffer.\n//\n\nvoid\nlprintDitherFree(\n    lprint_dither_t *dither)\t\t// I - Dither buffer\n{\n  free(dither->input[0]);\n  free(dither->output);\n\n  memset(dither, 0, sizeof(lprint_dither_t));\n}\n\n\n//\n// 'lprintDitherLine()' - Copy and dither a line.\n//\n// This function copies the current line and dithers it as needed.  `true` is\n// returned if the output line needs to be sent to the printer - the `output`\n// member points to the output bitmap and `outwidth` specifies the bitmap width\n// in bytes.\n//\n// Dithering is always 1 line behind the current line, so you need to call this\n// function one last time in the endpage callback with `y` == `cupsHeight` to\n// get the last line.\n//\n\nbool\t\t\t\t\t// O - `true` if line dithered, `false` to skip\nlprintDitherLine(\n    lprint_dither_t     *dither,\t// I - Dither buffer\n    unsigned            y,\t\t// I - Input line number (starting at `0`)\n    const unsigned char *line)\t\t// I - Input line\n{\n  unsigned\tx,\t\t\t// Current column\n\t\tcount;\t\t\t// Remaining count\n  unsigned char\t*current,\t\t// Current line\n\t\t*prev,\t\t\t// Previous line\n\t\t*next;\t\t\t// Next line\n  unsigned char\t*dline,\t\t\t// Dither line\n\t\t*outptr,\t\t// Pointer into output\n\t\tbyte,\t\t\t// Current byte\n\t\tbit;\t\t\t// Current bit\n\n\n  // Copy current input line...\n  count = dither->in_width;\n  next  = dither->input[y & 3];\n\n  memset(next, 0, count);\n\n  if (line)\n  {\n    switch (dither->in_bpp)\n    {\n      case 1 : // 1-bit black\n\t  for (line += dither->in_left / 8, byte = *line++, bit = 128 >> (dither->in_left & 7); count > 0; count --, next ++)\n\t  {\n\t    // Convert to 8-bit black...\n\t    if (byte & bit)\n\t      *next = 255;\n\n\t    if (bit > 1)\n\t    {\n\t      bit /= 2;\n\t    }\n\t    else\n\t    {\n\t      bit  = 128;\n\t      byte = *line++;\n\t    }\n\t  }\n\t  break;\n\n      case 8 : // Grayscale or 8-bit black\n\t  if (dither->in_white)\n\t  {\n\t    // Convert grayscale to black...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = 255 - *line;\n\t    }\n\t  }\n\t  else\n\t  {\n\t    // Copy with clamping...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t  }\n\t  break;\n\n      default : // Something else...\n\t  return (false);\n    }\n  }\n\n  // If we are outside the imageable area then don't dither...\n  if (y < (dither->in_top + 1) || y > (dither->in_bottom + 1))\n    return (false);\n\n  // Dither...\n  for (x = 0, count = dither->in_width, prev = dither->input[(y - 2) & 3], current = dither->input[(y - 1) & 3], next = dither->input[y & 3], outptr = dither->output, byte = dither->out_white, bit = 128, dline = dither->dither[y & 15]; count > 0; x ++, count --, prev ++, current ++, next ++)\n  {\n    if (*current)\n    {\n      // Not pure white/blank...\n      if (*current == 255)\n      {\n        // 100% black...\n        byte ^= bit;\n      }\n      else\n      {\n        // Only dither if this pixel does not border 100% white or black...\n\tif ((x > 0 && (current[-1] == 255 || current[-1] == 0)) ||\n\t    (count > 1 && (current[1] == 255 || current[1] == 0)) ||\n\t    *prev == 255 || *prev == 0 || *next == 255 || *next == 0)\n        {\n          // Threshold\n          if (*current > 127)\n\t    byte ^= bit;\n        }\n        else if (*current > dline[x & 15])\n        {\n          // Dither anything else\n\t  byte ^= bit;\n\t}\n      }\n    }\n\n    // Next output bit...\n    if (bit > 1)\n    {\n      bit /= 2;\n    }\n    else\n    {\n      *outptr++ = byte;\n      byte      = dither->out_white;\n      bit       = 128;\n    }\n  }\n\n  // Save last byte of output as needed and return...\n  if (bit < 128)\n    *outptr = byte;\n\n  return (true);\n}\n\n\n//\n// 'lprintMediaLoad()' - Load custom label sizes for a printer.\n//\n\nbool\t\t\t\t\t// O - `true` on success, `false` on error\nlprintMediaLoad(\n    pappl_printer_t        *printer,\t// I - Printer\n    pappl_pr_driver_data_t *data)\t// I - Driver data\n{\n  lprint_cmedia_t\t*cmedia;\t// Custom media\n  int\t\t\tfd;\t\t// Custom media file descriptor\n  cups_file_t\t\t*fp;\t\t// Custom media file\n  char\t\t\tfilename[1024],\t// Custom media filename\n\t\t\tline[256];\t// Line from file\n  int\t\t\ti;\t\t// Looping var\n\n\n  // Allocate memory as needed...\n  if ((cmedia = (lprint_cmedia_t *)data->extension) == NULL)\n  {\n    if ((cmedia = (lprint_cmedia_t *)calloc(1, sizeof(lprint_cmedia_t))) == NULL)\n      return (false);\n\n    data->extension = cmedia;\n    data->delete_cb = free_cmedia;\n  }\n\n  // Load any existing custom media sizes...\n  if ((fd = papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"r\")) < 0)\n    return (true);\n\n  if ((fp = cupsFileOpenFd(fd, \"r\")) == NULL)\n  {\n    close(fd);\n    return (true);\n  }\n\n  for (i = 0; i < data->num_source && cupsFileGets(fp, line, sizeof(line)); i ++)\n    papplCopyString(cmedia->custom_name[i], line, sizeof(cmedia->custom_name[i]));\n\n  cupsFileClose(fp);\n\n  return (true);\n}\n\n\n//\n// 'lprintMediaMatch()' - Match the loaded media to one of the supported sizes.\n//\n\nconst char *\t\t\t\t// O - Matching media size or `NULL` if none\nlprintMediaMatch(\n    pappl_printer_t *printer,\t\t// I - Printer\n    int             source,\t\t// I - \"media-source\" index (0-based)\n    int             width,\t\t// I - Width in hundredths of millimeters or `0` if unknown\n    int             length)\t\t// I - Length in hundredths of millimeters\n{\n  pappl_pr_driver_data_t pdata;\t\t// Printer driver data\n  lprint_cmedia_t\t*cmedia;\t// Custom media info\n  int\t\t\ti;\t\t// Looping var\n  pwg_media_t\t\t*pwg;\t\t// Current size info\n  const char\t\t*ret = NULL;\t// Return value\n\n\n  papplPrinterGetDriverData(printer, &pdata);\n\n  for (i = 0; i < pdata.num_media; i ++)\n  {\n    if ((!strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5)) && (strstr(pdata.media[i], \"_min_\") != NULL || strstr(pdata.media[i], \"_max_\") != NULL))\n      continue;\n\n    if ((pwg = pwgMediaForPWG(pdata.media[i])) == NULL)\n      continue;\n\n    if ((abs(pwg->width - width) <= 100 || !width) && (abs(pwg->length - length) <= 100 || !length))\n    {\n      if (!ret || !strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5))\n        ret = pdata.media[i];\n    }\n  }\n\n  if (!ret)\n  {\n    if (!pdata.extension)\n      lprintMediaLoad(printer, &pdata);\n\n    if ((cmedia = (lprint_cmedia_t *)pdata.extension) != NULL)\n    {\n      if (length == 0)\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"roll\", pdata.source[source], width, length, /*units*/NULL);\n      else\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"custom\", pdata.source[source], width, length, /*units*/NULL);\n\n      lprintMediaUpdate(printer, &pdata);\n      lprintMediaSave(printer, &pdata);\n\n      ret = cmedia->custom_name[source];\n    }\n  }\n\n  if (ret && strcmp(pdata.media_ready[source].size_name, ret) && (pwg = pwgMediaForPWG(ret)) != NULL)\n  {\n    // Ready media has changed...\n    papplCopyString(pdata.media_ready[source].size_name, ret, sizeof(pdata.media_ready[source].size_name));\n    pdata.media_ready[source].size_width  = pwg->width;\n    pdata.media_ready[source].size_length = pwg->length;\n\n    if (pwg->length == 0)\n      papplCopyString(pdata.media_ready[source].type, \"continuous\", sizeof(pdata.media_ready[source].type));\n    else\n      papplCopyString(pdata.media_ready[source].type, \"label\", sizeof(pdata.media_ready[source].type));\n\n    papplPrinterSetDriverData(printer, &pdata, NULL);\n  }\n\n  return (ret);\n}\n\n\n//\n// 'lprintMediaSave()' - Save custom label sizes for a printer.\n//\n\nbool\t\t\t\t\t// O - `true` on success, `false` on error\nlprintMediaSave(\n    pappl_printer_t        *printer,\t// I - Printer\n    pappl_pr_driver_data_t *data)\t// I - Driver data\n{\n  lprint_cmedia_t\t*cmedia;\t// Custom media\n  int\t\t\ti,\t\t// Looping var\n\t\t\tfd;\t\t// Custom media file descriptor\n  cups_file_t\t\t*fp;\t\t// Custom media file\n  char\t\t\tfilename[1024];\t// Custom media filename\n\n\n  // Get the custom media...\n  if ((cmedia = (lprint_cmedia_t *)data->extension) == NULL)\n  {\n    // No custom media, delete any existing file...\n    papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"x\");\n    return (true);\n  }\n\n  // Save custom media sizes...\n  if ((fd = papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"w\")) < 0)\n    return (true);\n\n  if ((fp = cupsFileOpenFd(fd, \"w\")) == NULL)\n  {\n    close(fd);\n    return (true);\n  }\n\n  for (i = 0; i < data->num_source; i ++)\n    cupsFilePrintf(fp, \"%s\\n\", cmedia->custom_name[i]);\n\n  cupsFileClose(fp);\n\n  return (true);\n}\n\n\n//\n// 'lprintMediaUI()' - Show the printer media web page.\n//\n\nbool\t\t\t\t\t// O - `true` on success, `false` on failure\nlprintMediaUI(\n    pappl_client_t  *client,\t\t// I - Client\n    pappl_printer_t *printer)\t\t// I - Printer\n{\n  int\t\t\ti;\t\t// Looping var\n  pappl_pr_driver_data_t data;\t\t// Driver data\n  lprint_cmedia_t\t*cmedia;\t// Custom label sizes, if any\n  char\t\t\tname[128],\t// Form variable name\n\t\t\ttext[256];\t// Localized text\n  const char\t\t*status = NULL;\t// Status message, if any\n\n\n  LPRINT_DEBUG(\"lprintMediaUI(client=%p, printer=%p(%s))\\n\", client, printer, printer ? papplPrinterGetName(printer) : \"null\");\n\n  // Only allow access as appropriate...\n  if (!papplClientHTMLAuthorize(client))\n    return (true);\n\n  // Get the driver data...\n  papplPrinterGetDriverData(printer, &data);\n\n  LPRINT_DEBUG(\"lprintMediaUI: data.extension=%p\\n\", data.extension);\n  if (!data.extension)\n  {\n    lprintMediaLoad(printer, &data);\n    LPRINT_DEBUG(\"lprintMediaUI: AFTER data.extension=%p\\n\", data.extension);\n  }\n  cmedia = (lprint_cmedia_t *)data.extension;\n\n  if (papplClientGetMethod(client) == HTTP_STATE_POST)\n  {\n    int\t\t\tnum_form = 0;\t// Number of form variable\n    cups_option_t\t*form = NULL;\t// Form variables\n\n    if ((num_form = papplClientGetForm(client, &form)) == 0)\n    {\n      status = papplClientGetLocString(client, \"Invalid form data.\");\n    }\n    else if (!papplClientIsValidForm(client, num_form, form))\n    {\n      status = papplClientGetLocString(client, \"Invalid form submission.\");\n    }\n    else\n    {\n      bool\t\tchanged = false;// Did the custom media list change?\n      pwg_media_t\t*pwg = NULL;\t// PWG media info\n      pappl_media_col_t\t*ready;\t\t// Current ready media\n      const char\t*value,\t\t// Value of form variable\n\t\t\t*custom_width,\t// Custom media width\n\t\t\t*custom_length,\t// Custom media length\n\t\t\t*custom_units;\t// Custom media units\n\n      memset(data.media_ready, 0, sizeof(data.media_ready));\n      for (i = 0, ready = data.media_ready; i < data.num_source; i ++, ready ++)\n      {\n        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n      if (changed)\n      {\n\t// Rebuild media size list and save...\n\tlprintMediaUpdate(printer, &data);\n\tpapplPrinterSetDriverData(printer, &data, NULL);\n\tlprintMediaSave(printer, &data);\n      }\n\n      papplPrinterSetReadyMedia(printer, data.num_source, data.media_ready);\n\n      status = \"Changes saved.\";\n    }\n\n    cupsFreeOptions(num_form, form);\n  }\n\n  papplClientHTMLPrinterHeader(client, printer, \"Media\", 0, NULL, NULL);\n  if (status)\n    papplClientHTMLPrintf(client, \"<div class=\\\"banner\\\">%s</div>\\n\", status);\n\n  papplClientHTMLStartForm(client, papplClientGetURI(client), false);\n\n  papplClientHTMLPuts(client,\n\t\t      \"          <table class=\\\"form\\\">\\n\"\n\t\t      \"            <tbody>\\n\");\n\n  for (i = 0; i < data.num_source; i ++)\n  {\n    snprintf(name, sizeof(name), \"ready%d\", i);\n    media_chooser(client, &data, localize_keyword(client, \"media-source\", data.source[i], text, sizeof(text)), name, data.media_ready + i);\n  }\n\n  papplClientHTMLPrintf(client,\n\t\t\t\"              <tr><th></th><td><input type=\\\"submit\\\" value=\\\"%s\\\"></td></tr>\\n\"\n\t\t\t\"            </tbody>\\n\"\n\t\t\t\"          </table>\"\n\t\t\t\"        </form>\\n\"\n\t\t\t\"        <script>function show_hide_custom(name) {\\n\"\n\t\t        \"  let selelem = document.forms['form'][name + '-size'];\\n\"\n\t\t        \"  let divelem = document.getElementById(name + '-custom');\\n\"\n\t\t        \"  if (selelem.selectedIndex == 0)\\n\"\n\t\t        \"    divelem.style = 'display: inline-block;';\\n\"\n\t\t        \"  else\\n\"\n\t\t        \"    divelem.style = 'display: none;';\\n\"\n\t\t\t\"}</script>\\n\", papplClientGetLocString(client, \"Save Changes\"));\n\n  papplClientHTMLPrinterFooter(client);\n  return (true);\n}\n\n\n//\n// 'lprintMediaUpdate()' - Update the list of custom label sizes.\n//\n\nvoid\nlprintMediaUpdate(\n    pappl_printer_t        *printer,\t// I - Printer\n    pappl_pr_driver_data_t *data)\t// I - Driver data\n{\n  int\t\t\ti, j;\t\t// Looping vars\n  lprint_cmedia_t\t*cmedia;\t// Custom label sizes\n\n\n  (void)printer;\n\n  // Find the last size in the media list...\n  for (i = 0; i < data->num_media; i ++)\n  {\n    if (!strncmp(data->media[i], \"custom_\", 7) && strncmp(data->media[i], \"custom_min_\", 11) && strncmp(data->media[i], \"custom_max_\", 11))\n      break;\n  }\n\n  // Then copy any custom sizes over...\n  if ((cmedia = (lprint_cmedia_t *)data->extension) != NULL)\n  {\n    for (j = 0; j < data->num_source && i < PAPPL_MAX_MEDIA; j ++)\n    {\n      if (cmedia->custom_name[j][0])\n        data->media[i ++] = cmedia->custom_name[j];\n    }\n  }\n\n  data->num_media = i;\n\n  LPRINT_DEBUG(\"lprintMediaUpdate: num_media=%d\\n\", data->num_media);\n  for (i = 0; i < data->num_media; i ++)\n    LPRINT_DEBUG(\"lprintMediaUpdate: media[%d]='%s'\\n\", i, data->media[i]);\n}\n\n\n//\n// 'lprintPackBitsAlloc()' - Allocate a PackBits compression buffer.\n//\n// Free the returned pointer with `free()`...\n//\n\nunsigned char *\t\t\t\t// O - Pointer to compression buffer\nlprintPackBitsAlloc(size_t len)\t\t// I - Size of input buffer\n{\n  return (malloc(len + (len + 127) / 128));\n}\n\n\n//\n// 'lprintPackBitsCompress()' - PackBits compress some bytes to the destination buffer.\n//\n// The destination should be allocated wth `lprintPackBitsAlloc()`.\n// The algorithm is defined in many places, including at\n// <https://en.wikipedia.org/wiki/PackBits>.\n//\n\nsize_t\t\t\t\t\t// O - Number of compressed bytes\nlprintPackBitsCompress(\n    unsigned char       *dst,\t\t// I - Destination buffer\n    const unsigned char *src,\t\t// I - Source buffer\n    size_t              srclen)\t\t// I - Number of source bytes (at least 3)\n{\n  const unsigned char\t*srcptr,\t// Current byte pointer\n\t\t\t*srcend,\t// End-of-line byte pointer\n\t\t\t*srclptr,\t// Start of literal sequence\n\t\t\t*srcrptr;\t// Start of repeated sequence\n  unsigned char\t\t*dstptr;\t// Pointer into compression buffer\n  unsigned\t\tcount,\t\t// Current count\n\t\t\tsrclcount,\t// Count of literal bytes for output\n\t\t\tsrcrcount;\t// Count of repeated bytes for output\n\n\n  // Do TIFF PackBits compression over the source buffer...\n  srcptr = srclptr = src;\n  srcend = src + srclen - 1;\n  dstptr = dst;\n\n  while (srclptr <= srcend)\n  {\n    // Scan for literal and repeated sequences...\n    srclcount = srcptr - srclptr;\n    srcrcount = 0;\n\n    while (srcptr <= srcend)\n    {\n      // Extend literal sequence, if any...\n      while (srcptr < srcend && srcptr[0] != srcptr[1])\n\tsrcptr ++;\n\n      srclcount = srcptr - srclptr;\n      srcrcount = 0;\n\n      if (srcptr == srcend)\n      {\n        // Last byte, stop here...\n\tsrcptr ++;\n\tsrclcount ++;\n\tbreak;\n      }\n\n      // Count a run...\n      srcrptr = srcptr;\n\n      while (srcptr < srcend && srcptr[0] == srcptr[1])\n      {\n\tsrcptr ++;\n\tsrcrcount ++;\n      }\n\n      srcptr ++;\n      srcrcount ++;\n\n      // Only stop to encode if the repeated sequence is long enough to make sense...\n      if (srcrcount > 2 || srcrptr == srclptr)\n        break;\n    }\n\n    // Encode literal byte sequences...\n    while (srclcount > 0)\n    {\n      if (srclcount > 128)\n\tcount = 128;\n      else\n\tcount = srclcount;\n\n      *dstptr++ = (unsigned char)(count - 1);\n      memcpy(dstptr, srclptr, count);\n      dstptr += count;\n      srclptr += count;\n      srclcount -= count;\n    }\n\n    // Encode repeated byte sequences...\n    while (srcrcount > 1)\n    {\n      if (srcrcount > 128)\n\tcount = 128;\n      else\n\tcount = srcrcount;\n\n      *dstptr++ = (unsigned char)(257 - count);\n      *dstptr++ = *srcrptr;\n      srcrcount -= count;\n    }\n\n    // Reset the literal pointer and continue...\n    srclptr = srcptr - srcrcount;\n  }\n\n  return ((size_t)(dstptr - dst));\n}\n\n\n//\n// 'free_cmedia()' - Free custom media information.\n//\n\nstatic void\nfree_cmedia(\n    pappl_printer_t        *printer,\t// I - Printer (unused)\n    pappl_pr_driver_data_t *data)\t// I - Driver data\n{\n  free(data->extension);\n}\n\n\n//\n// 'localize_keyword()' - Localize an attribute keyword value.\n//\n\nstatic char *\t\t\t\t// O - Localized string\nlocalize_keyword(\n    pappl_client_t *client,\t\t// I - Client\n    const char     *attrname,\t\t// I - Attribute name\n    const char     *keyword,\t\t// I - Keyword value\n    char           *buffer,\t\t// I - String buffer\n    size_t         bufsize)\t\t// I - Size of string buffer\n{\n  const char\t*loctext;\t\t// Localized text\n  char\t\tkey[256];\t\t// Localization key\n\n\n  snprintf(key, sizeof(key), \"%s.%s\", attrname, keyword);\n  if ((loctext = papplClientGetLocString(client, key)) != key)\n  {\n    // Use localized string...\n    papplCopyString(buffer, loctext, bufsize);\n  }\n  else if (!strcmp(attrname, \"media\"))\n  {\n    // Create a dimensional name for the size...\n    pwg_media_t *pwg = pwgMediaForPWG(keyword);\n\t\t\t\t\t// PWG media size info\n\n    LPRINT_DEBUG(\"localize_keyword: keyword='%s', pwg=%p(%dx%d)\\n\", keyword, pwg, pwg ? pwg->width : 0, pwg ? pwg->length : 0);\n    if (pwg)\n    {\n      if ((pwg->width % 100) == 0 && (pwg->width % 2540) != 0)\n\tsnprintf(buffer, bufsize, \"%d x %dmm Custom Label\", pwg->width / 100, pwg->length / 100);\n      else\n\tsnprintf(buffer, bufsize, \"%g x %g\u02ba Custom Label\", pwg->width / 2540.0, pwg->length / 2540.0);\n    }\n    else\n    {\n      snprintf(buffer, bufsize, \"Invalid '%s'\", keyword);\n    }\n  }\n  else\n  {\n    // Convert \"separated-words\" to \"Separated Words\"...\n    char\t*ptr;\t\t\t// Pointer into string\n\n    papplCopyString(buffer, keyword, bufsize);\n    *buffer = (char)toupper(*buffer & 255);\n\n    for (ptr = buffer + 1; *ptr; ptr ++)\n    {\n      if (*ptr == '-' && ptr[1])\n      {\n\t*ptr++ = ' ';\n\t*ptr   = (char)toupper(*ptr & 255);\n      }\n    }\n  }\n\n  return (buffer);\n}\n\n\n//\n// 'media_chooser()' - Show the media chooser.\n//\n\nstatic void\nmedia_chooser(\n    pappl_client_t         *client,\t// I - Client\n    pappl_pr_driver_data_t *driver_data,// I - Driver data\n    const char             *title,\t// I - Title for field\n    const char             *name,\t// I - Form name/prefix\n    pappl_media_col_t      *media)\t// I - Current media values\n{\n  int\t\ti,\t\t\t// Looping vars\n\t\tcur_index = 0,\t\t// Current size index\n\t        sel_index = 0;\t\t// Selected size index...\n  pwg_media_t\t*pwg;\t\t\t// PWG media size info\n  char\t\ttext[256];\t\t// Localized text\n  const char\t*min_size = NULL,\t// Minimum size\n\t\t*max_size = NULL;\t// Maximum size\n\n\n  // media-size\n  papplLocFormatString(papplClientGetLoc(client), text, sizeof(text), \"%s Media\", title);\n  papplClientHTMLPrintf(client, \"              <tr><th>%s:</th><td>\", text);\n  for (i = 0; i < driver_data->num_media && (!min_size || !max_size); i ++)\n  {\n    if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n        min_size = driver_data->media[i];\n      else if (strstr(driver_data->media[i], \"_max_\"))\n        max_size = driver_data->media[i];\n    }\n  }\n  if (min_size && max_size)\n  {\n    papplClientHTMLPrintf(client, \"<select name=\\\"%s-size\\\" onChange=\\\"show_hide_custom('%s');\\\"><option value=\\\"custom\\\">%s</option>\", name, name, papplClientGetLocString(client, \"New Custom Size\"));\n    cur_index ++;\n  }\n  else\n    papplClientHTMLPrintf(client, \"<select name=\\\"%s-size\\\">\", name);\n\n  for (i = 0; i < driver_data->num_media; i ++)\n  {\n    if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n      {\n        min_size = driver_data->media[i];\n        continue;\n      }\n      else if (strstr(driver_data->media[i], \"_max_\"))\n      {\n        max_size = driver_data->media[i];\n        continue;\n      }\n    }\n\n    if (!strcmp(driver_data->media[i], media->size_name))\n      sel_index = cur_index;\n\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->media[i], sel_index == cur_index ? \" selected\" : \"\", localize_keyword(client, \"media\", driver_data->media[i], text, sizeof(text)));\n    cur_index ++;\n  }\n\n  if (min_size && max_size)\n  {\n    int cur_width, min_width, max_width;// Current/min/max width\n    int cur_length, min_length, max_length;\n\t\t\t\t\t// Current/min/max length\n    const char *cur_units;\t\t// Current units\n\n    if ((pwg = pwgMediaForPWG(min_size)) != NULL)\n    {\n      min_width  = pwg->width;\n      min_length = pwg->length;\n    }\n    else\n    {\n      min_width  = 1 * 2540;\n      min_length = 1 * 2540;\n    }\n\n    if ((pwg = pwgMediaForPWG(max_size)) != NULL)\n    {\n      max_width  = pwg->width;\n      max_length = pwg->length;\n    }\n    else\n    {\n      max_width  = 9 * 2540;\n      max_length = 22 * 2540;\n    }\n\n    if ((cur_width = media->size_width) < min_width)\n      cur_width = min_width;\n    else if (cur_width > max_width)\n      cur_width = max_width;\n\n    if ((cur_length = media->size_length) < min_length)\n      cur_length = min_length;\n    else if (cur_length > max_length)\n      cur_length = max_length;\n\n    if ((cur_units = media->size_name + strlen(media->size_name) - 2) < media->size_name)\n      cur_units = \"in\";\n\n    if (!strcmp(cur_units, \"mm\"))\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\"><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\" checked><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 100.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 100.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n    else\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\" checked><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\"><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 2540.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 2540.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n  }\n  else\n  {\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n  // media-tracking (if needed)\n  if (driver_data->tracking_supported)\n  {\n    pappl_media_tracking_t tracking;\t// Tracking value\n    static const char * const trackings[] =\n    {\t\t\t\t\t// Tracking strings\n      \"continuous\",\n      \"gap\",\n      \"mark\",\n      \"web\"\n    };\n\n    papplClientHTMLPrintf(client, \"                <select name=\\\"%s-tracking\\\">\", name);\n    for (i = 0, tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS; tracking <= PAPPL_MEDIA_TRACKING_WEB; i ++, tracking *= 2)\n    {\n      if (!(driver_data->tracking_supported & tracking))\n\tcontinue;\n\n      papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n    }\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n  // media-type\n  papplClientHTMLPrintf(client, \"                <select name=\\\"%s-type\\\">\", name);\n  for (i = 0; i < driver_data->num_type; i ++)\n  {\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->type[i], !strcmp(driver_data->type[i], media->type) ? \" selected\" : \"\", localize_keyword(client, \"media-type\", driver_data->type[i], text, sizeof(text)));\n  }\n  papplClientHTMLPrintf(client, \"</select></td></tr>\\n\");\n}\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 1,
    "end_line": 1040,
    "code": "//\n// Common driver code for LPrint, a Label Printer Application\n//\n// Copyright \u00a9\u00a02019-2025 by Michael R Sweet.\n//\n// Licensed under Apache License v2.0.  See the file \"LICENSE\" for more\n// information.\n//\n\n#include \"lprint.h\"\n\n\n//\n// Constants...\n//\n\n#define LPRINT_WHITE\t56\n#define LPRINT_BLACK\t199\n#define LPRINT_TRASH\t\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi bi-trash3-fill\\\" viewBox=\\\"0 0 16 16\\\"><path d=\\\"M11 1.5v1h3.5a.5.5 0 0 1 0 1h-.538l-.853 10.66A2 2 0 0 1 11.115 16h-6.23a2 2 0 0 1-1.994-1.84L2.038 3.5H1.5a.5.5 0 0 1 0-1H5v-1A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5Zm-5 0v1h4v-1a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5ZM4.5 5.029l.5 8.5a.5.5 0 1 0 .998-.06l-.5-8.5a.5.5 0 1 0-.998.06Zm6.53-.528a.5.5 0 0 0-.528.47l-.5 8.5a.5.5 0 0 0 .998.058l.5-8.5a.5.5 0 0 0-.47-.528ZM8 4.5a.5.5 0 0 0-.5.5v8.5a.5.5 0 0 0 1 0V5a.5.5 0 0 0-.5-.5Z\\\"/></svg>\"\n\n\n//\n// Local functions...\n//\n\nstatic void\tfree_cmedia(pappl_printer_t *printer, pappl_pr_driver_data_t *data);\nstatic char\t*localize_keyword(pappl_client_t *client, const char *attrname, const char *keyword, char *buffer, size_t bufsize);\nstatic void\tmedia_chooser(pappl_client_t *client, pappl_pr_driver_data_t *driver_data, const char *title, const char *name, pappl_media_col_t *media);\n\n\n//\n// 'lprintDitherAlloc()' - Allocate memory for a dither buffer.\n//\n\nbool\t\t\t\t\t// O - `true` on success, `false` on error\nlprintDitherAlloc(\n    lprint_dither_t    *dither,\t\t// I - Dither buffer\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Print options\n    cups_cspace_t      out_cspace,\t// I - Output color space\n    double             out_gamma)\t// I - Output gamma correction\n{\n  int\t\ti, j;\t\t\t// Looping vars\n  unsigned\tright;\t\t\t// Right margin\n\n\n  // Adjust dithering array and compress to a range of 16 to 239\n  for (i = 0; i < 16; i ++)\n  {\n    for (j = 0; j < 16; j ++)\n    {\n      dither->dither[i][j] = (unsigned char)((LPRINT_BLACK - LPRINT_WHITE) * pow(options->dither[i][j] / 255.0, out_gamma) + LPRINT_WHITE);\n    }\n  }\n\n  // Calculate margins and dimensions...\n  if (!options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop])\n  {\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft]   = options->header.HWResolution[0] * (unsigned)options->media.left_margin / 2540;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop]    = options->header.HWResolution[1] * (unsigned)options->media.top_margin / 2540;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight]  = options->header.cupsWidth - options->header.HWResolution[0] * (unsigned)options->media.right_margin / 2540 - 1;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] = options->header.cupsHeight - options->header.HWResolution[1] * (unsigned)options->media.bottom_margin / 2540 - 1;\n  }\n\n  dither->in_left   = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft];\n  right             = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight];\n  dither->in_top    = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop];\n  dither->in_bottom = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom];\n  dither->in_width  = right - dither->in_left + 1;\n  dither->in_height = dither->in_bottom - dither->in_top + 1;\n  dither->out_width = (right - dither->in_left + 8) / 8;\n\n  if (dither->in_width > 65536)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Page too wide.\");\n    return (false);\t\t\t// Protect against large allocations\n  }\n\n  // Calculate input/output color values\n  dither->in_bpp = options->header.cupsBitsPerPixel;\n\n  switch (options->header.cupsColorSpace)\n  {\n    case CUPS_CSPACE_W :\n    case CUPS_CSPACE_SW :\n    case CUPS_CSPACE_RGB :\n    case CUPS_CSPACE_SRGB :\n    case CUPS_CSPACE_ADOBERGB :\n        dither->in_white = 255;\n        break;\n\n    default :\n        dither->in_white = 0;\n        break;\n  }\n\n  switch (out_cspace)\n  {\n    case CUPS_CSPACE_W :\n    case CUPS_CSPACE_SW :\n    case CUPS_CSPACE_RGB :\n    case CUPS_CSPACE_SRGB :\n    case CUPS_CSPACE_ADOBERGB :\n        dither->out_white = 255;\n        break;\n\n    default :\n        dither->out_white = 0;\n        break;\n  }\n\n  // Allocate memory...\n  if ((dither->input[0] = calloc(4 * dither->in_width, sizeof(unsigned char))) == NULL)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate input buffer.\");\n    return (false);\n  }\n\n  for (i = 1; i < 4; i ++)\n    dither->input[i] = dither->input[0] + i * dither->in_width;\n\n  if ((dither->output = malloc(dither->out_width)) == NULL)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate output buffer.\");\n    return (false);\n  }\n\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"dither=[\");\n  for (i = 0; i < 16; i ++)\n    papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"  [ %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u ]\", dither->dither[i][0], dither->dither[i][1], dither->dither[i][2], dither->dither[i][3], dither->dither[i][4], dither->dither[i][5], dither->dither[i][6], dither->dither[i][7], dither->dither[i][8], dither->dither[i][9], dither->dither[i][10], dither->dither[i][11], dither->dither[i][12], dither->dither[i][13], dither->dither[i][14], dither->dither[i][15]);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"]\");\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_bottom=%u\", dither->in_bottom);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_left=%u\", dither->in_left);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_top=%u\", dither->in_top);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_width=%u\", dither->in_width);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_bpp=%u\", dither->in_bpp);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_white=%u\", dither->in_white);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"out_white=%u\", dither->out_white);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"out_width=%u\", dither->out_width);\n\n  // Return indicating success...\n  return (true);\n}\n\n\n//\n// 'lprintDitherFree()' - Free memory for a dither buffer.\n//\n\nvoid\nlprintDitherFree(\n    lprint_dither_t *dither)\t\t// I - Dither buffer\n{\n  free(dither->input[0]);\n  free(dither->output);\n\n  memset(dither, 0, sizeof(lprint_dither_t));\n}\n\n\n//\n// 'lprintDitherLine()' - Copy and dither a line.\n//\n// This function copies the current line and dithers it as needed.  `true` is\n// returned if the output line needs to be sent to the printer - the `output`\n// member points to the output bitmap and `outwidth` specifies the bitmap width\n// in bytes.\n//\n// Dithering is always 1 line behind the current line, so you need to call this\n// function one last time in the endpage callback with `y` == `cupsHeight` to\n// get the last line.\n//\n\nbool\t\t\t\t\t// O - `true` if line dithered, `false` to skip\nlprintDitherLine(\n    lprint_dither_t     *dither,\t// I - Dither buffer\n    unsigned            y,\t\t// I - Input line number (starting at `0`)\n    const unsigned char *line)\t\t// I - Input line\n{\n  unsigned\tx,\t\t\t// Current column\n\t\tcount;\t\t\t// Remaining count\n  unsigned char\t*current,\t\t// Current line\n\t\t*prev,\t\t\t// Previous line\n\t\t*next;\t\t\t// Next line\n  unsigned char\t*dline,\t\t\t// Dither line\n\t\t*outptr,\t\t// Pointer into output\n\t\tbyte,\t\t\t// Current byte\n\t\tbit;\t\t\t// Current bit\n\n\n  // Copy current input line...\n  count = dither->in_width;\n  next  = dither->input[y & 3];\n\n  memset(next, 0, count);\n\n  if (line)\n  {\n    switch (dither->in_bpp)\n    {\n      case 1 : // 1-bit black\n\t  for (line += dither->in_left / 8, byte = *line++, bit = 128 >> (dither->in_left & 7); count > 0; count --, next ++)\n\t  {\n\t    // Convert to 8-bit black...\n\t    if (byte & bit)\n\t      *next = 255;\n\n\t    if (bit > 1)\n\t    {\n\t      bit /= 2;\n\t    }\n\t    else\n\t    {\n\t      bit  = 128;\n\t      byte = *line++;\n\t    }\n\t  }\n\t  break;\n\n      case 8 : // Grayscale or 8-bit black\n\t  if (dither->in_white)\n\t  {\n\t    // Convert grayscale to black...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = 255 - *line;\n\t    }\n\t  }\n\t  else\n\t  {\n\t    // Copy with clamping...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t  }\n\t  break;\n\n      default : // Something else...\n\t  return (false);\n    }\n  }\n\n  // If we are outside the imageable area then don't dither...\n  if (y < (dither->in_top + 1) || y > (dither->in_bottom + 1))\n    return (false);\n\n  // Dither...\n  for (x = 0, count = dither->in_width, prev = dither->input[(y - 2) & 3], current = dither->input[(y - 1) & 3], next = dither->input[y & 3], outptr = dither->output, byte = dither->out_white, bit = 128, dline = dither->dither[y & 15]; count > 0; x ++, count --, prev ++, current ++, next ++)\n  {\n    if (*current)\n    {\n      // Not pure white/blank...\n      if (*current == 255)\n      {\n        // 100% black...\n        byte ^= bit;\n      }\n      else\n      {\n        // Only dither if this pixel does not border 100% white or black...\n\tif ((x > 0 && (current[-1] == 255 || current[-1] == 0)) ||\n\t    (count > 1 && (current[1] == 255 || current[1] == 0)) ||\n\t    *prev == 255 || *prev == 0 || *next == 255 || *next == 0)\n        {\n          // Threshold\n          if (*current > 127)\n\t    byte ^= bit;\n        }\n        else if (*current > dline[x & 15])\n        {\n          // Dither anything else\n\t  byte ^= bit;\n\t}\n      }\n    }\n\n    // Next output bit...\n    if (bit > 1)\n    {\n      bit /= 2;\n    }\n    else\n    {\n      *outptr++ = byte;\n      byte      = dither->out_white;\n      bit       = 128;\n    }\n  }\n\n  // Save last byte of output as needed and return...\n  if (bit < 128)\n    *outptr = byte;\n\n  return (true);\n}\n\n\n//\n// 'lprintMediaLoad()' - Load custom label sizes for a printer.\n//\n\nbool\t\t\t\t\t// O - `true` on success, `false` on error\nlprintMediaLoad(\n    pappl_printer_t        *printer,\t// I - Printer\n    pappl_pr_driver_data_t *data)\t// I - Driver data\n{\n  lprint_cmedia_t\t*cmedia;\t// Custom media\n  int\t\t\tfd;\t\t// Custom media file descriptor\n  cups_file_t\t\t*fp;\t\t// Custom media file\n  char\t\t\tfilename[1024],\t// Custom media filename\n\t\t\tline[256];\t// Line from file\n  int\t\t\ti;\t\t// Looping var\n\n\n  // Allocate memory as needed...\n  if ((cmedia = (lprint_cmedia_t *)data->extension) == NULL)\n  {\n    if ((cmedia = (lprint_cmedia_t *)calloc(1, sizeof(lprint_cmedia_t))) == NULL)\n      return (false);\n\n    data->extension = cmedia;\n    data->delete_cb = free_cmedia;\n  }\n\n  // Load any existing custom media sizes...\n  if ((fd = papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"r\")) < 0)\n    return (true);\n\n  if ((fp = cupsFileOpenFd(fd, \"r\")) == NULL)\n  {\n    close(fd);\n    return (true);\n  }\n\n  for (i = 0; i < data->num_source && cupsFileGets(fp, line, sizeof(line)); i ++)\n    papplCopyString(cmedia->custom_name[i], line, sizeof(cmedia->custom_name[i]));\n\n  cupsFileClose(fp);\n\n  return (true);\n}\n\n\n//\n// 'lprintMediaMatch()' - Match the loaded media to one of the supported sizes.\n//\n\nconst char *\t\t\t\t// O - Matching media size or `NULL` if none\nlprintMediaMatch(\n    pappl_printer_t *printer,\t\t// I - Printer\n    int             source,\t\t// I - \"media-source\" index (0-based)\n    int             width,\t\t// I - Width in hundredths of millimeters or `0` if unknown\n    int             length)\t\t// I - Length in hundredths of millimeters\n{\n  pappl_pr_driver_data_t pdata;\t\t// Printer driver data\n  lprint_cmedia_t\t*cmedia;\t// Custom media info\n  int\t\t\ti;\t\t// Looping var\n  pwg_media_t\t\t*pwg;\t\t// Current size info\n  const char\t\t*ret = NULL;\t// Return value\n\n\n  papplPrinterGetDriverData(printer, &pdata);\n\n  for (i = 0; i < pdata.num_media; i ++)\n  {\n    if ((!strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5)) && (strstr(pdata.media[i], \"_min_\") != NULL || strstr(pdata.media[i], \"_max_\") != NULL))\n      continue;\n\n    if ((pwg = pwgMediaForPWG(pdata.media[i])) == NULL)\n      continue;\n\n    if ((abs(pwg->width - width) <= 100 || !width) && (abs(pwg->length - length) <= 100 || !length))\n    {\n      if (!ret || !strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5))\n        ret = pdata.media[i];\n    }\n  }\n\n  if (!ret)\n  {\n    if (!pdata.extension)\n      lprintMediaLoad(printer, &pdata);\n\n    if ((cmedia = (lprint_cmedia_t *)pdata.extension) != NULL)\n    {\n      if (length == 0)\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"roll\", pdata.source[source], width, length, /*units*/NULL);\n      else\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"custom\", pdata.source[source], width, length, /*units*/NULL);\n\n      lprintMediaUpdate(printer, &pdata);\n      lprintMediaSave(printer, &pdata);\n\n      ret = cmedia->custom_name[source];\n    }\n  }\n\n  if (ret && strcmp(pdata.media_ready[source].size_name, ret) && (pwg = pwgMediaForPWG(ret)) != NULL)\n  {\n    // Ready media has changed...\n    papplCopyString(pdata.media_ready[source].size_name, ret, sizeof(pdata.media_ready[source].size_name));\n    pdata.media_ready[source].size_width  = pwg->width;\n    pdata.media_ready[source].size_length = pwg->length;\n\n    if (pwg->length == 0)\n      papplCopyString(pdata.media_ready[source].type, \"continuous\", sizeof(pdata.media_ready[source].type));\n    else\n      papplCopyString(pdata.media_ready[source].type, \"label\", sizeof(pdata.media_ready[source].type));\n\n    papplPrinterSetDriverData(printer, &pdata, NULL);\n  }\n\n  return (ret);\n}\n\n\n//\n// 'lprintMediaSave()' - Save custom label sizes for a printer.\n//\n\nbool\t\t\t\t\t// O - `true` on success, `false` on error\nlprintMediaSave(\n    pappl_printer_t        *printer,\t// I - Printer\n    pappl_pr_driver_data_t *data)\t// I - Driver data\n{\n  lprint_cmedia_t\t*cmedia;\t// Custom media\n  int\t\t\ti,\t\t// Looping var\n\t\t\tfd;\t\t// Custom media file descriptor\n  cups_file_t\t\t*fp;\t\t// Custom media file\n  char\t\t\tfilename[1024];\t// Custom media filename\n\n\n  // Get the custom media...\n  if ((cmedia = (lprint_cmedia_t *)data->extension) == NULL)\n  {\n    // No custom media, delete any existing file...\n    papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"x\");\n    return (true);\n  }\n\n  // Save custom media sizes...\n  if ((fd = papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"w\")) < 0)\n    return (true);\n\n  if ((fp = cupsFileOpenFd(fd, \"w\")) == NULL)\n  {\n    close(fd);\n    return (true);\n  }\n\n  for (i = 0; i < data->num_source; i ++)\n    cupsFilePrintf(fp, \"%s\\n\", cmedia->custom_name[i]);\n\n  cupsFileClose(fp);\n\n  return (true);\n}\n\n\n//\n// 'lprintMediaUI()' - Show the printer media web page.\n//\n\nbool\t\t\t\t\t// O - `true` on success, `false` on failure\nlprintMediaUI(\n    pappl_client_t  *client,\t\t// I - Client\n    pappl_printer_t *printer)\t\t// I - Printer\n{\n  int\t\t\ti;\t\t// Looping var\n  pappl_pr_driver_data_t data;\t\t// Driver data\n  lprint_cmedia_t\t*cmedia;\t// Custom label sizes, if any\n  char\t\t\tname[128],\t// Form variable name\n\t\t\ttext[256];\t// Localized text\n  const char\t\t*status = NULL;\t// Status message, if any\n\n\n  LPRINT_DEBUG(\"lprintMediaUI(client=%p, printer=%p(%s))\\n\", client, printer, printer ? papplPrinterGetName(printer) : \"null\");\n\n  // Only allow access as appropriate...\n  if (!papplClientHTMLAuthorize(client))\n    return (true);\n\n  // Get the driver data...\n  papplPrinterGetDriverData(printer, &data);\n\n  LPRINT_DEBUG(\"lprintMediaUI: data.extension=%p\\n\", data.extension);\n  if (!data.extension)\n  {\n    lprintMediaLoad(printer, &data);\n    LPRINT_DEBUG(\"lprintMediaUI: AFTER data.extension=%p\\n\", data.extension);\n  }\n  cmedia = (lprint_cmedia_t *)data.extension;\n\n  if (papplClientGetMethod(client) == HTTP_STATE_POST)\n  {\n    int\t\t\tnum_form = 0;\t// Number of form variable\n    cups_option_t\t*form = NULL;\t// Form variables\n\n    if ((num_form = papplClientGetForm(client, &form)) == 0)\n    {\n      status = papplClientGetLocString(client, \"Invalid form data.\");\n    }\n    else if (!papplClientIsValidForm(client, num_form, form))\n    {\n      status = papplClientGetLocString(client, \"Invalid form submission.\");\n    }\n    else\n    {\n      bool\t\tchanged = false;// Did the custom media list change?\n      pwg_media_t\t*pwg = NULL;\t// PWG media info\n      pappl_media_col_t\t*ready;\t\t// Current ready media\n      const char\t*value,\t\t// Value of form variable\n\t\t\t*custom_width,\t// Custom media width\n\t\t\t*custom_length,\t// Custom media length\n\t\t\t*custom_units;\t// Custom media units\n\n      memset(data.media_ready, 0, sizeof(data.media_ready));\n      for (i = 0, ready = data.media_ready; i < data.num_source; i ++, ready ++)\n      {\n        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n      if (changed)\n      {\n\t// Rebuild media size list and save...\n\tlprintMediaUpdate(printer, &data);\n\tpapplPrinterSetDriverData(printer, &data, NULL);\n\tlprintMediaSave(printer, &data);\n      }\n\n      papplPrinterSetReadyMedia(printer, data.num_source, data.media_ready);\n\n      status = \"Changes saved.\";\n    }\n\n    cupsFreeOptions(num_form, form);\n  }\n\n  papplClientHTMLPrinterHeader(client, printer, \"Media\", 0, NULL, NULL);\n  if (status)\n    papplClientHTMLPrintf(client, \"<div class=\\\"banner\\\">%s</div>\\n\", status);\n\n  papplClientHTMLStartForm(client, papplClientGetURI(client), false);\n\n  papplClientHTMLPuts(client,\n\t\t      \"          <table class=\\\"form\\\">\\n\"\n\t\t      \"            <tbody>\\n\");\n\n  for (i = 0; i < data.num_source; i ++)\n  {\n    snprintf(name, sizeof(name), \"ready%d\", i);\n    media_chooser(client, &data, localize_keyword(client, \"media-source\", data.source[i], text, sizeof(text)), name, data.media_ready + i);\n  }\n\n  papplClientHTMLPrintf(client,\n\t\t\t\"              <tr><th></th><td><input type=\\\"submit\\\" value=\\\"%s\\\"></td></tr>\\n\"\n\t\t\t\"            </tbody>\\n\"\n\t\t\t\"          </table>\"\n\t\t\t\"        </form>\\n\"\n\t\t\t\"        <script>function show_hide_custom(name) {\\n\"\n\t\t        \"  let selelem = document.forms['form'][name + '-size'];\\n\"\n\t\t        \"  let divelem = document.getElementById(name + '-custom');\\n\"\n\t\t        \"  if (selelem.selectedIndex == 0)\\n\"\n\t\t        \"    divelem.style = 'display: inline-block;';\\n\"\n\t\t        \"  else\\n\"\n\t\t        \"    divelem.style = 'display: none;';\\n\"\n\t\t\t\"}</script>\\n\", papplClientGetLocString(client, \"Save Changes\"));\n\n  papplClientHTMLPrinterFooter(client);\n  return (true);\n}\n\n\n//\n// 'lprintMediaUpdate()' - Update the list of custom label sizes.\n//\n\nvoid\nlprintMediaUpdate(\n    pappl_printer_t        *printer,\t// I - Printer\n    pappl_pr_driver_data_t *data)\t// I - Driver data\n{\n  int\t\t\ti, j;\t\t// Looping vars\n  lprint_cmedia_t\t*cmedia;\t// Custom label sizes\n\n\n  (void)printer;\n\n  // Find the last size in the media list...\n  for (i = 0; i < data->num_media; i ++)\n  {\n    if (!strncmp(data->media[i], \"custom_\", 7) && strncmp(data->media[i], \"custom_min_\", 11) && strncmp(data->media[i], \"custom_max_\", 11))\n      break;\n  }\n\n  // Then copy any custom sizes over...\n  if ((cmedia = (lprint_cmedia_t *)data->extension) != NULL)\n  {\n    for (j = 0; j < data->num_source && i < PAPPL_MAX_MEDIA; j ++)\n    {\n      if (cmedia->custom_name[j][0])\n        data->media[i ++] = cmedia->custom_name[j];\n    }\n  }\n\n  data->num_media = i;\n\n  LPRINT_DEBUG(\"lprintMediaUpdate: num_media=%d\\n\", data->num_media);\n  for (i = 0; i < data->num_media; i ++)\n    LPRINT_DEBUG(\"lprintMediaUpdate: media[%d]='%s'\\n\", i, data->media[i]);\n}\n\n\n//\n// 'lprintPackBitsAlloc()' - Allocate a PackBits compression buffer.\n//\n// Free the returned pointer with `free()`...\n//\n\nunsigned char *\t\t\t\t// O - Pointer to compression buffer\nlprintPackBitsAlloc(size_t len)\t\t// I - Size of input buffer\n{\n  return (malloc(len + (len + 127) / 128));\n}\n\n\n//\n// 'lprintPackBitsCompress()' - PackBits compress some bytes to the destination buffer.\n//\n// The destination should be allocated wth `lprintPackBitsAlloc()`.\n// The algorithm is defined in many places, including at\n// <https://en.wikipedia.org/wiki/PackBits>.\n//\n\nsize_t\t\t\t\t\t// O - Number of compressed bytes\nlprintPackBitsCompress(\n    unsigned char       *dst,\t\t// I - Destination buffer\n    const unsigned char *src,\t\t// I - Source buffer\n    size_t              srclen)\t\t// I - Number of source bytes (at least 3)\n{\n  const unsigned char\t*srcptr,\t// Current byte pointer\n\t\t\t*srcend,\t// End-of-line byte pointer\n\t\t\t*srclptr,\t// Start of literal sequence\n\t\t\t*srcrptr;\t// Start of repeated sequence\n  unsigned char\t\t*dstptr;\t// Pointer into compression buffer\n  unsigned\t\tcount,\t\t// Current count\n\t\t\tsrclcount,\t// Count of literal bytes for output\n\t\t\tsrcrcount;\t// Count of repeated bytes for output\n\n\n  // Do TIFF PackBits compression over the source buffer...\n  srcptr = srclptr = src;\n  srcend = src + srclen - 1;\n  dstptr = dst;\n\n  while (srclptr <= srcend)\n  {\n    // Scan for literal and repeated sequences...\n    srclcount = srcptr - srclptr;\n    srcrcount = 0;\n\n    while (srcptr <= srcend)\n    {\n      // Extend literal sequence, if any...\n      while (srcptr < srcend && srcptr[0] != srcptr[1])\n\tsrcptr ++;\n\n      srclcount = srcptr - srclptr;\n      srcrcount = 0;\n\n      if (srcptr == srcend)\n      {\n        // Last byte, stop here...\n\tsrcptr ++;\n\tsrclcount ++;\n\tbreak;\n      }\n\n      // Count a run...\n      srcrptr = srcptr;\n\n      while (srcptr < srcend && srcptr[0] == srcptr[1])\n      {\n\tsrcptr ++;\n\tsrcrcount ++;\n      }\n\n      srcptr ++;\n      srcrcount ++;\n\n      // Only stop to encode if the repeated sequence is long enough to make sense...\n      if (srcrcount > 2 || srcrptr == srclptr)\n        break;\n    }\n\n    // Encode literal byte sequences...\n    while (srclcount > 0)\n    {\n      if (srclcount > 128)\n\tcount = 128;\n      else\n\tcount = srclcount;\n\n      *dstptr++ = (unsigned char)(count - 1);\n      memcpy(dstptr, srclptr, count);\n      dstptr += count;\n      srclptr += count;\n      srclcount -= count;\n    }\n\n    // Encode repeated byte sequences...\n    while (srcrcount > 1)\n    {\n      if (srcrcount > 128)\n\tcount = 128;\n      else\n\tcount = srcrcount;\n\n      *dstptr++ = (unsigned char)(257 - count);\n      *dstptr++ = *srcrptr;\n      srcrcount -= count;\n    }\n\n    // Reset the literal pointer and continue...\n    srclptr = srcptr - srcrcount;\n  }\n\n  return ((size_t)(dstptr - dst));\n}\n\n\n//\n// 'free_cmedia()' - Free custom media information.\n//\n\nstatic void\nfree_cmedia(\n    pappl_printer_t        *printer,\t// I - Printer (unused)\n    pappl_pr_driver_data_t *data)\t// I - Driver data\n{\n  free(data->extension);\n}\n\n\n//\n// 'localize_keyword()' - Localize an attribute keyword value.\n//\n\nstatic char *\t\t\t\t// O - Localized string\nlocalize_keyword(\n    pappl_client_t *client,\t\t// I - Client\n    const char     *attrname,\t\t// I - Attribute name\n    const char     *keyword,\t\t// I - Keyword value\n    char           *buffer,\t\t// I - String buffer\n    size_t         bufsize)\t\t// I - Size of string buffer\n{\n  const char\t*loctext;\t\t// Localized text\n  char\t\tkey[256];\t\t// Localization key\n\n\n  snprintf(key, sizeof(key), \"%s.%s\", attrname, keyword);\n  if ((loctext = papplClientGetLocString(client, key)) != key)\n  {\n    // Use localized string...\n    papplCopyString(buffer, loctext, bufsize);\n  }\n  else if (!strcmp(attrname, \"media\"))\n  {\n    // Create a dimensional name for the size...\n    pwg_media_t *pwg = pwgMediaForPWG(keyword);\n\t\t\t\t\t// PWG media size info\n\n    LPRINT_DEBUG(\"localize_keyword: keyword='%s', pwg=%p(%dx%d)\\n\", keyword, pwg, pwg ? pwg->width : 0, pwg ? pwg->length : 0);\n    if (pwg)\n    {\n      if ((pwg->width % 100) == 0 && (pwg->width % 2540) != 0)\n\tsnprintf(buffer, bufsize, \"%d x %dmm Custom Label\", pwg->width / 100, pwg->length / 100);\n      else\n\tsnprintf(buffer, bufsize, \"%g x %g\u02ba Custom Label\", pwg->width / 2540.0, pwg->length / 2540.0);\n    }\n    else\n    {\n      snprintf(buffer, bufsize, \"Invalid '%s'\", keyword);\n    }\n  }\n  else\n  {\n    // Convert \"separated-words\" to \"Separated Words\"...\n    char\t*ptr;\t\t\t// Pointer into string\n\n    papplCopyString(buffer, keyword, bufsize);\n    *buffer = (char)toupper(*buffer & 255);\n\n    for (ptr = buffer + 1; *ptr; ptr ++)\n    {\n      if (*ptr == '-' && ptr[1])\n      {\n\t*ptr++ = ' ';\n\t*ptr   = (char)toupper(*ptr & 255);\n      }\n    }\n  }\n\n  return (buffer);\n}\n\n\n//\n// 'media_chooser()' - Show the media chooser.\n//\n\nstatic void\nmedia_chooser(\n    pappl_client_t         *client,\t// I - Client\n    pappl_pr_driver_data_t *driver_data,// I - Driver data\n    const char             *title,\t// I - Title for field\n    const char             *name,\t// I - Form name/prefix\n    pappl_media_col_t      *media)\t// I - Current media values\n{\n  int\t\ti,\t\t\t// Looping vars\n\t\tcur_index = 0,\t\t// Current size index\n\t        sel_index = 0;\t\t// Selected size index...\n  pwg_media_t\t*pwg;\t\t\t// PWG media size info\n  char\t\ttext[256];\t\t// Localized text\n  const char\t*min_size = NULL,\t// Minimum size\n\t\t*max_size = NULL;\t// Maximum size\n\n\n  // media-size\n  papplLocFormatString(papplClientGetLoc(client), text, sizeof(text), \"%s Media\", title);\n  papplClientHTMLPrintf(client, \"              <tr><th>%s:</th><td>\", text);\n  for (i = 0; i < driver_data->num_media && (!min_size || !max_size); i ++)\n  {\n    if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n        min_size = driver_data->media[i];\n      else if (strstr(driver_data->media[i], \"_max_\"))\n        max_size = driver_data->media[i];\n    }\n  }\n  if (min_size && max_size)\n  {\n    papplClientHTMLPrintf(client, \"<select name=\\\"%s-size\\\" onChange=\\\"show_hide_custom('%s');\\\"><option value=\\\"custom\\\">%s</option>\", name, name, papplClientGetLocString(client, \"New Custom Size\"));\n    cur_index ++;\n  }\n  else\n    papplClientHTMLPrintf(client, \"<select name=\\\"%s-size\\\">\", name);\n\n  for (i = 0; i < driver_data->num_media; i ++)\n  {\n    if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n      {\n        min_size = driver_data->media[i];\n        continue;\n      }\n      else if (strstr(driver_data->media[i], \"_max_\"))\n      {\n        max_size = driver_data->media[i];\n        continue;\n      }\n    }\n\n    if (!strcmp(driver_data->media[i], media->size_name))\n      sel_index = cur_index;\n\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->media[i], sel_index == cur_index ? \" selected\" : \"\", localize_keyword(client, \"media\", driver_data->media[i], text, sizeof(text)));\n    cur_index ++;\n  }\n\n  if (min_size && max_size)\n  {\n    int cur_width, min_width, max_width;// Current/min/max width\n    int cur_length, min_length, max_length;\n\t\t\t\t\t// Current/min/max length\n    const char *cur_units;\t\t// Current units\n\n    if ((pwg = pwgMediaForPWG(min_size)) != NULL)\n    {\n      min_width  = pwg->width;\n      min_length = pwg->length;\n    }\n    else\n    {\n      min_width  = 1 * 2540;\n      min_length = 1 * 2540;\n    }\n\n    if ((pwg = pwgMediaForPWG(max_size)) != NULL)\n    {\n      max_width  = pwg->width;\n      max_length = pwg->length;\n    }\n    else\n    {\n      max_width  = 9 * 2540;\n      max_length = 22 * 2540;\n    }\n\n    if ((cur_width = media->size_width) < min_width)\n      cur_width = min_width;\n    else if (cur_width > max_width)\n      cur_width = max_width;\n\n    if ((cur_length = media->size_length) < min_length)\n      cur_length = min_length;\n    else if (cur_length > max_length)\n      cur_length = max_length;\n\n    if ((cur_units = media->size_name + strlen(media->size_name) - 2) < media->size_name)\n      cur_units = \"in\";\n\n    if (!strcmp(cur_units, \"mm\"))\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\"><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\" checked><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 100.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 100.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n    else\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\" checked><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\"><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 2540.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 2540.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n  }\n  else\n  {\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n  // media-tracking (if needed)\n  if (driver_data->tracking_supported)\n  {\n    pappl_media_tracking_t tracking;\t// Tracking value\n    static const char * const trackings[] =\n    {\t\t\t\t\t// Tracking strings\n      \"continuous\",\n      \"gap\",\n      \"mark\",\n      \"web\"\n    };\n\n    papplClientHTMLPrintf(client, \"                <select name=\\\"%s-tracking\\\">\", name);\n    for (i = 0, tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS; tracking <= PAPPL_MEDIA_TRACKING_WEB; i ++, tracking *= 2)\n    {\n      if (!(driver_data->tracking_supported & tracking))\n\tcontinue;\n\n      papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n    }\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n  // media-type\n  papplClientHTMLPrintf(client, \"                <select name=\\\"%s-type\\\">\", name);\n  for (i = 0; i < driver_data->num_type; i ++)\n  {\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->type[i], !strcmp(driver_data->type[i], media->type) ? \" selected\" : \"\", localize_keyword(client, \"media-type\", driver_data->type[i], text, sizeof(text)));\n  }\n  papplClientHTMLPrintf(client, \"</select></td></tr>\\n\");\n}\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "static_const_char_pointer_array",
    "start_line": 1,
    "end_line": 1040,
    "code": "//\n// Common driver code for LPrint, a Label Printer Application\n//\n// Copyright \u00a9\u00a02019-2025 by Michael R Sweet.\n//\n// Licensed under Apache License v2.0.  See the file \"LICENSE\" for more\n// information.\n//\n\n#include \"lprint.h\"\n\n\n//\n// Constants...\n//\n\n#define LPRINT_WHITE\t56\n#define LPRINT_BLACK\t199\n#define LPRINT_TRASH\t\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi bi-trash3-fill\\\" viewBox=\\\"0 0 16 16\\\"><path d=\\\"M11 1.5v1h3.5a.5.5 0 0 1 0 1h-.538l-.853 10.66A2 2 0 0 1 11.115 16h-6.23a2 2 0 0 1-1.994-1.84L2.038 3.5H1.5a.5.5 0 0 1 0-1H5v-1A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5Zm-5 0v1h4v-1a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5ZM4.5 5.029l.5 8.5a.5.5 0 1 0 .998-.06l-.5-8.5a.5.5 0 1 0-.998.06Zm6.53-.528a.5.5 0 0 0-.528.47l-.5 8.5a.5.5 0 0 0 .998.058l.5-8.5a.5.5 0 0 0-.47-.528ZM8 4.5a.5.5 0 0 0-.5.5v8.5a.5.5 0 0 0 1 0V5a.5.5 0 0 0-.5-.5Z\\\"/></svg>\"\n\n\n//\n// Local functions...\n//\n\nstatic void\tfree_cmedia(pappl_printer_t *printer, pappl_pr_driver_data_t *data);\nstatic char\t*localize_keyword(pappl_client_t *client, const char *attrname, const char *keyword, char *buffer, size_t bufsize);\nstatic void\tmedia_chooser(pappl_client_t *client, pappl_pr_driver_data_t *driver_data, const char *title, const char *name, pappl_media_col_t *media);\n\n\n//\n// 'lprintDitherAlloc()' - Allocate memory for a dither buffer.\n//\n\nbool\t\t\t\t\t// O - `true` on success, `false` on error\nlprintDitherAlloc(\n    lprint_dither_t    *dither,\t\t// I - Dither buffer\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Print options\n    cups_cspace_t      out_cspace,\t// I - Output color space\n    double             out_gamma)\t// I - Output gamma correction\n{\n  int\t\ti, j;\t\t\t// Looping vars\n  unsigned\tright;\t\t\t// Right margin\n\n\n  // Adjust dithering array and compress to a range of 16 to 239\n  for (i = 0; i < 16; i ++)\n  {\n    for (j = 0; j < 16; j ++)\n    {\n      dither->dither[i][j] = (unsigned char)((LPRINT_BLACK - LPRINT_WHITE) * pow(options->dither[i][j] / 255.0, out_gamma) + LPRINT_WHITE);\n    }\n  }\n\n  // Calculate margins and dimensions...\n  if (!options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop])\n  {\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft]   = options->header.HWResolution[0] * (unsigned)options->media.left_margin / 2540;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop]    = options->header.HWResolution[1] * (unsigned)options->media.top_margin / 2540;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight]  = options->header.cupsWidth - options->header.HWResolution[0] * (unsigned)options->media.right_margin / 2540 - 1;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] = options->header.cupsHeight - options->header.HWResolution[1] * (unsigned)options->media.bottom_margin / 2540 - 1;\n  }\n\n  dither->in_left   = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft];\n  right             = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight];\n  dither->in_top    = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop];\n  dither->in_bottom = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom];\n  dither->in_width  = right - dither->in_left + 1;\n  dither->in_height = dither->in_bottom - dither->in_top + 1;\n  dither->out_width = (right - dither->in_left + 8) / 8;\n\n  if (dither->in_width > 65536)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Page too wide.\");\n    return (false);\t\t\t// Protect against large allocations\n  }\n\n  // Calculate input/output color values\n  dither->in_bpp = options->header.cupsBitsPerPixel;\n\n  switch (options->header.cupsColorSpace)\n  {\n    case CUPS_CSPACE_W :\n    case CUPS_CSPACE_SW :\n    case CUPS_CSPACE_RGB :\n    case CUPS_CSPACE_SRGB :\n    case CUPS_CSPACE_ADOBERGB :\n        dither->in_white = 255;\n        break;\n\n    default :\n        dither->in_white = 0;\n        break;\n  }\n\n  switch (out_cspace)\n  {\n    case CUPS_CSPACE_W :\n    case CUPS_CSPACE_SW :\n    case CUPS_CSPACE_RGB :\n    case CUPS_CSPACE_SRGB :\n    case CUPS_CSPACE_ADOBERGB :\n        dither->out_white = 255;\n        break;\n\n    default :\n        dither->out_white = 0;\n        break;\n  }\n\n  // Allocate memory...\n  if ((dither->input[0] = calloc(4 * dither->in_width, sizeof(unsigned char))) == NULL)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate input buffer.\");\n    return (false);\n  }\n\n  for (i = 1; i < 4; i ++)\n    dither->input[i] = dither->input[0] + i * dither->in_width;\n\n  if ((dither->output = malloc(dither->out_width)) == NULL)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate output buffer.\");\n    return (false);\n  }\n\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"dither=[\");\n  for (i = 0; i < 16; i ++)\n    papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"  [ %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u ]\", dither->dither[i][0], dither->dither[i][1], dither->dither[i][2], dither->dither[i][3], dither->dither[i][4], dither->dither[i][5], dither->dither[i][6], dither->dither[i][7], dither->dither[i][8], dither->dither[i][9], dither->dither[i][10], dither->dither[i][11], dither->dither[i][12], dither->dither[i][13], dither->dither[i][14], dither->dither[i][15]);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"]\");\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_bottom=%u\", dither->in_bottom);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_left=%u\", dither->in_left);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_top=%u\", dither->in_top);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_width=%u\", dither->in_width);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_bpp=%u\", dither->in_bpp);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_white=%u\", dither->in_white);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"out_white=%u\", dither->out_white);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"out_width=%u\", dither->out_width);\n\n  // Return indicating success...\n  return (true);\n}\n\n\n//\n// 'lprintDitherFree()' - Free memory for a dither buffer.\n//\n\nvoid\nlprintDitherFree(\n    lprint_dither_t *dither)\t\t// I - Dither buffer\n{\n  free(dither->input[0]);\n  free(dither->output);\n\n  memset(dither, 0, sizeof(lprint_dither_t));\n}\n\n\n//\n// 'lprintDitherLine()' - Copy and dither a line.\n//\n// This function copies the current line and dithers it as needed.  `true` is\n// returned if the output line needs to be sent to the printer - the `output`\n// member points to the output bitmap and `outwidth` specifies the bitmap width\n// in bytes.\n//\n// Dithering is always 1 line behind the current line, so you need to call this\n// function one last time in the endpage callback with `y` == `cupsHeight` to\n// get the last line.\n//\n\nbool\t\t\t\t\t// O - `true` if line dithered, `false` to skip\nlprintDitherLine(\n    lprint_dither_t     *dither,\t// I - Dither buffer\n    unsigned            y,\t\t// I - Input line number (starting at `0`)\n    const unsigned char *line)\t\t// I - Input line\n{\n  unsigned\tx,\t\t\t// Current column\n\t\tcount;\t\t\t// Remaining count\n  unsigned char\t*current,\t\t// Current line\n\t\t*prev,\t\t\t// Previous line\n\t\t*next;\t\t\t// Next line\n  unsigned char\t*dline,\t\t\t// Dither line\n\t\t*outptr,\t\t// Pointer into output\n\t\tbyte,\t\t\t// Current byte\n\t\tbit;\t\t\t// Current bit\n\n\n  // Copy current input line...\n  count = dither->in_width;\n  next  = dither->input[y & 3];\n\n  memset(next, 0, count);\n\n  if (line)\n  {\n    switch (dither->in_bpp)\n    {\n      case 1 : // 1-bit black\n\t  for (line += dither->in_left / 8, byte = *line++, bit = 128 >> (dither->in_left & 7); count > 0; count --, next ++)\n\t  {\n\t    // Convert to 8-bit black...\n\t    if (byte & bit)\n\t      *next = 255;\n\n\t    if (bit > 1)\n\t    {\n\t      bit /= 2;\n\t    }\n\t    else\n\t    {\n\t      bit  = 128;\n\t      byte = *line++;\n\t    }\n\t  }\n\t  break;\n\n      case 8 : // Grayscale or 8-bit black\n\t  if (dither->in_white)\n\t  {\n\t    // Convert grayscale to black...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = 255 - *line;\n\t    }\n\t  }\n\t  else\n\t  {\n\t    // Copy with clamping...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t  }\n\t  break;\n\n      default : // Something else...\n\t  return (false);\n    }\n  }\n\n  // If we are outside the imageable area then don't dither...\n  if (y < (dither->in_top + 1) || y > (dither->in_bottom + 1))\n    return (false);\n\n  // Dither...\n  for (x = 0, count = dither->in_width, prev = dither->input[(y - 2) & 3], current = dither->input[(y - 1) & 3], next = dither->input[y & 3], outptr = dither->output, byte = dither->out_white, bit = 128, dline = dither->dither[y & 15]; count > 0; x ++, count --, prev ++, current ++, next ++)\n  {\n    if (*current)\n    {\n      // Not pure white/blank...\n      if (*current == 255)\n      {\n        // 100% black...\n        byte ^= bit;\n      }\n      else\n      {\n        // Only dither if this pixel does not border 100% white or black...\n\tif ((x > 0 && (current[-1] == 255 || current[-1] == 0)) ||\n\t    (count > 1 && (current[1] == 255 || current[1] == 0)) ||\n\t    *prev == 255 || *prev == 0 || *next == 255 || *next == 0)\n        {\n          // Threshold\n          if (*current > 127)\n\t    byte ^= bit;\n        }\n        else if (*current > dline[x & 15])\n        {\n          // Dither anything else\n\t  byte ^= bit;\n\t}\n      }\n    }\n\n    // Next output bit...\n    if (bit > 1)\n    {\n      bit /= 2;\n    }\n    else\n    {\n      *outptr++ = byte;\n      byte      = dither->out_white;\n      bit       = 128;\n    }\n  }\n\n  // Save last byte of output as needed and return...\n  if (bit < 128)\n    *outptr = byte;\n\n  return (true);\n}\n\n\n//\n// 'lprintMediaLoad()' - Load custom label sizes for a printer.\n//\n\nbool\t\t\t\t\t// O - `true` on success, `false` on error\nlprintMediaLoad(\n    pappl_printer_t        *printer,\t// I - Printer\n    pappl_pr_driver_data_t *data)\t// I - Driver data\n{\n  lprint_cmedia_t\t*cmedia;\t// Custom media\n  int\t\t\tfd;\t\t// Custom media file descriptor\n  cups_file_t\t\t*fp;\t\t// Custom media file\n  char\t\t\tfilename[1024],\t// Custom media filename\n\t\t\tline[256];\t// Line from file\n  int\t\t\ti;\t\t// Looping var\n\n\n  // Allocate memory as needed...\n  if ((cmedia = (lprint_cmedia_t *)data->extension) == NULL)\n  {\n    if ((cmedia = (lprint_cmedia_t *)calloc(1, sizeof(lprint_cmedia_t))) == NULL)\n      return (false);\n\n    data->extension = cmedia;\n    data->delete_cb = free_cmedia;\n  }\n\n  // Load any existing custom media sizes...\n  if ((fd = papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"r\")) < 0)\n    return (true);\n\n  if ((fp = cupsFileOpenFd(fd, \"r\")) == NULL)\n  {\n    close(fd);\n    return (true);\n  }\n\n  for (i = 0; i < data->num_source && cupsFileGets(fp, line, sizeof(line)); i ++)\n    papplCopyString(cmedia->custom_name[i], line, sizeof(cmedia->custom_name[i]));\n\n  cupsFileClose(fp);\n\n  return (true);\n}\n\n\n//\n// 'lprintMediaMatch()' - Match the loaded media to one of the supported sizes.\n//\n\nconst char *\t\t\t\t// O - Matching media size or `NULL` if none\nlprintMediaMatch(\n    pappl_printer_t *printer,\t\t// I - Printer\n    int             source,\t\t// I - \"media-source\" index (0-based)\n    int             width,\t\t// I - Width in hundredths of millimeters or `0` if unknown\n    int             length)\t\t// I - Length in hundredths of millimeters\n{\n  pappl_pr_driver_data_t pdata;\t\t// Printer driver data\n  lprint_cmedia_t\t*cmedia;\t// Custom media info\n  int\t\t\ti;\t\t// Looping var\n  pwg_media_t\t\t*pwg;\t\t// Current size info\n  const char\t\t*ret = NULL;\t// Return value\n\n\n  papplPrinterGetDriverData(printer, &pdata);\n\n  for (i = 0; i < pdata.num_media; i ++)\n  {\n    if ((!strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5)) && (strstr(pdata.media[i], \"_min_\") != NULL || strstr(pdata.media[i], \"_max_\") != NULL))\n      continue;\n\n    if ((pwg = pwgMediaForPWG(pdata.media[i])) == NULL)\n      continue;\n\n    if ((abs(pwg->width - width) <= 100 || !width) && (abs(pwg->length - length) <= 100 || !length))\n    {\n      if (!ret || !strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5))\n        ret = pdata.media[i];\n    }\n  }\n\n  if (!ret)\n  {\n    if (!pdata.extension)\n      lprintMediaLoad(printer, &pdata);\n\n    if ((cmedia = (lprint_cmedia_t *)pdata.extension) != NULL)\n    {\n      if (length == 0)\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"roll\", pdata.source[source], width, length, /*units*/NULL);\n      else\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"custom\", pdata.source[source], width, length, /*units*/NULL);\n\n      lprintMediaUpdate(printer, &pdata);\n      lprintMediaSave(printer, &pdata);\n\n      ret = cmedia->custom_name[source];\n    }\n  }\n\n  if (ret && strcmp(pdata.media_ready[source].size_name, ret) && (pwg = pwgMediaForPWG(ret)) != NULL)\n  {\n    // Ready media has changed...\n    papplCopyString(pdata.media_ready[source].size_name, ret, sizeof(pdata.media_ready[source].size_name));\n    pdata.media_ready[source].size_width  = pwg->width;\n    pdata.media_ready[source].size_length = pwg->length;\n\n    if (pwg->length == 0)\n      papplCopyString(pdata.media_ready[source].type, \"continuous\", sizeof(pdata.media_ready[source].type));\n    else\n      papplCopyString(pdata.media_ready[source].type, \"label\", sizeof(pdata.media_ready[source].type));\n\n    papplPrinterSetDriverData(printer, &pdata, NULL);\n  }\n\n  return (ret);\n}\n\n\n//\n// 'lprintMediaSave()' - Save custom label sizes for a printer.\n//\n\nbool\t\t\t\t\t// O - `true` on success, `false` on error\nlprintMediaSave(\n    pappl_printer_t        *printer,\t// I - Printer\n    pappl_pr_driver_data_t *data)\t// I - Driver data\n{\n  lprint_cmedia_t\t*cmedia;\t// Custom media\n  int\t\t\ti,\t\t// Looping var\n\t\t\tfd;\t\t// Custom media file descriptor\n  cups_file_t\t\t*fp;\t\t// Custom media file\n  char\t\t\tfilename[1024];\t// Custom media filename\n\n\n  // Get the custom media...\n  if ((cmedia = (lprint_cmedia_t *)data->extension) == NULL)\n  {\n    // No custom media, delete any existing file...\n    papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"x\");\n    return (true);\n  }\n\n  // Save custom media sizes...\n  if ((fd = papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"w\")) < 0)\n    return (true);\n\n  if ((fp = cupsFileOpenFd(fd, \"w\")) == NULL)\n  {\n    close(fd);\n    return (true);\n  }\n\n  for (i = 0; i < data->num_source; i ++)\n    cupsFilePrintf(fp, \"%s\\n\", cmedia->custom_name[i]);\n\n  cupsFileClose(fp);\n\n  return (true);\n}\n\n\n//\n// 'lprintMediaUI()' - Show the printer media web page.\n//\n\nbool\t\t\t\t\t// O - `true` on success, `false` on failure\nlprintMediaUI(\n    pappl_client_t  *client,\t\t// I - Client\n    pappl_printer_t *printer)\t\t// I - Printer\n{\n  int\t\t\ti;\t\t// Looping var\n  pappl_pr_driver_data_t data;\t\t// Driver data\n  lprint_cmedia_t\t*cmedia;\t// Custom label sizes, if any\n  char\t\t\tname[128],\t// Form variable name\n\t\t\ttext[256];\t// Localized text\n  const char\t\t*status = NULL;\t// Status message, if any\n\n\n  LPRINT_DEBUG(\"lprintMediaUI(client=%p, printer=%p(%s))\\n\", client, printer, printer ? papplPrinterGetName(printer) : \"null\");\n\n  // Only allow access as appropriate...\n  if (!papplClientHTMLAuthorize(client))\n    return (true);\n\n  // Get the driver data...\n  papplPrinterGetDriverData(printer, &data);\n\n  LPRINT_DEBUG(\"lprintMediaUI: data.extension=%p\\n\", data.extension);\n  if (!data.extension)\n  {\n    lprintMediaLoad(printer, &data);\n    LPRINT_DEBUG(\"lprintMediaUI: AFTER data.extension=%p\\n\", data.extension);\n  }\n  cmedia = (lprint_cmedia_t *)data.extension;\n\n  if (papplClientGetMethod(client) == HTTP_STATE_POST)\n  {\n    int\t\t\tnum_form = 0;\t// Number of form variable\n    cups_option_t\t*form = NULL;\t// Form variables\n\n    if ((num_form = papplClientGetForm(client, &form)) == 0)\n    {\n      status = papplClientGetLocString(client, \"Invalid form data.\");\n    }\n    else if (!papplClientIsValidForm(client, num_form, form))\n    {\n      status = papplClientGetLocString(client, \"Invalid form submission.\");\n    }\n    else\n    {\n      bool\t\tchanged = false;// Did the custom media list change?\n      pwg_media_t\t*pwg = NULL;\t// PWG media info\n      pappl_media_col_t\t*ready;\t\t// Current ready media\n      const char\t*value,\t\t// Value of form variable\n\t\t\t*custom_width,\t// Custom media width\n\t\t\t*custom_length,\t// Custom media length\n\t\t\t*custom_units;\t// Custom media units\n\n      memset(data.media_ready, 0, sizeof(data.media_ready));\n      for (i = 0, ready = data.media_ready; i < data.num_source; i ++, ready ++)\n      {\n        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n      if (changed)\n      {\n\t// Rebuild media size list and save...\n\tlprintMediaUpdate(printer, &data);\n\tpapplPrinterSetDriverData(printer, &data, NULL);\n\tlprintMediaSave(printer, &data);\n      }\n\n      papplPrinterSetReadyMedia(printer, data.num_source, data.media_ready);\n\n      status = \"Changes saved.\";\n    }\n\n    cupsFreeOptions(num_form, form);\n  }\n\n  papplClientHTMLPrinterHeader(client, printer, \"Media\", 0, NULL, NULL);\n  if (status)\n    papplClientHTMLPrintf(client, \"<div class=\\\"banner\\\">%s</div>\\n\", status);\n\n  papplClientHTMLStartForm(client, papplClientGetURI(client), false);\n\n  papplClientHTMLPuts(client,\n\t\t      \"          <table class=\\\"form\\\">\\n\"\n\t\t      \"            <tbody>\\n\");\n\n  for (i = 0; i < data.num_source; i ++)\n  {\n    snprintf(name, sizeof(name), \"ready%d\", i);\n    media_chooser(client, &data, localize_keyword(client, \"media-source\", data.source[i], text, sizeof(text)), name, data.media_ready + i);\n  }\n\n  papplClientHTMLPrintf(client,\n\t\t\t\"              <tr><th></th><td><input type=\\\"submit\\\" value=\\\"%s\\\"></td></tr>\\n\"\n\t\t\t\"            </tbody>\\n\"\n\t\t\t\"          </table>\"\n\t\t\t\"        </form>\\n\"\n\t\t\t\"        <script>function show_hide_custom(name) {\\n\"\n\t\t        \"  let selelem = document.forms['form'][name + '-size'];\\n\"\n\t\t        \"  let divelem = document.getElementById(name + '-custom');\\n\"\n\t\t        \"  if (selelem.selectedIndex == 0)\\n\"\n\t\t        \"    divelem.style = 'display: inline-block;';\\n\"\n\t\t        \"  else\\n\"\n\t\t        \"    divelem.style = 'display: none;';\\n\"\n\t\t\t\"}</script>\\n\", papplClientGetLocString(client, \"Save Changes\"));\n\n  papplClientHTMLPrinterFooter(client);\n  return (true);\n}\n\n\n//\n// 'lprintMediaUpdate()' - Update the list of custom label sizes.\n//\n\nvoid\nlprintMediaUpdate(\n    pappl_printer_t        *printer,\t// I - Printer\n    pappl_pr_driver_data_t *data)\t// I - Driver data\n{\n  int\t\t\ti, j;\t\t// Looping vars\n  lprint_cmedia_t\t*cmedia;\t// Custom label sizes\n\n\n  (void)printer;\n\n  // Find the last size in the media list...\n  for (i = 0; i < data->num_media; i ++)\n  {\n    if (!strncmp(data->media[i], \"custom_\", 7) && strncmp(data->media[i], \"custom_min_\", 11) && strncmp(data->media[i], \"custom_max_\", 11))\n      break;\n  }\n\n  // Then copy any custom sizes over...\n  if ((cmedia = (lprint_cmedia_t *)data->extension) != NULL)\n  {\n    for (j = 0; j < data->num_source && i < PAPPL_MAX_MEDIA; j ++)\n    {\n      if (cmedia->custom_name[j][0])\n        data->media[i ++] = cmedia->custom_name[j];\n    }\n  }\n\n  data->num_media = i;\n\n  LPRINT_DEBUG(\"lprintMediaUpdate: num_media=%d\\n\", data->num_media);\n  for (i = 0; i < data->num_media; i ++)\n    LPRINT_DEBUG(\"lprintMediaUpdate: media[%d]='%s'\\n\", i, data->media[i]);\n}\n\n\n//\n// 'lprintPackBitsAlloc()' - Allocate a PackBits compression buffer.\n//\n// Free the returned pointer with `free()`...\n//\n\nunsigned char *\t\t\t\t// O - Pointer to compression buffer\nlprintPackBitsAlloc(size_t len)\t\t// I - Size of input buffer\n{\n  return (malloc(len + (len + 127) / 128));\n}\n\n\n//\n// 'lprintPackBitsCompress()' - PackBits compress some bytes to the destination buffer.\n//\n// The destination should be allocated wth `lprintPackBitsAlloc()`.\n// The algorithm is defined in many places, including at\n// <https://en.wikipedia.org/wiki/PackBits>.\n//\n\nsize_t\t\t\t\t\t// O - Number of compressed bytes\nlprintPackBitsCompress(\n    unsigned char       *dst,\t\t// I - Destination buffer\n    const unsigned char *src,\t\t// I - Source buffer\n    size_t              srclen)\t\t// I - Number of source bytes (at least 3)\n{\n  const unsigned char\t*srcptr,\t// Current byte pointer\n\t\t\t*srcend,\t// End-of-line byte pointer\n\t\t\t*srclptr,\t// Start of literal sequence\n\t\t\t*srcrptr;\t// Start of repeated sequence\n  unsigned char\t\t*dstptr;\t// Pointer into compression buffer\n  unsigned\t\tcount,\t\t// Current count\n\t\t\tsrclcount,\t// Count of literal bytes for output\n\t\t\tsrcrcount;\t// Count of repeated bytes for output\n\n\n  // Do TIFF PackBits compression over the source buffer...\n  srcptr = srclptr = src;\n  srcend = src + srclen - 1;\n  dstptr = dst;\n\n  while (srclptr <= srcend)\n  {\n    // Scan for literal and repeated sequences...\n    srclcount = srcptr - srclptr;\n    srcrcount = 0;\n\n    while (srcptr <= srcend)\n    {\n      // Extend literal sequence, if any...\n      while (srcptr < srcend && srcptr[0] != srcptr[1])\n\tsrcptr ++;\n\n      srclcount = srcptr - srclptr;\n      srcrcount = 0;\n\n      if (srcptr == srcend)\n      {\n        // Last byte, stop here...\n\tsrcptr ++;\n\tsrclcount ++;\n\tbreak;\n      }\n\n      // Count a run...\n      srcrptr = srcptr;\n\n      while (srcptr < srcend && srcptr[0] == srcptr[1])\n      {\n\tsrcptr ++;\n\tsrcrcount ++;\n      }\n\n      srcptr ++;\n      srcrcount ++;\n\n      // Only stop to encode if the repeated sequence is long enough to make sense...\n      if (srcrcount > 2 || srcrptr == srclptr)\n        break;\n    }\n\n    // Encode literal byte sequences...\n    while (srclcount > 0)\n    {\n      if (srclcount > 128)\n\tcount = 128;\n      else\n\tcount = srclcount;\n\n      *dstptr++ = (unsigned char)(count - 1);\n      memcpy(dstptr, srclptr, count);\n      dstptr += count;\n      srclptr += count;\n      srclcount -= count;\n    }\n\n    // Encode repeated byte sequences...\n    while (srcrcount > 1)\n    {\n      if (srcrcount > 128)\n\tcount = 128;\n      else\n\tcount = srcrcount;\n\n      *dstptr++ = (unsigned char)(257 - count);\n      *dstptr++ = *srcrptr;\n      srcrcount -= count;\n    }\n\n    // Reset the literal pointer and continue...\n    srclptr = srcptr - srcrcount;\n  }\n\n  return ((size_t)(dstptr - dst));\n}\n\n\n//\n// 'free_cmedia()' - Free custom media information.\n//\n\nstatic void\nfree_cmedia(\n    pappl_printer_t        *printer,\t// I - Printer (unused)\n    pappl_pr_driver_data_t *data)\t// I - Driver data\n{\n  free(data->extension);\n}\n\n\n//\n// 'localize_keyword()' - Localize an attribute keyword value.\n//\n\nstatic char *\t\t\t\t// O - Localized string\nlocalize_keyword(\n    pappl_client_t *client,\t\t// I - Client\n    const char     *attrname,\t\t// I - Attribute name\n    const char     *keyword,\t\t// I - Keyword value\n    char           *buffer,\t\t// I - String buffer\n    size_t         bufsize)\t\t// I - Size of string buffer\n{\n  const char\t*loctext;\t\t// Localized text\n  char\t\tkey[256];\t\t// Localization key\n\n\n  snprintf(key, sizeof(key), \"%s.%s\", attrname, keyword);\n  if ((loctext = papplClientGetLocString(client, key)) != key)\n  {\n    // Use localized string...\n    papplCopyString(buffer, loctext, bufsize);\n  }\n  else if (!strcmp(attrname, \"media\"))\n  {\n    // Create a dimensional name for the size...\n    pwg_media_t *pwg = pwgMediaForPWG(keyword);\n\t\t\t\t\t// PWG media size info\n\n    LPRINT_DEBUG(\"localize_keyword: keyword='%s', pwg=%p(%dx%d)\\n\", keyword, pwg, pwg ? pwg->width : 0, pwg ? pwg->length : 0);\n    if (pwg)\n    {\n      if ((pwg->width % 100) == 0 && (pwg->width % 2540) != 0)\n\tsnprintf(buffer, bufsize, \"%d x %dmm Custom Label\", pwg->width / 100, pwg->length / 100);\n      else\n\tsnprintf(buffer, bufsize, \"%g x %g\u02ba Custom Label\", pwg->width / 2540.0, pwg->length / 2540.0);\n    }\n    else\n    {\n      snprintf(buffer, bufsize, \"Invalid '%s'\", keyword);\n    }\n  }\n  else\n  {\n    // Convert \"separated-words\" to \"Separated Words\"...\n    char\t*ptr;\t\t\t// Pointer into string\n\n    papplCopyString(buffer, keyword, bufsize);\n    *buffer = (char)toupper(*buffer & 255);\n\n    for (ptr = buffer + 1; *ptr; ptr ++)\n    {\n      if (*ptr == '-' && ptr[1])\n      {\n\t*ptr++ = ' ';\n\t*ptr   = (char)toupper(*ptr & 255);\n      }\n    }\n  }\n\n  return (buffer);\n}\n\n\n//\n// 'media_chooser()' - Show the media chooser.\n//\n\nstatic void\nmedia_chooser(\n    pappl_client_t         *client,\t// I - Client\n    pappl_pr_driver_data_t *driver_data,// I - Driver data\n    const char             *title,\t// I - Title for field\n    const char             *name,\t// I - Form name/prefix\n    pappl_media_col_t      *media)\t// I - Current media values\n{\n  int\t\ti,\t\t\t// Looping vars\n\t\tcur_index = 0,\t\t// Current size index\n\t        sel_index = 0;\t\t// Selected size index...\n  pwg_media_t\t*pwg;\t\t\t// PWG media size info\n  char\t\ttext[256];\t\t// Localized text\n  const char\t*min_size = NULL,\t// Minimum size\n\t\t*max_size = NULL;\t// Maximum size\n\n\n  // media-size\n  papplLocFormatString(papplClientGetLoc(client), text, sizeof(text), \"%s Media\", title);\n  papplClientHTMLPrintf(client, \"              <tr><th>%s:</th><td>\", text);\n  for (i = 0; i < driver_data->num_media && (!min_size || !max_size); i ++)\n  {\n    if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n        min_size = driver_data->media[i];\n      else if (strstr(driver_data->media[i], \"_max_\"))\n        max_size = driver_data->media[i];\n    }\n  }\n  if (min_size && max_size)\n  {\n    papplClientHTMLPrintf(client, \"<select name=\\\"%s-size\\\" onChange=\\\"show_hide_custom('%s');\\\"><option value=\\\"custom\\\">%s</option>\", name, name, papplClientGetLocString(client, \"New Custom Size\"));\n    cur_index ++;\n  }\n  else\n    papplClientHTMLPrintf(client, \"<select name=\\\"%s-size\\\">\", name);\n\n  for (i = 0; i < driver_data->num_media; i ++)\n  {\n    if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n      {\n        min_size = driver_data->media[i];\n        continue;\n      }\n      else if (strstr(driver_data->media[i], \"_max_\"))\n      {\n        max_size = driver_data->media[i];\n        continue;\n      }\n    }\n\n    if (!strcmp(driver_data->media[i], media->size_name))\n      sel_index = cur_index;\n\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->media[i], sel_index == cur_index ? \" selected\" : \"\", localize_keyword(client, \"media\", driver_data->media[i], text, sizeof(text)));\n    cur_index ++;\n  }\n\n  if (min_size && max_size)\n  {\n    int cur_width, min_width, max_width;// Current/min/max width\n    int cur_length, min_length, max_length;\n\t\t\t\t\t// Current/min/max length\n    const char *cur_units;\t\t// Current units\n\n    if ((pwg = pwgMediaForPWG(min_size)) != NULL)\n    {\n      min_width  = pwg->width;\n      min_length = pwg->length;\n    }\n    else\n    {\n      min_width  = 1 * 2540;\n      min_length = 1 * 2540;\n    }\n\n    if ((pwg = pwgMediaForPWG(max_size)) != NULL)\n    {\n      max_width  = pwg->width;\n      max_length = pwg->length;\n    }\n    else\n    {\n      max_width  = 9 * 2540;\n      max_length = 22 * 2540;\n    }\n\n    if ((cur_width = media->size_width) < min_width)\n      cur_width = min_width;\n    else if (cur_width > max_width)\n      cur_width = max_width;\n\n    if ((cur_length = media->size_length) < min_length)\n      cur_length = min_length;\n    else if (cur_length > max_length)\n      cur_length = max_length;\n\n    if ((cur_units = media->size_name + strlen(media->size_name) - 2) < media->size_name)\n      cur_units = \"in\";\n\n    if (!strcmp(cur_units, \"mm\"))\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\"><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\" checked><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 100.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 100.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n    else\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\" checked><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\"><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 2540.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 2540.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n  }\n  else\n  {\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n  // media-tracking (if needed)\n  if (driver_data->tracking_supported)\n  {\n    pappl_media_tracking_t tracking;\t// Tracking value\n    static const char * const trackings[] =\n    {\t\t\t\t\t// Tracking strings\n      \"continuous\",\n      \"gap\",\n      \"mark\",\n      \"web\"\n    };\n\n    papplClientHTMLPrintf(client, \"                <select name=\\\"%s-tracking\\\">\", name);\n    for (i = 0, tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS; tracking <= PAPPL_MEDIA_TRACKING_WEB; i ++, tracking *= 2)\n    {\n      if (!(driver_data->tracking_supported & tracking))\n\tcontinue;\n\n      papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n    }\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n  // media-type\n  papplClientHTMLPrintf(client, \"                <select name=\\\"%s-type\\\">\", name);\n  for (i = 0; i < driver_data->num_type; i ++)\n  {\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->type[i], !strcmp(driver_data->type[i], media->type) ? \" selected\" : \"\", localize_keyword(client, \"media-type\", driver_data->type[i], text, sizeof(text)));\n  }\n  papplClientHTMLPrintf(client, \"</select></td></tr>\\n\");\n}\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "include",
    "start_line": 10,
    "end_line": 11,
    "code": "nclude \"lprint.h\"\n\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "macro",
    "start_line": 17,
    "end_line": 18,
    "code": "efine LPRINT_WHITE\t56\n#d",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "macro",
    "start_line": 18,
    "end_line": 19,
    "code": "efine LPRINT_BLACK\t199\n#d",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "macro",
    "start_line": 19,
    "end_line": 20,
    "code": "efine LPRINT_TRASH\t\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" fill=\\\"currentColor\\\" class=\\\"bi bi-trash3-fill\\\" viewBox=\\\"0 0 16 16\\\"><path d=\\\"M11 1.5v1h3.5a.5.5 0 0 1 0 1h-.538l-.853 10.66A2 2 0 0 1 11.115 16h-6.23a2 2 0 0 1-1.994-1.84L2.038 3.5H1.5a.5.5 0 0 1 0-1H5v-1A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5Zm-5 0v1h4v-1a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5ZM4.5 5.029l.5 8.5a.5.5 0 1 0 .998-.06l-.5-8.5a.5.5 0 1 0-.998.06Zm6.53-.528a.5.5 0 0 0-.528.47l-.5 8.5a.5.5 0 0 0 .998.058l.5-8.5a.5.5 0 0 0-.47-.528ZM8 4.5a.5.5 0 0 0-.5.5v8.5a.5.5 0 0 0 1 0V5a.5.5 0 0 0-.5-.5Z\\\"/></svg>\"\n\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function",
    "start_line": 35,
    "end_line": 143,
    "name": "lprintDitherAlloc",
    "parent": null,
    "hierarchy": "lprintDitherAlloc",
    "code": "ol\t\t\t\t\t// O - `true` on success, `false` on error\nlprintDitherAlloc(\n    lprint_dither_t    *dither,\t\t// I - Dither buffer\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Print options\n    cups_cspace_t      out_cspace,\t// I - Output color space\n    double             out_gamma)\t// I - Output gamma correction\n{\n  int\t\ti, j;\t\t\t// Looping vars\n  unsigned\tright;\t\t\t// Right margin\n\n\n  // Adjust dithering array and compress to a range of 16 to 239\n  for (i = 0; i < 16; i ++)\n  {\n    for (j = 0; j < 16; j ++)\n    {\n      dither->dither[i][j] = (unsigned char)((LPRINT_BLACK - LPRINT_WHITE) * pow(options->dither[i][j] / 255.0, out_gamma) + LPRINT_WHITE);\n    }\n  }\n\n  // Calculate margins and dimensions...\n  if (!options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop])\n  {\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft]   = options->header.HWResolution[0] * (unsigned)options->media.left_margin / 2540;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop]    = options->header.HWResolution[1] * (unsigned)options->media.top_margin / 2540;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight]  = options->header.cupsWidth - options->header.HWResolution[0] * (unsigned)options->media.right_margin / 2540 - 1;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] = options->header.cupsHeight - options->header.HWResolution[1] * (unsigned)options->media.bottom_margin / 2540 - 1;\n  }\n\n  dither->in_left   = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft];\n  right             = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight];\n  dither->in_top    = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop];\n  dither->in_bottom = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom];\n  dither->in_width  = right - dither->in_left + 1;\n  dither->in_height = dither->in_bottom - dither->in_top + 1;\n  dither->out_width = (right - dither->in_left + 8) / 8;\n\n  if (dither->in_width > 65536)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Page too wide.\");\n    return (false);\t\t\t// Protect against large allocations\n  }\n\n  // Calculate input/output color values\n  dither->in_bpp = options->header.cupsBitsPerPixel;\n\n  switch (options->header.cupsColorSpace)\n  {\n    case CUPS_CSPACE_W :\n    case CUPS_CSPACE_SW :\n    case CUPS_CSPACE_RGB :\n    case CUPS_CSPACE_SRGB :\n    case CUPS_CSPACE_ADOBERGB :\n        dither->in_white = 255;\n        break;\n\n    default :\n        dither->in_white = 0;\n        break;\n  }\n\n  switch (out_cspace)\n  {\n    case CUPS_CSPACE_W :\n    case CUPS_CSPACE_SW :\n    case CUPS_CSPACE_RGB :\n    case CUPS_CSPACE_SRGB :\n    case CUPS_CSPACE_ADOBERGB :\n        dither->out_white = 255;\n        break;\n\n    default :\n        dither->out_white = 0;\n        break;\n  }\n\n  // Allocate memory...\n  if ((dither->input[0] = calloc(4 * dither->in_width, sizeof(unsigned char))) == NULL)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate input buffer.\");\n    return (false);\n  }\n\n  for (i = 1; i < 4; i ++)\n    dither->input[i] = dither->input[0] + i * dither->in_width;\n\n  if ((dither->output = malloc(dither->out_width)) == NULL)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate output buffer.\");\n    return (false);\n  }\n\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"dither=[\");\n  for (i = 0; i < 16; i ++)\n    papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"  [ %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u ]\", dither->dither[i][0], dither->dither[i][1], dither->dither[i][2], dither->dither[i][3], dither->dither[i][4], dither->dither[i][5], dither->dither[i][6], dither->dither[i][7], dither->dither[i][8], dither->dither[i][9], dither->dither[i][10], dither->dither[i][11], dither->dither[i][12], dither->dither[i][13], dither->dither[i][14], dither->dither[i][15]);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"]\");\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_bottom=%u\", dither->in_bottom);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_left=%u\", dither->in_left);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_top=%u\", dither->in_top);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_width=%u\", dither->in_width);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_bpp=%u\", dither->in_bpp);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_white=%u\", dither->in_white);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"out_white=%u\", dither->out_white);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"out_width=%u\", dither->out_width);\n\n  // Return indicating success...\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 35,
    "end_line": 143,
    "code": "ol\t\t\t\t\t// O - `true` on success, `false` on error\nlprintDitherAlloc(\n    lprint_dither_t    *dither,\t\t// I - Dither buffer\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Print options\n    cups_cspace_t      out_cspace,\t// I - Output color space\n    double             out_gamma)\t// I - Output gamma correction\n{\n  int\t\ti, j;\t\t\t// Looping vars\n  unsigned\tright;\t\t\t// Right margin\n\n\n  // Adjust dithering array and compress to a range of 16 to 239\n  for (i = 0; i < 16; i ++)\n  {\n    for (j = 0; j < 16; j ++)\n    {\n      dither->dither[i][j] = (unsigned char)((LPRINT_BLACK - LPRINT_WHITE) * pow(options->dither[i][j] / 255.0, out_gamma) + LPRINT_WHITE);\n    }\n  }\n\n  // Calculate margins and dimensions...\n  if (!options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop])\n  {\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft]   = options->header.HWResolution[0] * (unsigned)options->media.left_margin / 2540;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop]    = options->header.HWResolution[1] * (unsigned)options->media.top_margin / 2540;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight]  = options->header.cupsWidth - options->header.HWResolution[0] * (unsigned)options->media.right_margin / 2540 - 1;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] = options->header.cupsHeight - options->header.HWResolution[1] * (unsigned)options->media.bottom_margin / 2540 - 1;\n  }\n\n  dither->in_left   = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft];\n  right             = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight];\n  dither->in_top    = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop];\n  dither->in_bottom = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom];\n  dither->in_width  = right - dither->in_left + 1;\n  dither->in_height = dither->in_bottom - dither->in_top + 1;\n  dither->out_width = (right - dither->in_left + 8) / 8;\n\n  if (dither->in_width > 65536)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Page too wide.\");\n    return (false);\t\t\t// Protect against large allocations\n  }\n\n  // Calculate input/output color values\n  dither->in_bpp = options->header.cupsBitsPerPixel;\n\n  switch (options->header.cupsColorSpace)\n  {\n    case CUPS_CSPACE_W :\n    case CUPS_CSPACE_SW :\n    case CUPS_CSPACE_RGB :\n    case CUPS_CSPACE_SRGB :\n    case CUPS_CSPACE_ADOBERGB :\n        dither->in_white = 255;\n        break;\n\n    default :\n        dither->in_white = 0;\n        break;\n  }\n\n  switch (out_cspace)\n  {\n    case CUPS_CSPACE_W :\n    case CUPS_CSPACE_SW :\n    case CUPS_CSPACE_RGB :\n    case CUPS_CSPACE_SRGB :\n    case CUPS_CSPACE_ADOBERGB :\n        dither->out_white = 255;\n        break;\n\n    default :\n        dither->out_white = 0;\n        break;\n  }\n\n  // Allocate memory...\n  if ((dither->input[0] = calloc(4 * dither->in_width, sizeof(unsigned char))) == NULL)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate input buffer.\");\n    return (false);\n  }\n\n  for (i = 1; i < 4; i ++)\n    dither->input[i] = dither->input[0] + i * dither->in_width;\n\n  if ((dither->output = malloc(dither->out_width)) == NULL)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate output buffer.\");\n    return (false);\n  }\n\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"dither=[\");\n  for (i = 0; i < 16; i ++)\n    papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"  [ %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u ]\", dither->dither[i][0], dither->dither[i][1], dither->dither[i][2], dither->dither[i][3], dither->dither[i][4], dither->dither[i][5], dither->dither[i][6], dither->dither[i][7], dither->dither[i][8], dither->dither[i][9], dither->dither[i][10], dither->dither[i][11], dither->dither[i][12], dither->dither[i][13], dither->dither[i][14], dither->dither[i][15]);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"]\");\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_bottom=%u\", dither->in_bottom);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_left=%u\", dither->in_left);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_top=%u\", dither->in_top);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_width=%u\", dither->in_width);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_bpp=%u\", dither->in_bpp);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_white=%u\", dither->in_white);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"out_white=%u\", dither->out_white);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"out_width=%u\", dither->out_width);\n\n  // Return indicating success...\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 35,
    "end_line": 143,
    "code": "ol\t\t\t\t\t// O - `true` on success, `false` on error\nlprintDitherAlloc(\n    lprint_dither_t    *dither,\t\t// I - Dither buffer\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Print options\n    cups_cspace_t      out_cspace,\t// I - Output color space\n    double             out_gamma)\t// I - Output gamma correction\n{\n  int\t\ti, j;\t\t\t// Looping vars\n  unsigned\tright;\t\t\t// Right margin\n\n\n  // Adjust dithering array and compress to a range of 16 to 239\n  for (i = 0; i < 16; i ++)\n  {\n    for (j = 0; j < 16; j ++)\n    {\n      dither->dither[i][j] = (unsigned char)((LPRINT_BLACK - LPRINT_WHITE) * pow(options->dither[i][j] / 255.0, out_gamma) + LPRINT_WHITE);\n    }\n  }\n\n  // Calculate margins and dimensions...\n  if (!options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop])\n  {\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft]   = options->header.HWResolution[0] * (unsigned)options->media.left_margin / 2540;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop]    = options->header.HWResolution[1] * (unsigned)options->media.top_margin / 2540;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight]  = options->header.cupsWidth - options->header.HWResolution[0] * (unsigned)options->media.right_margin / 2540 - 1;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] = options->header.cupsHeight - options->header.HWResolution[1] * (unsigned)options->media.bottom_margin / 2540 - 1;\n  }\n\n  dither->in_left   = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft];\n  right             = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight];\n  dither->in_top    = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop];\n  dither->in_bottom = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom];\n  dither->in_width  = right - dither->in_left + 1;\n  dither->in_height = dither->in_bottom - dither->in_top + 1;\n  dither->out_width = (right - dither->in_left + 8) / 8;\n\n  if (dither->in_width > 65536)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Page too wide.\");\n    return (false);\t\t\t// Protect against large allocations\n  }\n\n  // Calculate input/output color values\n  dither->in_bpp = options->header.cupsBitsPerPixel;\n\n  switch (options->header.cupsColorSpace)\n  {\n    case CUPS_CSPACE_W :\n    case CUPS_CSPACE_SW :\n    case CUPS_CSPACE_RGB :\n    case CUPS_CSPACE_SRGB :\n    case CUPS_CSPACE_ADOBERGB :\n        dither->in_white = 255;\n        break;\n\n    default :\n        dither->in_white = 0;\n        break;\n  }\n\n  switch (out_cspace)\n  {\n    case CUPS_CSPACE_W :\n    case CUPS_CSPACE_SW :\n    case CUPS_CSPACE_RGB :\n    case CUPS_CSPACE_SRGB :\n    case CUPS_CSPACE_ADOBERGB :\n        dither->out_white = 255;\n        break;\n\n    default :\n        dither->out_white = 0;\n        break;\n  }\n\n  // Allocate memory...\n  if ((dither->input[0] = calloc(4 * dither->in_width, sizeof(unsigned char))) == NULL)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate input buffer.\");\n    return (false);\n  }\n\n  for (i = 1; i < 4; i ++)\n    dither->input[i] = dither->input[0] + i * dither->in_width;\n\n  if ((dither->output = malloc(dither->out_width)) == NULL)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate output buffer.\");\n    return (false);\n  }\n\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"dither=[\");\n  for (i = 0; i < 16; i ++)\n    papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"  [ %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u ]\", dither->dither[i][0], dither->dither[i][1], dither->dither[i][2], dither->dither[i][3], dither->dither[i][4], dither->dither[i][5], dither->dither[i][6], dither->dither[i][7], dither->dither[i][8], dither->dither[i][9], dither->dither[i][10], dither->dither[i][11], dither->dither[i][12], dither->dither[i][13], dither->dither[i][14], dither->dither[i][15]);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"]\");\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_bottom=%u\", dither->in_bottom);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_left=%u\", dither->in_left);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_top=%u\", dither->in_top);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_width=%u\", dither->in_width);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_bpp=%u\", dither->in_bpp);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_white=%u\", dither->in_white);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"out_white=%u\", dither->out_white);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"out_width=%u\", dither->out_width);\n\n  // Return indicating success...\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 42,
    "end_line": 143,
    "code": "  int\t\ti, j;\t\t\t// Looping vars\n  unsigned\tright;\t\t\t// Right margin\n\n\n  // Adjust dithering array and compress to a range of 16 to 239\n  for (i = 0; i < 16; i ++)\n  {\n    for (j = 0; j < 16; j ++)\n    {\n      dither->dither[i][j] = (unsigned char)((LPRINT_BLACK - LPRINT_WHITE) * pow(options->dither[i][j] / 255.0, out_gamma) + LPRINT_WHITE);\n    }\n  }\n\n  // Calculate margins and dimensions...\n  if (!options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop])\n  {\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft]   = options->header.HWResolution[0] * (unsigned)options->media.left_margin / 2540;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop]    = options->header.HWResolution[1] * (unsigned)options->media.top_margin / 2540;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight]  = options->header.cupsWidth - options->header.HWResolution[0] * (unsigned)options->media.right_margin / 2540 - 1;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] = options->header.cupsHeight - options->header.HWResolution[1] * (unsigned)options->media.bottom_margin / 2540 - 1;\n  }\n\n  dither->in_left   = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft];\n  right             = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight];\n  dither->in_top    = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop];\n  dither->in_bottom = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom];\n  dither->in_width  = right - dither->in_left + 1;\n  dither->in_height = dither->in_bottom - dither->in_top + 1;\n  dither->out_width = (right - dither->in_left + 8) / 8;\n\n  if (dither->in_width > 65536)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Page too wide.\");\n    return (false);\t\t\t// Protect against large allocations\n  }\n\n  // Calculate input/output color values\n  dither->in_bpp = options->header.cupsBitsPerPixel;\n\n  switch (options->header.cupsColorSpace)\n  {\n    case CUPS_CSPACE_W :\n    case CUPS_CSPACE_SW :\n    case CUPS_CSPACE_RGB :\n    case CUPS_CSPACE_SRGB :\n    case CUPS_CSPACE_ADOBERGB :\n        dither->in_white = 255;\n        break;\n\n    default :\n        dither->in_white = 0;\n        break;\n  }\n\n  switch (out_cspace)\n  {\n    case CUPS_CSPACE_W :\n    case CUPS_CSPACE_SW :\n    case CUPS_CSPACE_RGB :\n    case CUPS_CSPACE_SRGB :\n    case CUPS_CSPACE_ADOBERGB :\n        dither->out_white = 255;\n        break;\n\n    default :\n        dither->out_white = 0;\n        break;\n  }\n\n  // Allocate memory...\n  if ((dither->input[0] = calloc(4 * dither->in_width, sizeof(unsigned char))) == NULL)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate input buffer.\");\n    return (false);\n  }\n\n  for (i = 1; i < 4; i ++)\n    dither->input[i] = dither->input[0] + i * dither->in_width;\n\n  if ((dither->output = malloc(dither->out_width)) == NULL)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate output buffer.\");\n    return (false);\n  }\n\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"dither=[\");\n  for (i = 0; i < 16; i ++)\n    papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"  [ %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u ]\", dither->dither[i][0], dither->dither[i][1], dither->dither[i][2], dither->dither[i][3], dither->dither[i][4], dither->dither[i][5], dither->dither[i][6], dither->dither[i][7], dither->dither[i][8], dither->dither[i][9], dither->dither[i][10], dither->dither[i][11], dither->dither[i][12], dither->dither[i][13], dither->dither[i][14], dither->dither[i][15]);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"]\");\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_bottom=%u\", dither->in_bottom);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_left=%u\", dither->in_left);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_top=%u\", dither->in_top);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_width=%u\", dither->in_width);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_bpp=%u\", dither->in_bpp);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_white=%u\", dither->in_white);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"out_white=%u\", dither->out_white);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"out_width=%u\", dither->out_width);\n\n  // Return indicating success...\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 42,
    "end_line": 143,
    "code": "  int\t\ti, j;\t\t\t// Looping vars\n  unsigned\tright;\t\t\t// Right margin\n\n\n  // Adjust dithering array and compress to a range of 16 to 239\n  for (i = 0; i < 16; i ++)\n  {\n    for (j = 0; j < 16; j ++)\n    {\n      dither->dither[i][j] = (unsigned char)((LPRINT_BLACK - LPRINT_WHITE) * pow(options->dither[i][j] / 255.0, out_gamma) + LPRINT_WHITE);\n    }\n  }\n\n  // Calculate margins and dimensions...\n  if (!options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop])\n  {\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft]   = options->header.HWResolution[0] * (unsigned)options->media.left_margin / 2540;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop]    = options->header.HWResolution[1] * (unsigned)options->media.top_margin / 2540;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight]  = options->header.cupsWidth - options->header.HWResolution[0] * (unsigned)options->media.right_margin / 2540 - 1;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] = options->header.cupsHeight - options->header.HWResolution[1] * (unsigned)options->media.bottom_margin / 2540 - 1;\n  }\n\n  dither->in_left   = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft];\n  right             = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight];\n  dither->in_top    = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop];\n  dither->in_bottom = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom];\n  dither->in_width  = right - dither->in_left + 1;\n  dither->in_height = dither->in_bottom - dither->in_top + 1;\n  dither->out_width = (right - dither->in_left + 8) / 8;\n\n  if (dither->in_width > 65536)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Page too wide.\");\n    return (false);\t\t\t// Protect against large allocations\n  }\n\n  // Calculate input/output color values\n  dither->in_bpp = options->header.cupsBitsPerPixel;\n\n  switch (options->header.cupsColorSpace)\n  {\n    case CUPS_CSPACE_W :\n    case CUPS_CSPACE_SW :\n    case CUPS_CSPACE_RGB :\n    case CUPS_CSPACE_SRGB :\n    case CUPS_CSPACE_ADOBERGB :\n        dither->in_white = 255;\n        break;\n\n    default :\n        dither->in_white = 0;\n        break;\n  }\n\n  switch (out_cspace)\n  {\n    case CUPS_CSPACE_W :\n    case CUPS_CSPACE_SW :\n    case CUPS_CSPACE_RGB :\n    case CUPS_CSPACE_SRGB :\n    case CUPS_CSPACE_ADOBERGB :\n        dither->out_white = 255;\n        break;\n\n    default :\n        dither->out_white = 0;\n        break;\n  }\n\n  // Allocate memory...\n  if ((dither->input[0] = calloc(4 * dither->in_width, sizeof(unsigned char))) == NULL)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate input buffer.\");\n    return (false);\n  }\n\n  for (i = 1; i < 4; i ++)\n    dither->input[i] = dither->input[0] + i * dither->in_width;\n\n  if ((dither->output = malloc(dither->out_width)) == NULL)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate output buffer.\");\n    return (false);\n  }\n\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"dither=[\");\n  for (i = 0; i < 16; i ++)\n    papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"  [ %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u ]\", dither->dither[i][0], dither->dither[i][1], dither->dither[i][2], dither->dither[i][3], dither->dither[i][4], dither->dither[i][5], dither->dither[i][6], dither->dither[i][7], dither->dither[i][8], dither->dither[i][9], dither->dither[i][10], dither->dither[i][11], dither->dither[i][12], dither->dither[i][13], dither->dither[i][14], dither->dither[i][15]);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"]\");\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_bottom=%u\", dither->in_bottom);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_left=%u\", dither->in_left);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_top=%u\", dither->in_top);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_width=%u\", dither->in_width);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_bpp=%u\", dither->in_bpp);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_white=%u\", dither->in_white);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"out_white=%u\", dither->out_white);\n  papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"out_width=%u\", dither->out_width);\n\n  // Return indicating success...\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 48,
    "end_line": 54,
    "code": "r (i = 0; i < 16; i ++)\n  {\n    for (j = 0; j < 16; j ++)\n    {\n      dither->dither[i][j] = (unsigned char)((LPRINT_BLACK - LPRINT_WHITE) * pow(options->dither[i][j] / 255.0, out_gamma) + LPRINT_WHITE);\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 48,
    "end_line": 54,
    "code": "r (i = 0; i < 16; i ++)\n  {\n    for (j = 0; j < 16; j ++)\n    {\n      dither->dither[i][j] = (unsigned char)((LPRINT_BLACK - LPRINT_WHITE) * pow(options->dither[i][j] / 255.0, out_gamma) + LPRINT_WHITE);\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 49,
    "end_line": 54,
    "code": "    for (j = 0; j < 16; j ++)\n    {\n      dither->dither[i][j] = (unsigned char)((LPRINT_BLACK - LPRINT_WHITE) * pow(options->dither[i][j] / 255.0, out_gamma) + LPRINT_WHITE);\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 49,
    "end_line": 54,
    "code": "    for (j = 0; j < 16; j ++)\n    {\n      dither->dither[i][j] = (unsigned char)((LPRINT_BLACK - LPRINT_WHITE) * pow(options->dither[i][j] / 255.0, out_gamma) + LPRINT_WHITE);\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 50,
    "end_line": 53,
    "code": "r (j = 0; j < 16; j ++)\n    {\n      dither->dither[i][j] = (unsigned char)((LPRINT_BLACK - LPRINT_WHITE) * pow(options->dither[i][j] / 255.0, out_gamma) + LPRINT_WHITE);\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 50,
    "end_line": 53,
    "code": "r (j = 0; j < 16; j ++)\n    {\n      dither->dither[i][j] = (unsigned char)((LPRINT_BLACK - LPRINT_WHITE) * pow(options->dither[i][j] / 255.0, out_gamma) + LPRINT_WHITE);\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 51,
    "end_line": 53,
    "code": "      dither->dither[i][j] = (unsigned char)((LPRINT_BLACK - LPRINT_WHITE) * pow(options->dither[i][j] / 255.0, out_gamma) + LPRINT_WHITE);\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 51,
    "end_line": 53,
    "code": "      dither->dither[i][j] = (unsigned char)((LPRINT_BLACK - LPRINT_WHITE) * pow(options->dither[i][j] / 255.0, out_gamma) + LPRINT_WHITE);\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 52,
    "end_line": 52,
    "code": "ther->dither[i][j] = (unsigned char)((LPRINT_BLACK - LPRINT_WHITE) * pow(options->dither[i][j] / 255.0, out_gamma) + LPRINT_WHITE);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 52,
    "end_line": 52,
    "code": "ther->dither[i][j] = (unsigned char)((LPRINT_BLACK - LPRINT_WHITE) * pow(options->dither[i][j] / 255.0, out_gamma) + LPRINT_WHITE);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 52,
    "end_line": 52,
    "code": "ther->dither[i][j] = (unsigned char)((LPRINT_BLACK - LPRINT_WHITE) * pow(options->dither[i][j] / 255.0, out_gamma) + LPRINT_WHITE);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 52,
    "end_line": 52,
    "code": "ther->dither[i][j] = (unsigned char)((LPRINT_BLACK - LPRINT_WHITE) * pow(options->dither[i][j] / 255.0, out_gamma) + LPRINT_WHITE);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 57,
    "end_line": 63,
    "code": " (!options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop])\n  {\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft]   = options->header.HWResolution[0] * (unsigned)options->media.left_margin / 2540;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop]    = options->header.HWResolution[1] * (unsigned)options->media.top_margin / 2540;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight]  = options->header.cupsWidth - options->header.HWResolution[0] * (unsigned)options->media.right_margin / 2540 - 1;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] = options->header.cupsHeight - options->header.HWResolution[1] * (unsigned)options->media.bottom_margin / 2540 - 1;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 57,
    "end_line": 63,
    "code": " (!options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight] || !options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop])\n  {\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft]   = options->header.HWResolution[0] * (unsigned)options->media.left_margin / 2540;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop]    = options->header.HWResolution[1] * (unsigned)options->media.top_margin / 2540;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight]  = options->header.cupsWidth - options->header.HWResolution[0] * (unsigned)options->media.right_margin / 2540 - 1;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] = options->header.cupsHeight - options->header.HWResolution[1] * (unsigned)options->media.bottom_margin / 2540 - 1;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 58,
    "end_line": 63,
    "code": "    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft]   = options->header.HWResolution[0] * (unsigned)options->media.left_margin / 2540;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop]    = options->header.HWResolution[1] * (unsigned)options->media.top_margin / 2540;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight]  = options->header.cupsWidth - options->header.HWResolution[0] * (unsigned)options->media.right_margin / 2540 - 1;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] = options->header.cupsHeight - options->header.HWResolution[1] * (unsigned)options->media.bottom_margin / 2540 - 1;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 58,
    "end_line": 63,
    "code": "    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft]   = options->header.HWResolution[0] * (unsigned)options->media.left_margin / 2540;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop]    = options->header.HWResolution[1] * (unsigned)options->media.top_margin / 2540;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight]  = options->header.cupsWidth - options->header.HWResolution[0] * (unsigned)options->media.right_margin / 2540 - 1;\n    options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] = options->header.cupsHeight - options->header.HWResolution[1] * (unsigned)options->media.bottom_margin / 2540 - 1;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 59,
    "end_line": 59,
    "code": "tions->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft]   = options->header.HWResolution[0] * (unsigned)options->media.left_margin / 2540;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 59,
    "end_line": 59,
    "code": "tions->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft]   = options->header.HWResolution[0] * (unsigned)options->media.left_margin / 2540;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 59,
    "end_line": 59,
    "code": "tions->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft]   = options->header.HWResolution[0] * (unsigned)options->media.left_margin / 2540;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 59,
    "end_line": 59,
    "code": "tions->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft]   = options->header.HWResolution[0] * (unsigned)options->media.left_margin / 2540;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 60,
    "end_line": 60,
    "code": "tions->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop]    = options->header.HWResolution[1] * (unsigned)options->media.top_margin / 2540;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 60,
    "end_line": 60,
    "code": "tions->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop]    = options->header.HWResolution[1] * (unsigned)options->media.top_margin / 2540;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 60,
    "end_line": 60,
    "code": "tions->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop]    = options->header.HWResolution[1] * (unsigned)options->media.top_margin / 2540;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 60,
    "end_line": 60,
    "code": "tions->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop]    = options->header.HWResolution[1] * (unsigned)options->media.top_margin / 2540;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 61,
    "end_line": 61,
    "code": "tions->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight]  = options->header.cupsWidth - options->header.HWResolution[0] * (unsigned)options->media.right_margin / 2540 - 1;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 61,
    "end_line": 61,
    "code": "tions->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight]  = options->header.cupsWidth - options->header.HWResolution[0] * (unsigned)options->media.right_margin / 2540 - 1;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 61,
    "end_line": 61,
    "code": "tions->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight]  = options->header.cupsWidth - options->header.HWResolution[0] * (unsigned)options->media.right_margin / 2540 - 1;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 61,
    "end_line": 61,
    "code": "tions->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight]  = options->header.cupsWidth - options->header.HWResolution[0] * (unsigned)options->media.right_margin / 2540 - 1;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 62,
    "end_line": 62,
    "code": "tions->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] = options->header.cupsHeight - options->header.HWResolution[1] * (unsigned)options->media.bottom_margin / 2540 - 1;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 62,
    "end_line": 62,
    "code": "tions->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] = options->header.cupsHeight - options->header.HWResolution[1] * (unsigned)options->media.bottom_margin / 2540 - 1;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 62,
    "end_line": 62,
    "code": "tions->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] = options->header.cupsHeight - options->header.HWResolution[1] * (unsigned)options->media.bottom_margin / 2540 - 1;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 62,
    "end_line": 62,
    "code": "tions->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom] = options->header.cupsHeight - options->header.HWResolution[1] * (unsigned)options->media.bottom_margin / 2540 - 1;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 65,
    "end_line": 65,
    "code": "ther->in_left   = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft];\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 65,
    "end_line": 65,
    "code": "ther->in_left   = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxLeft];\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 66,
    "end_line": 66,
    "code": "ght             = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight];\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 66,
    "end_line": 66,
    "code": "ght             = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxRight];\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 67,
    "end_line": 67,
    "code": "ther->in_top    = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop];\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 67,
    "end_line": 67,
    "code": "ther->in_top    = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxTop];\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 68,
    "end_line": 68,
    "code": "ther->in_bottom = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom];\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 68,
    "end_line": 68,
    "code": "ther->in_bottom = options->header.cupsInteger[CUPS_RASTER_PWG_ImageBoxBottom];\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 69,
    "end_line": 69,
    "code": "ther->in_width  = right - dither->in_left + 1;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 69,
    "end_line": 69,
    "code": "ther->in_width  = right - dither->in_left + 1;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 70,
    "end_line": 70,
    "code": "ther->in_height = dither->in_bottom - dither->in_top + 1;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 70,
    "end_line": 70,
    "code": "ther->in_height = dither->in_bottom - dither->in_top + 1;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 71,
    "end_line": 71,
    "code": "ther->out_width = (right - dither->in_left + 8) / 8;\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 71,
    "end_line": 71,
    "code": "ther->out_width = (right - dither->in_left + 8) / 8;\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 71,
    "end_line": 71,
    "code": "ther->out_width = (right - dither->in_left + 8) / 8;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 71,
    "end_line": 71,
    "code": "ther->out_width = (right - dither->in_left + 8) / 8;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "anonymous_initializer_block",
    "start_line": 73,
    "end_line": 77,
    "code": " (dither->in_width > 65536)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Page too wide.\");\n    return (false);\t\t\t// Protect against large allocations\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 80,
    "end_line": 80,
    "code": "ther->in_bpp = options->header.cupsBitsPerPixel;\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 80,
    "end_line": 80,
    "code": "ther->in_bpp = options->header.cupsBitsPerPixel;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 82,
    "end_line": 95,
    "code": "itch (options->header.cupsColorSpace)\n  {\n    case CUPS_CSPACE_W :\n    case CUPS_CSPACE_SW :\n    case CUPS_CSPACE_RGB :\n    case CUPS_CSPACE_SRGB :\n    case CUPS_CSPACE_ADOBERGB :\n        dither->in_white = 255;\n        break;\n\n    default :\n        dither->in_white = 0;\n        break;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 82,
    "end_line": 95,
    "code": "itch (options->header.cupsColorSpace)\n  {\n    case CUPS_CSPACE_W :\n    case CUPS_CSPACE_SW :\n    case CUPS_CSPACE_RGB :\n    case CUPS_CSPACE_SRGB :\n    case CUPS_CSPACE_ADOBERGB :\n        dither->in_white = 255;\n        break;\n\n    default :\n        dither->in_white = 0;\n        break;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 83,
    "end_line": 95,
    "code": "    case CUPS_CSPACE_W :\n    case CUPS_CSPACE_SW :\n    case CUPS_CSPACE_RGB :\n    case CUPS_CSPACE_SRGB :\n    case CUPS_CSPACE_ADOBERGB :\n        dither->in_white = 255;\n        break;\n\n    default :\n        dither->in_white = 0;\n        break;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 88,
    "end_line": 90,
    "code": "se CUPS_CSPACE_ADOBERGB :\n        dither->in_white = 255;\n        break;\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 89,
    "end_line": 89,
    "code": "ther->in_white = 255;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 89,
    "end_line": 89,
    "code": "ther->in_white = 255;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 92,
    "end_line": 94,
    "code": "fault :\n        dither->in_white = 0;\n        break;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 93,
    "end_line": 93,
    "code": "ther->in_white = 0;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 93,
    "end_line": 93,
    "code": "ther->in_white = 0;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 97,
    "end_line": 110,
    "code": "itch (out_cspace)\n  {\n    case CUPS_CSPACE_W :\n    case CUPS_CSPACE_SW :\n    case CUPS_CSPACE_RGB :\n    case CUPS_CSPACE_SRGB :\n    case CUPS_CSPACE_ADOBERGB :\n        dither->out_white = 255;\n        break;\n\n    default :\n        dither->out_white = 0;\n        break;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 97,
    "end_line": 110,
    "code": "itch (out_cspace)\n  {\n    case CUPS_CSPACE_W :\n    case CUPS_CSPACE_SW :\n    case CUPS_CSPACE_RGB :\n    case CUPS_CSPACE_SRGB :\n    case CUPS_CSPACE_ADOBERGB :\n        dither->out_white = 255;\n        break;\n\n    default :\n        dither->out_white = 0;\n        break;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 98,
    "end_line": 110,
    "code": "    case CUPS_CSPACE_W :\n    case CUPS_CSPACE_SW :\n    case CUPS_CSPACE_RGB :\n    case CUPS_CSPACE_SRGB :\n    case CUPS_CSPACE_ADOBERGB :\n        dither->out_white = 255;\n        break;\n\n    default :\n        dither->out_white = 0;\n        break;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 103,
    "end_line": 105,
    "code": "se CUPS_CSPACE_ADOBERGB :\n        dither->out_white = 255;\n        break;\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 104,
    "end_line": 104,
    "code": "ther->out_white = 255;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 104,
    "end_line": 104,
    "code": "ther->out_white = 255;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 107,
    "end_line": 109,
    "code": "fault :\n        dither->out_white = 0;\n        break;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 108,
    "end_line": 108,
    "code": "ther->out_white = 0;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 108,
    "end_line": 108,
    "code": "ther->out_white = 0;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 113,
    "end_line": 117,
    "code": " ((dither->input[0] = calloc(4 * dither->in_width, sizeof(unsigned char))) == NULL)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate input buffer.\");\n    return (false);\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 113,
    "end_line": 117,
    "code": " ((dither->input[0] = calloc(4 * dither->in_width, sizeof(unsigned char))) == NULL)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate input buffer.\");\n    return (false);\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 113,
    "end_line": 113,
    "code": "dither->input[0] = calloc(4 * dither->in_width, sizeof(unsigned char))) == NULL)\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 113,
    "end_line": 113,
    "code": "ither->input[0] = calloc(4 * dither->in_width, sizeof(unsigned char))) == NULL)\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 113,
    "end_line": 113,
    "code": "ither->input[0] = calloc(4 * dither->in_width, sizeof(unsigned char))) =",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 113,
    "end_line": 113,
    "code": "ther->input[0] = calloc(4 * dither->in_width, sizeof(unsigned char))) ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 119,
    "end_line": 120,
    "code": "r (i = 1; i < 4; i ++)\n    dither->input[i] = dither->input[0] + i * dither->in_width;\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 119,
    "end_line": 120,
    "code": "r (i = 1; i < 4; i ++)\n    dither->input[i] = dither->input[0] + i * dither->in_width;\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 120,
    "end_line": 120,
    "code": "ther->input[i] = dither->input[0] + i * dither->in_width;\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 120,
    "end_line": 120,
    "code": "ther->input[i] = dither->input[0] + i * dither->in_width;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 122,
    "end_line": 126,
    "code": " ((dither->output = malloc(dither->out_width)) == NULL)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate output buffer.\");\n    return (false);\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 122,
    "end_line": 126,
    "code": " ((dither->output = malloc(dither->out_width)) == NULL)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate output buffer.\");\n    return (false);\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 122,
    "end_line": 122,
    "code": "dither->output = malloc(dither->out_width)) == NULL)\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 122,
    "end_line": 122,
    "code": "ither->output = malloc(dither->out_width)) == NULL)\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 122,
    "end_line": 122,
    "code": "ither->output = malloc(dither->out_width)) =",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 122,
    "end_line": 122,
    "code": "ther->output = malloc(dither->out_width)) ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 129,
    "end_line": 130,
    "code": "r (i = 0; i < 16; i ++)\n    papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"  [ %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u ]\", dither->dither[i][0], dither->dither[i][1], dither->dither[i][2], dither->dither[i][3], dither->dither[i][4], dither->dither[i][5], dither->dither[i][6], dither->dither[i][7], dither->dither[i][8], dither->dither[i][9], dither->dither[i][10], dither->dither[i][11], dither->dither[i][12], dither->dither[i][13], dither->dither[i][14], dither->dither[i][15]);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 129,
    "end_line": 130,
    "code": "r (i = 0; i < 16; i ++)\n    papplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"  [ %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u ]\", dither->dither[i][0], dither->dither[i][1], dither->dither[i][2], dither->dither[i][3], dither->dither[i][4], dither->dither[i][5], dither->dither[i][6], dither->dither[i][7], dither->dither[i][8], dither->dither[i][9], dither->dither[i][10], dither->dither[i][11], dither->dither[i][12], dither->dither[i][13], dither->dither[i][14], dither->dither[i][15]);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 132,
    "end_line": 132,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_bottom=%u\", dither->in_bottom);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 132,
    "end_line": 132,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_bottom=%u\", dither->in_bottom);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 132,
    "end_line": 132,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_bottom=%u\", dither->in_bottom);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 132,
    "end_line": 132,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_bottom=%u\", dither->in_bottom);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 132,
    "end_line": 132,
    "code": "ob, PAPPL_LOGLEVEL_DEBUG, \"in_bottom=%u\", dither->in_bottom);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 133,
    "end_line": 133,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_left=%u\", dither->in_left);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 133,
    "end_line": 133,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_left=%u\", dither->in_left);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 133,
    "end_line": 133,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_left=%u\", dither->in_left);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 133,
    "end_line": 133,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_left=%u\", dither->in_left);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 133,
    "end_line": 133,
    "code": "ob, PAPPL_LOGLEVEL_DEBUG, \"in_left=%u\", dither->in_left);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 134,
    "end_line": 134,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_top=%u\", dither->in_top);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 134,
    "end_line": 134,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_top=%u\", dither->in_top);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 134,
    "end_line": 134,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_top=%u\", dither->in_top);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 134,
    "end_line": 134,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_top=%u\", dither->in_top);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 134,
    "end_line": 134,
    "code": "ob, PAPPL_LOGLEVEL_DEBUG, \"in_top=%u\", dither->in_top);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 135,
    "end_line": 135,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_width=%u\", dither->in_width);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 135,
    "end_line": 135,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_width=%u\", dither->in_width);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 135,
    "end_line": 135,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_width=%u\", dither->in_width);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 135,
    "end_line": 135,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_width=%u\", dither->in_width);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 135,
    "end_line": 135,
    "code": "ob, PAPPL_LOGLEVEL_DEBUG, \"in_width=%u\", dither->in_width);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 136,
    "end_line": 136,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_bpp=%u\", dither->in_bpp);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 136,
    "end_line": 136,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_bpp=%u\", dither->in_bpp);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 136,
    "end_line": 136,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_bpp=%u\", dither->in_bpp);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 136,
    "end_line": 136,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_bpp=%u\", dither->in_bpp);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 136,
    "end_line": 136,
    "code": "ob, PAPPL_LOGLEVEL_DEBUG, \"in_bpp=%u\", dither->in_bpp);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 137,
    "end_line": 137,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_white=%u\", dither->in_white);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 137,
    "end_line": 137,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_white=%u\", dither->in_white);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 137,
    "end_line": 137,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_white=%u\", dither->in_white);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 137,
    "end_line": 137,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"in_white=%u\", dither->in_white);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 137,
    "end_line": 137,
    "code": "ob, PAPPL_LOGLEVEL_DEBUG, \"in_white=%u\", dither->in_white);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 138,
    "end_line": 138,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"out_white=%u\", dither->out_white);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 138,
    "end_line": 138,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"out_white=%u\", dither->out_white);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 138,
    "end_line": 138,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"out_white=%u\", dither->out_white);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 138,
    "end_line": 138,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"out_white=%u\", dither->out_white);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 138,
    "end_line": 138,
    "code": "ob, PAPPL_LOGLEVEL_DEBUG, \"out_white=%u\", dither->out_white);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 139,
    "end_line": 139,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"out_width=%u\", dither->out_width);\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 139,
    "end_line": 139,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"out_width=%u\", dither->out_width);\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 139,
    "end_line": 139,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"out_width=%u\", dither->out_width);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 139,
    "end_line": 139,
    "code": "pplLogJob(job, PAPPL_LOGLEVEL_DEBUG, \"out_width=%u\", dither->out_width);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 139,
    "end_line": 139,
    "code": "ob, PAPPL_LOGLEVEL_DEBUG, \"out_width=%u\", dither->out_width);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function",
    "start_line": 150,
    "end_line": 158,
    "name": "lprintDitherFree",
    "parent": null,
    "hierarchy": "lprintDitherFree",
    "code": "id\nlprintDitherFree(\n    lprint_dither_t *dither)\t\t// I - Dither buffer\n{\n  free(dither->input[0]);\n  free(dither->output);\n\n  memset(dither, 0, sizeof(lprint_dither_t));\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function",
    "start_line": 174,
    "end_line": 306,
    "name": "lprintDitherLine",
    "parent": null,
    "hierarchy": "lprintDitherLine",
    "code": "ol\t\t\t\t\t// O - `true` if line dithered, `false` to skip\nlprintDitherLine(\n    lprint_dither_t     *dither,\t// I - Dither buffer\n    unsigned            y,\t\t// I - Input line number (starting at `0`)\n    const unsigned char *line)\t\t// I - Input line\n{\n  unsigned\tx,\t\t\t// Current column\n\t\tcount;\t\t\t// Remaining count\n  unsigned char\t*current,\t\t// Current line\n\t\t*prev,\t\t\t// Previous line\n\t\t*next;\t\t\t// Next line\n  unsigned char\t*dline,\t\t\t// Dither line\n\t\t*outptr,\t\t// Pointer into output\n\t\tbyte,\t\t\t// Current byte\n\t\tbit;\t\t\t// Current bit\n\n\n  // Copy current input line...\n  count = dither->in_width;\n  next  = dither->input[y & 3];\n\n  memset(next, 0, count);\n\n  if (line)\n  {\n    switch (dither->in_bpp)\n    {\n      case 1 : // 1-bit black\n\t  for (line += dither->in_left / 8, byte = *line++, bit = 128 >> (dither->in_left & 7); count > 0; count --, next ++)\n\t  {\n\t    // Convert to 8-bit black...\n\t    if (byte & bit)\n\t      *next = 255;\n\n\t    if (bit > 1)\n\t    {\n\t      bit /= 2;\n\t    }\n\t    else\n\t    {\n\t      bit  = 128;\n\t      byte = *line++;\n\t    }\n\t  }\n\t  break;\n\n      case 8 : // Grayscale or 8-bit black\n\t  if (dither->in_white)\n\t  {\n\t    // Convert grayscale to black...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = 255 - *line;\n\t    }\n\t  }\n\t  else\n\t  {\n\t    // Copy with clamping...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t  }\n\t  break;\n\n      default : // Something else...\n\t  return (false);\n    }\n  }\n\n  // If we are outside the imageable area then don't dither...\n  if (y < (dither->in_top + 1) || y > (dither->in_bottom + 1))\n    return (false);\n\n  // Dither...\n  for (x = 0, count = dither->in_width, prev = dither->input[(y - 2) & 3], current = dither->input[(y - 1) & 3], next = dither->input[y & 3], outptr = dither->output, byte = dither->out_white, bit = 128, dline = dither->dither[y & 15]; count > 0; x ++, count --, prev ++, current ++, next ++)\n  {\n    if (*current)\n    {\n      // Not pure white/blank...\n      if (*current == 255)\n      {\n        // 100% black...\n        byte ^= bit;\n      }\n      else\n      {\n        // Only dither if this pixel does not border 100% white or black...\n\tif ((x > 0 && (current[-1] == 255 || current[-1] == 0)) ||\n\t    (count > 1 && (current[1] == 255 || current[1] == 0)) ||\n\t    *prev == 255 || *prev == 0 || *next == 255 || *next == 0)\n        {\n          // Threshold\n          if (*current > 127)\n\t    byte ^= bit;\n        }\n        else if (*current > dline[x & 15])\n        {\n          // Dither anything else\n\t  byte ^= bit;\n\t}\n      }\n    }\n\n    // Next output bit...\n    if (bit > 1)\n    {\n      bit /= 2;\n    }\n    else\n    {\n      *outptr++ = byte;\n      byte      = dither->out_white;\n      bit       = 128;\n    }\n  }\n\n  // Save last byte of output as needed and return...\n  if (bit < 128)\n    *outptr = byte;\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 174,
    "end_line": 306,
    "code": "ol\t\t\t\t\t// O - `true` if line dithered, `false` to skip\nlprintDitherLine(\n    lprint_dither_t     *dither,\t// I - Dither buffer\n    unsigned            y,\t\t// I - Input line number (starting at `0`)\n    const unsigned char *line)\t\t// I - Input line\n{\n  unsigned\tx,\t\t\t// Current column\n\t\tcount;\t\t\t// Remaining count\n  unsigned char\t*current,\t\t// Current line\n\t\t*prev,\t\t\t// Previous line\n\t\t*next;\t\t\t// Next line\n  unsigned char\t*dline,\t\t\t// Dither line\n\t\t*outptr,\t\t// Pointer into output\n\t\tbyte,\t\t\t// Current byte\n\t\tbit;\t\t\t// Current bit\n\n\n  // Copy current input line...\n  count = dither->in_width;\n  next  = dither->input[y & 3];\n\n  memset(next, 0, count);\n\n  if (line)\n  {\n    switch (dither->in_bpp)\n    {\n      case 1 : // 1-bit black\n\t  for (line += dither->in_left / 8, byte = *line++, bit = 128 >> (dither->in_left & 7); count > 0; count --, next ++)\n\t  {\n\t    // Convert to 8-bit black...\n\t    if (byte & bit)\n\t      *next = 255;\n\n\t    if (bit > 1)\n\t    {\n\t      bit /= 2;\n\t    }\n\t    else\n\t    {\n\t      bit  = 128;\n\t      byte = *line++;\n\t    }\n\t  }\n\t  break;\n\n      case 8 : // Grayscale or 8-bit black\n\t  if (dither->in_white)\n\t  {\n\t    // Convert grayscale to black...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = 255 - *line;\n\t    }\n\t  }\n\t  else\n\t  {\n\t    // Copy with clamping...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t  }\n\t  break;\n\n      default : // Something else...\n\t  return (false);\n    }\n  }\n\n  // If we are outside the imageable area then don't dither...\n  if (y < (dither->in_top + 1) || y > (dither->in_bottom + 1))\n    return (false);\n\n  // Dither...\n  for (x = 0, count = dither->in_width, prev = dither->input[(y - 2) & 3], current = dither->input[(y - 1) & 3], next = dither->input[y & 3], outptr = dither->output, byte = dither->out_white, bit = 128, dline = dither->dither[y & 15]; count > 0; x ++, count --, prev ++, current ++, next ++)\n  {\n    if (*current)\n    {\n      // Not pure white/blank...\n      if (*current == 255)\n      {\n        // 100% black...\n        byte ^= bit;\n      }\n      else\n      {\n        // Only dither if this pixel does not border 100% white or black...\n\tif ((x > 0 && (current[-1] == 255 || current[-1] == 0)) ||\n\t    (count > 1 && (current[1] == 255 || current[1] == 0)) ||\n\t    *prev == 255 || *prev == 0 || *next == 255 || *next == 0)\n        {\n          // Threshold\n          if (*current > 127)\n\t    byte ^= bit;\n        }\n        else if (*current > dline[x & 15])\n        {\n          // Dither anything else\n\t  byte ^= bit;\n\t}\n      }\n    }\n\n    // Next output bit...\n    if (bit > 1)\n    {\n      bit /= 2;\n    }\n    else\n    {\n      *outptr++ = byte;\n      byte      = dither->out_white;\n      bit       = 128;\n    }\n  }\n\n  // Save last byte of output as needed and return...\n  if (bit < 128)\n    *outptr = byte;\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 174,
    "end_line": 306,
    "code": "ol\t\t\t\t\t// O - `true` if line dithered, `false` to skip\nlprintDitherLine(\n    lprint_dither_t     *dither,\t// I - Dither buffer\n    unsigned            y,\t\t// I - Input line number (starting at `0`)\n    const unsigned char *line)\t\t// I - Input line\n{\n  unsigned\tx,\t\t\t// Current column\n\t\tcount;\t\t\t// Remaining count\n  unsigned char\t*current,\t\t// Current line\n\t\t*prev,\t\t\t// Previous line\n\t\t*next;\t\t\t// Next line\n  unsigned char\t*dline,\t\t\t// Dither line\n\t\t*outptr,\t\t// Pointer into output\n\t\tbyte,\t\t\t// Current byte\n\t\tbit;\t\t\t// Current bit\n\n\n  // Copy current input line...\n  count = dither->in_width;\n  next  = dither->input[y & 3];\n\n  memset(next, 0, count);\n\n  if (line)\n  {\n    switch (dither->in_bpp)\n    {\n      case 1 : // 1-bit black\n\t  for (line += dither->in_left / 8, byte = *line++, bit = 128 >> (dither->in_left & 7); count > 0; count --, next ++)\n\t  {\n\t    // Convert to 8-bit black...\n\t    if (byte & bit)\n\t      *next = 255;\n\n\t    if (bit > 1)\n\t    {\n\t      bit /= 2;\n\t    }\n\t    else\n\t    {\n\t      bit  = 128;\n\t      byte = *line++;\n\t    }\n\t  }\n\t  break;\n\n      case 8 : // Grayscale or 8-bit black\n\t  if (dither->in_white)\n\t  {\n\t    // Convert grayscale to black...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = 255 - *line;\n\t    }\n\t  }\n\t  else\n\t  {\n\t    // Copy with clamping...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t  }\n\t  break;\n\n      default : // Something else...\n\t  return (false);\n    }\n  }\n\n  // If we are outside the imageable area then don't dither...\n  if (y < (dither->in_top + 1) || y > (dither->in_bottom + 1))\n    return (false);\n\n  // Dither...\n  for (x = 0, count = dither->in_width, prev = dither->input[(y - 2) & 3], current = dither->input[(y - 1) & 3], next = dither->input[y & 3], outptr = dither->output, byte = dither->out_white, bit = 128, dline = dither->dither[y & 15]; count > 0; x ++, count --, prev ++, current ++, next ++)\n  {\n    if (*current)\n    {\n      // Not pure white/blank...\n      if (*current == 255)\n      {\n        // 100% black...\n        byte ^= bit;\n      }\n      else\n      {\n        // Only dither if this pixel does not border 100% white or black...\n\tif ((x > 0 && (current[-1] == 255 || current[-1] == 0)) ||\n\t    (count > 1 && (current[1] == 255 || current[1] == 0)) ||\n\t    *prev == 255 || *prev == 0 || *next == 255 || *next == 0)\n        {\n          // Threshold\n          if (*current > 127)\n\t    byte ^= bit;\n        }\n        else if (*current > dline[x & 15])\n        {\n          // Dither anything else\n\t  byte ^= bit;\n\t}\n      }\n    }\n\n    // Next output bit...\n    if (bit > 1)\n    {\n      bit /= 2;\n    }\n    else\n    {\n      *outptr++ = byte;\n      byte      = dither->out_white;\n      bit       = 128;\n    }\n  }\n\n  // Save last byte of output as needed and return...\n  if (bit < 128)\n    *outptr = byte;\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 179,
    "end_line": 306,
    "code": "  unsigned\tx,\t\t\t// Current column\n\t\tcount;\t\t\t// Remaining count\n  unsigned char\t*current,\t\t// Current line\n\t\t*prev,\t\t\t// Previous line\n\t\t*next;\t\t\t// Next line\n  unsigned char\t*dline,\t\t\t// Dither line\n\t\t*outptr,\t\t// Pointer into output\n\t\tbyte,\t\t\t// Current byte\n\t\tbit;\t\t\t// Current bit\n\n\n  // Copy current input line...\n  count = dither->in_width;\n  next  = dither->input[y & 3];\n\n  memset(next, 0, count);\n\n  if (line)\n  {\n    switch (dither->in_bpp)\n    {\n      case 1 : // 1-bit black\n\t  for (line += dither->in_left / 8, byte = *line++, bit = 128 >> (dither->in_left & 7); count > 0; count --, next ++)\n\t  {\n\t    // Convert to 8-bit black...\n\t    if (byte & bit)\n\t      *next = 255;\n\n\t    if (bit > 1)\n\t    {\n\t      bit /= 2;\n\t    }\n\t    else\n\t    {\n\t      bit  = 128;\n\t      byte = *line++;\n\t    }\n\t  }\n\t  break;\n\n      case 8 : // Grayscale or 8-bit black\n\t  if (dither->in_white)\n\t  {\n\t    // Convert grayscale to black...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = 255 - *line;\n\t    }\n\t  }\n\t  else\n\t  {\n\t    // Copy with clamping...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t  }\n\t  break;\n\n      default : // Something else...\n\t  return (false);\n    }\n  }\n\n  // If we are outside the imageable area then don't dither...\n  if (y < (dither->in_top + 1) || y > (dither->in_bottom + 1))\n    return (false);\n\n  // Dither...\n  for (x = 0, count = dither->in_width, prev = dither->input[(y - 2) & 3], current = dither->input[(y - 1) & 3], next = dither->input[y & 3], outptr = dither->output, byte = dither->out_white, bit = 128, dline = dither->dither[y & 15]; count > 0; x ++, count --, prev ++, current ++, next ++)\n  {\n    if (*current)\n    {\n      // Not pure white/blank...\n      if (*current == 255)\n      {\n        // 100% black...\n        byte ^= bit;\n      }\n      else\n      {\n        // Only dither if this pixel does not border 100% white or black...\n\tif ((x > 0 && (current[-1] == 255 || current[-1] == 0)) ||\n\t    (count > 1 && (current[1] == 255 || current[1] == 0)) ||\n\t    *prev == 255 || *prev == 0 || *next == 255 || *next == 0)\n        {\n          // Threshold\n          if (*current > 127)\n\t    byte ^= bit;\n        }\n        else if (*current > dline[x & 15])\n        {\n          // Dither anything else\n\t  byte ^= bit;\n\t}\n      }\n    }\n\n    // Next output bit...\n    if (bit > 1)\n    {\n      bit /= 2;\n    }\n    else\n    {\n      *outptr++ = byte;\n      byte      = dither->out_white;\n      bit       = 128;\n    }\n  }\n\n  // Save last byte of output as needed and return...\n  if (bit < 128)\n    *outptr = byte;\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 179,
    "end_line": 306,
    "code": "  unsigned\tx,\t\t\t// Current column\n\t\tcount;\t\t\t// Remaining count\n  unsigned char\t*current,\t\t// Current line\n\t\t*prev,\t\t\t// Previous line\n\t\t*next;\t\t\t// Next line\n  unsigned char\t*dline,\t\t\t// Dither line\n\t\t*outptr,\t\t// Pointer into output\n\t\tbyte,\t\t\t// Current byte\n\t\tbit;\t\t\t// Current bit\n\n\n  // Copy current input line...\n  count = dither->in_width;\n  next  = dither->input[y & 3];\n\n  memset(next, 0, count);\n\n  if (line)\n  {\n    switch (dither->in_bpp)\n    {\n      case 1 : // 1-bit black\n\t  for (line += dither->in_left / 8, byte = *line++, bit = 128 >> (dither->in_left & 7); count > 0; count --, next ++)\n\t  {\n\t    // Convert to 8-bit black...\n\t    if (byte & bit)\n\t      *next = 255;\n\n\t    if (bit > 1)\n\t    {\n\t      bit /= 2;\n\t    }\n\t    else\n\t    {\n\t      bit  = 128;\n\t      byte = *line++;\n\t    }\n\t  }\n\t  break;\n\n      case 8 : // Grayscale or 8-bit black\n\t  if (dither->in_white)\n\t  {\n\t    // Convert grayscale to black...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = 255 - *line;\n\t    }\n\t  }\n\t  else\n\t  {\n\t    // Copy with clamping...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t  }\n\t  break;\n\n      default : // Something else...\n\t  return (false);\n    }\n  }\n\n  // If we are outside the imageable area then don't dither...\n  if (y < (dither->in_top + 1) || y > (dither->in_bottom + 1))\n    return (false);\n\n  // Dither...\n  for (x = 0, count = dither->in_width, prev = dither->input[(y - 2) & 3], current = dither->input[(y - 1) & 3], next = dither->input[y & 3], outptr = dither->output, byte = dither->out_white, bit = 128, dline = dither->dither[y & 15]; count > 0; x ++, count --, prev ++, current ++, next ++)\n  {\n    if (*current)\n    {\n      // Not pure white/blank...\n      if (*current == 255)\n      {\n        // 100% black...\n        byte ^= bit;\n      }\n      else\n      {\n        // Only dither if this pixel does not border 100% white or black...\n\tif ((x > 0 && (current[-1] == 255 || current[-1] == 0)) ||\n\t    (count > 1 && (current[1] == 255 || current[1] == 0)) ||\n\t    *prev == 255 || *prev == 0 || *next == 255 || *next == 0)\n        {\n          // Threshold\n          if (*current > 127)\n\t    byte ^= bit;\n        }\n        else if (*current > dline[x & 15])\n        {\n          // Dither anything else\n\t  byte ^= bit;\n\t}\n      }\n    }\n\n    // Next output bit...\n    if (bit > 1)\n    {\n      bit /= 2;\n    }\n    else\n    {\n      *outptr++ = byte;\n      byte      = dither->out_white;\n      bit       = 128;\n    }\n  }\n\n  // Save last byte of output as needed and return...\n  if (bit < 128)\n    *outptr = byte;\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 192,
    "end_line": 192,
    "code": "unt = dither->in_width;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 192,
    "end_line": 192,
    "code": "unt = dither->in_width;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 193,
    "end_line": 193,
    "code": "xt  = dither->input[y & 3];\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 193,
    "end_line": 193,
    "code": "xt  = dither->input[y & 3];\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 197,
    "end_line": 252,
    "code": " (line)\n  {\n    switch (dither->in_bpp)\n    {\n      case 1 : // 1-bit black\n\t  for (line += dither->in_left / 8, byte = *line++, bit = 128 >> (dither->in_left & 7); count > 0; count --, next ++)\n\t  {\n\t    // Convert to 8-bit black...\n\t    if (byte & bit)\n\t      *next = 255;\n\n\t    if (bit > 1)\n\t    {\n\t      bit /= 2;\n\t    }\n\t    else\n\t    {\n\t      bit  = 128;\n\t      byte = *line++;\n\t    }\n\t  }\n\t  break;\n\n      case 8 : // Grayscale or 8-bit black\n\t  if (dither->in_white)\n\t  {\n\t    // Convert grayscale to black...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = 255 - *line;\n\t    }\n\t  }\n\t  else\n\t  {\n\t    // Copy with clamping...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t  }\n\t  break;\n\n      default : // Something else...\n\t  return (false);\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 197,
    "end_line": 252,
    "code": " (line)\n  {\n    switch (dither->in_bpp)\n    {\n      case 1 : // 1-bit black\n\t  for (line += dither->in_left / 8, byte = *line++, bit = 128 >> (dither->in_left & 7); count > 0; count --, next ++)\n\t  {\n\t    // Convert to 8-bit black...\n\t    if (byte & bit)\n\t      *next = 255;\n\n\t    if (bit > 1)\n\t    {\n\t      bit /= 2;\n\t    }\n\t    else\n\t    {\n\t      bit  = 128;\n\t      byte = *line++;\n\t    }\n\t  }\n\t  break;\n\n      case 8 : // Grayscale or 8-bit black\n\t  if (dither->in_white)\n\t  {\n\t    // Convert grayscale to black...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = 255 - *line;\n\t    }\n\t  }\n\t  else\n\t  {\n\t    // Copy with clamping...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t  }\n\t  break;\n\n      default : // Something else...\n\t  return (false);\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 198,
    "end_line": 252,
    "code": "    switch (dither->in_bpp)\n    {\n      case 1 : // 1-bit black\n\t  for (line += dither->in_left / 8, byte = *line++, bit = 128 >> (dither->in_left & 7); count > 0; count --, next ++)\n\t  {\n\t    // Convert to 8-bit black...\n\t    if (byte & bit)\n\t      *next = 255;\n\n\t    if (bit > 1)\n\t    {\n\t      bit /= 2;\n\t    }\n\t    else\n\t    {\n\t      bit  = 128;\n\t      byte = *line++;\n\t    }\n\t  }\n\t  break;\n\n      case 8 : // Grayscale or 8-bit black\n\t  if (dither->in_white)\n\t  {\n\t    // Convert grayscale to black...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = 255 - *line;\n\t    }\n\t  }\n\t  else\n\t  {\n\t    // Copy with clamping...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t  }\n\t  break;\n\n      default : // Something else...\n\t  return (false);\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 198,
    "end_line": 252,
    "code": "    switch (dither->in_bpp)\n    {\n      case 1 : // 1-bit black\n\t  for (line += dither->in_left / 8, byte = *line++, bit = 128 >> (dither->in_left & 7); count > 0; count --, next ++)\n\t  {\n\t    // Convert to 8-bit black...\n\t    if (byte & bit)\n\t      *next = 255;\n\n\t    if (bit > 1)\n\t    {\n\t      bit /= 2;\n\t    }\n\t    else\n\t    {\n\t      bit  = 128;\n\t      byte = *line++;\n\t    }\n\t  }\n\t  break;\n\n      case 8 : // Grayscale or 8-bit black\n\t  if (dither->in_white)\n\t  {\n\t    // Convert grayscale to black...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = 255 - *line;\n\t    }\n\t  }\n\t  else\n\t  {\n\t    // Copy with clamping...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t  }\n\t  break;\n\n      default : // Something else...\n\t  return (false);\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 199,
    "end_line": 251,
    "code": "itch (dither->in_bpp)\n    {\n      case 1 : // 1-bit black\n\t  for (line += dither->in_left / 8, byte = *line++, bit = 128 >> (dither->in_left & 7); count > 0; count --, next ++)\n\t  {\n\t    // Convert to 8-bit black...\n\t    if (byte & bit)\n\t      *next = 255;\n\n\t    if (bit > 1)\n\t    {\n\t      bit /= 2;\n\t    }\n\t    else\n\t    {\n\t      bit  = 128;\n\t      byte = *line++;\n\t    }\n\t  }\n\t  break;\n\n      case 8 : // Grayscale or 8-bit black\n\t  if (dither->in_white)\n\t  {\n\t    // Convert grayscale to black...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = 255 - *line;\n\t    }\n\t  }\n\t  else\n\t  {\n\t    // Copy with clamping...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t  }\n\t  break;\n\n      default : // Something else...\n\t  return (false);\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 199,
    "end_line": 251,
    "code": "itch (dither->in_bpp)\n    {\n      case 1 : // 1-bit black\n\t  for (line += dither->in_left / 8, byte = *line++, bit = 128 >> (dither->in_left & 7); count > 0; count --, next ++)\n\t  {\n\t    // Convert to 8-bit black...\n\t    if (byte & bit)\n\t      *next = 255;\n\n\t    if (bit > 1)\n\t    {\n\t      bit /= 2;\n\t    }\n\t    else\n\t    {\n\t      bit  = 128;\n\t      byte = *line++;\n\t    }\n\t  }\n\t  break;\n\n      case 8 : // Grayscale or 8-bit black\n\t  if (dither->in_white)\n\t  {\n\t    // Convert grayscale to black...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = 255 - *line;\n\t    }\n\t  }\n\t  else\n\t  {\n\t    // Copy with clamping...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t  }\n\t  break;\n\n      default : // Something else...\n\t  return (false);\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 200,
    "end_line": 251,
    "code": "      case 1 : // 1-bit black\n\t  for (line += dither->in_left / 8, byte = *line++, bit = 128 >> (dither->in_left & 7); count > 0; count --, next ++)\n\t  {\n\t    // Convert to 8-bit black...\n\t    if (byte & bit)\n\t      *next = 255;\n\n\t    if (bit > 1)\n\t    {\n\t      bit /= 2;\n\t    }\n\t    else\n\t    {\n\t      bit  = 128;\n\t      byte = *line++;\n\t    }\n\t  }\n\t  break;\n\n      case 8 : // Grayscale or 8-bit black\n\t  if (dither->in_white)\n\t  {\n\t    // Convert grayscale to black...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = 255 - *line;\n\t    }\n\t  }\n\t  else\n\t  {\n\t    // Copy with clamping...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t  }\n\t  break;\n\n      default : // Something else...\n\t  return (false);\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 200,
    "end_line": 251,
    "code": "      case 1 : // 1-bit black\n\t  for (line += dither->in_left / 8, byte = *line++, bit = 128 >> (dither->in_left & 7); count > 0; count --, next ++)\n\t  {\n\t    // Convert to 8-bit black...\n\t    if (byte & bit)\n\t      *next = 255;\n\n\t    if (bit > 1)\n\t    {\n\t      bit /= 2;\n\t    }\n\t    else\n\t    {\n\t      bit  = 128;\n\t      byte = *line++;\n\t    }\n\t  }\n\t  break;\n\n      case 8 : // Grayscale or 8-bit black\n\t  if (dither->in_white)\n\t  {\n\t    // Convert grayscale to black...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = 255 - *line;\n\t    }\n\t  }\n\t  else\n\t  {\n\t    // Copy with clamping...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t  }\n\t  break;\n\n      default : // Something else...\n\t  return (false);\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 201,
    "end_line": 218,
    "code": "se 1 : // 1-bit black\n\t  for (line += dither->in_left / 8, byte = *line++, bit = 128 >> (dither->in_left & 7); count > 0; count --, next ++)\n\t  {\n\t    // Convert to 8-bit black...\n\t    if (byte & bit)\n\t      *next = 255;\n\n\t    if (bit > 1)\n\t    {\n\t      bit /= 2;\n\t    }\n\t    else\n\t    {\n\t      bit  = 128;\n\t      byte = *line++;\n\t    }\n\t  }\n\t  break;\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 201,
    "end_line": 218,
    "code": "se 1 : // 1-bit black\n\t  for (line += dither->in_left / 8, byte = *line++, bit = 128 >> (dither->in_left & 7); count > 0; count --, next ++)\n\t  {\n\t    // Convert to 8-bit black...\n\t    if (byte & bit)\n\t      *next = 255;\n\n\t    if (bit > 1)\n\t    {\n\t      bit /= 2;\n\t    }\n\t    else\n\t    {\n\t      bit  = 128;\n\t      byte = *line++;\n\t    }\n\t  }\n\t  break;\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 202,
    "end_line": 217,
    "code": "r (line += dither->in_left / 8, byte = *line++, bit = 128 >> (dither->in_left & 7); count > 0; count --, next ++)\n\t  {\n\t    // Convert to 8-bit black...\n\t    if (byte & bit)\n\t      *next = 255;\n\n\t    if (bit > 1)\n\t    {\n\t      bit /= 2;\n\t    }\n\t    else\n\t    {\n\t      bit  = 128;\n\t      byte = *line++;\n\t    }\n\t  }\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 202,
    "end_line": 217,
    "code": "r (line += dither->in_left / 8, byte = *line++, bit = 128 >> (dither->in_left & 7); count > 0; count --, next ++)\n\t  {\n\t    // Convert to 8-bit black...\n\t    if (byte & bit)\n\t      *next = 255;\n\n\t    if (bit > 1)\n\t    {\n\t      bit /= 2;\n\t    }\n\t    else\n\t    {\n\t      bit  = 128;\n\t      byte = *line++;\n\t    }\n\t  }\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 202,
    "end_line": 202,
    "code": "ne += dither->in_left / 8, byte = *line++, bit = 128 >> (dither->in_left & 7); ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 202,
    "end_line": 202,
    "code": "ne += dither->in_left / 8, byte = *line++, bit = 128 >> (dither->in_left & 7); ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 202,
    "end_line": 202,
    "code": "te = *line++, bit = 128 >> (dither->in_left & 7); ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 202,
    "end_line": 202,
    "code": "te = *line++, bit = 128 >> (dither->in_left & 7); ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 202,
    "end_line": 202,
    "code": "t = 128 >> (dither->in_left & 7); ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 202,
    "end_line": 202,
    "code": "t = 128 >> (dither->in_left & 7); ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 203,
    "end_line": 217,
    "code": "\t    // Convert to 8-bit black...\n\t    if (byte & bit)\n\t      *next = 255;\n\n\t    if (bit > 1)\n\t    {\n\t      bit /= 2;\n\t    }\n\t    else\n\t    {\n\t      bit  = 128;\n\t      byte = *line++;\n\t    }\n\t  }\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 220,
    "end_line": 247,
    "code": "se 8 : // Grayscale or 8-bit black\n\t  if (dither->in_white)\n\t  {\n\t    // Convert grayscale to black...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = 255 - *line;\n\t    }\n\t  }\n\t  else\n\t  {\n\t    // Copy with clamping...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t  }\n\t  break;\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 220,
    "end_line": 247,
    "code": "se 8 : // Grayscale or 8-bit black\n\t  if (dither->in_white)\n\t  {\n\t    // Convert grayscale to black...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = 255 - *line;\n\t    }\n\t  }\n\t  else\n\t  {\n\t    // Copy with clamping...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t  }\n\t  break;\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 221,
    "end_line": 246,
    "code": " (dither->in_white)\n\t  {\n\t    // Convert grayscale to black...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = 255 - *line;\n\t    }\n\t  }\n\t  else\n\t  {\n\t    // Copy with clamping...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t  }\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 221,
    "end_line": 246,
    "code": " (dither->in_white)\n\t  {\n\t    // Convert grayscale to black...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = 255 - *line;\n\t    }\n\t  }\n\t  else\n\t  {\n\t    // Copy with clamping...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t  }\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 222,
    "end_line": 233,
    "code": "\t    // Convert grayscale to black...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = 255 - *line;\n\t    }\n\t  }\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 222,
    "end_line": 233,
    "code": "\t    // Convert grayscale to black...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = 255 - *line;\n\t    }\n\t  }\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 224,
    "end_line": 232,
    "code": "r (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = 255 - *line;\n\t    }\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 224,
    "end_line": 232,
    "code": "r (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = 255 - *line;\n\t    }\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 224,
    "end_line": 224,
    "code": "ne += dither->in_left; ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 234,
    "end_line": 246,
    "code": "se\n\t  {\n\t    // Copy with clamping...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t  }\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 234,
    "end_line": 246,
    "code": "se\n\t  {\n\t    // Copy with clamping...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t  }\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 235,
    "end_line": 246,
    "code": "\t    // Copy with clamping...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t  }\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 235,
    "end_line": 246,
    "code": "\t    // Copy with clamping...\n\t    for (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t  }\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 237,
    "end_line": 245,
    "code": "r (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 237,
    "end_line": 245,
    "code": "r (line += dither->in_left; count > 0; count --, next ++, line ++)\n\t    {\n\t      if (*line < LPRINT_WHITE)\n\t\t*next = 255;\n\t      else if (*line > LPRINT_BLACK)\n\t\t*next = 0;\n\t      else\n\t\t*next = *line;\n\t    }\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 237,
    "end_line": 237,
    "code": "ne += dither->in_left; ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 259,
    "end_line": 299,
    "code": "r (x = 0, count = dither->in_width, prev = dither->input[(y - 2) & 3], current = dither->input[(y - 1) & 3], next = dither->input[y & 3], outptr = dither->output, byte = dither->out_white, bit = 128, dline = dither->dither[y & 15]; count > 0; x ++, count --, prev ++, current ++, next ++)\n  {\n    if (*current)\n    {\n      // Not pure white/blank...\n      if (*current == 255)\n      {\n        // 100% black...\n        byte ^= bit;\n      }\n      else\n      {\n        // Only dither if this pixel does not border 100% white or black...\n\tif ((x > 0 && (current[-1] == 255 || current[-1] == 0)) ||\n\t    (count > 1 && (current[1] == 255 || current[1] == 0)) ||\n\t    *prev == 255 || *prev == 0 || *next == 255 || *next == 0)\n        {\n          // Threshold\n          if (*current > 127)\n\t    byte ^= bit;\n        }\n        else if (*current > dline[x & 15])\n        {\n          // Dither anything else\n\t  byte ^= bit;\n\t}\n      }\n    }\n\n    // Next output bit...\n    if (bit > 1)\n    {\n      bit /= 2;\n    }\n    else\n    {\n      *outptr++ = byte;\n      byte      = dither->out_white;\n      bit       = 128;\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 259,
    "end_line": 299,
    "code": "r (x = 0, count = dither->in_width, prev = dither->input[(y - 2) & 3], current = dither->input[(y - 1) & 3], next = dither->input[y & 3], outptr = dither->output, byte = dither->out_white, bit = 128, dline = dither->dither[y & 15]; count > 0; x ++, count --, prev ++, current ++, next ++)\n  {\n    if (*current)\n    {\n      // Not pure white/blank...\n      if (*current == 255)\n      {\n        // 100% black...\n        byte ^= bit;\n      }\n      else\n      {\n        // Only dither if this pixel does not border 100% white or black...\n\tif ((x > 0 && (current[-1] == 255 || current[-1] == 0)) ||\n\t    (count > 1 && (current[1] == 255 || current[1] == 0)) ||\n\t    *prev == 255 || *prev == 0 || *next == 255 || *next == 0)\n        {\n          // Threshold\n          if (*current > 127)\n\t    byte ^= bit;\n        }\n        else if (*current > dline[x & 15])\n        {\n          // Dither anything else\n\t  byte ^= bit;\n\t}\n      }\n    }\n\n    // Next output bit...\n    if (bit > 1)\n    {\n      bit /= 2;\n    }\n    else\n    {\n      *outptr++ = byte;\n      byte      = dither->out_white;\n      bit       = 128;\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 259,
    "end_line": 259,
    "code": "= 0, count = dither->in_width, prev = dither->input[(y - 2) & 3], current = dither->input[(y - 1) & 3], next = dither->input[y & 3], outptr = dither->output, byte = dither->out_white, bit = 128, dline = dither->dither[y & 15]; ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 259,
    "end_line": 259,
    "code": "= 0, count = dither->in_width, prev = dither->input[(y - 2) & 3], current = dither->input[(y - 1) & 3], next = dither->input[y & 3], outptr = dither->output, byte = dither->out_white, bit = 128, dline = dither->dither[y & 15]; ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 259,
    "end_line": 259,
    "code": "unt = dither->in_width, prev = dither->input[(y - 2) & 3], current = dither->input[(y - 1) & 3], next = dither->input[y & 3], outptr = dither->output, byte = dither->out_white, bit = 128, dline = dither->dither[y & 15]; ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 259,
    "end_line": 259,
    "code": "unt = dither->in_width, prev = dither->input[(y - 2) & 3], current = dither->input[(y - 1) & 3], next = dither->input[y & 3], outptr = dither->output, byte = dither->out_white, bit = 128, dline = dither->dither[y & 15]; ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 259,
    "end_line": 259,
    "code": "ev = dither->input[(y - 2) & 3], current = dither->input[(y - 1) & 3], next = dither->input[y & 3], outptr = dither->output, byte = dither->out_white, bit = 128, dline = dither->dither[y & 15]; ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 259,
    "end_line": 259,
    "code": "ev = dither->input[(y - 2) & 3], current = dither->input[(y - 1) & 3], next = dither->input[y & 3], outptr = dither->output, byte = dither->out_white, bit = 128, dline = dither->dither[y & 15]; ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 259,
    "end_line": 259,
    "code": "ev = dither->input[(y - 2) & 3], ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 259,
    "end_line": 259,
    "code": "rrent = dither->input[(y - 1) & 3], next = dither->input[y & 3], outptr = dither->output, byte = dither->out_white, bit = 128, dline = dither->dither[y & 15]; ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 259,
    "end_line": 259,
    "code": "rrent = dither->input[(y - 1) & 3], next = dither->input[y & 3], outptr = dither->output, byte = dither->out_white, bit = 128, dline = dither->dither[y & 15]; ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 259,
    "end_line": 259,
    "code": "rrent = dither->input[(y - 1) & 3], ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 259,
    "end_line": 259,
    "code": "xt = dither->input[y & 3], outptr = dither->output, byte = dither->out_white, bit = 128, dline = dither->dither[y & 15]; ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 259,
    "end_line": 259,
    "code": "tptr = dither->output, byte = dither->out_white, bit = 128, dline = dither->dither[y & 15]; ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 259,
    "end_line": 259,
    "code": "te = dither->out_white, bit = 128, dline = dither->dither[y & 15]; ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 259,
    "end_line": 259,
    "code": "t = 128, dline = dither->dither[y & 15]; ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 259,
    "end_line": 259,
    "code": "ine = dither->dither[y & 15]; ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 260,
    "end_line": 299,
    "code": "    if (*current)\n    {\n      // Not pure white/blank...\n      if (*current == 255)\n      {\n        // 100% black...\n        byte ^= bit;\n      }\n      else\n      {\n        // Only dither if this pixel does not border 100% white or black...\n\tif ((x > 0 && (current[-1] == 255 || current[-1] == 0)) ||\n\t    (count > 1 && (current[1] == 255 || current[1] == 0)) ||\n\t    *prev == 255 || *prev == 0 || *next == 255 || *next == 0)\n        {\n          // Threshold\n          if (*current > 127)\n\t    byte ^= bit;\n        }\n        else if (*current > dline[x & 15])\n        {\n          // Dither anything else\n\t  byte ^= bit;\n\t}\n      }\n    }\n\n    // Next output bit...\n    if (bit > 1)\n    {\n      bit /= 2;\n    }\n    else\n    {\n      *outptr++ = byte;\n      byte      = dither->out_white;\n      bit       = 128;\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 260,
    "end_line": 299,
    "code": "    if (*current)\n    {\n      // Not pure white/blank...\n      if (*current == 255)\n      {\n        // 100% black...\n        byte ^= bit;\n      }\n      else\n      {\n        // Only dither if this pixel does not border 100% white or black...\n\tif ((x > 0 && (current[-1] == 255 || current[-1] == 0)) ||\n\t    (count > 1 && (current[1] == 255 || current[1] == 0)) ||\n\t    *prev == 255 || *prev == 0 || *next == 255 || *next == 0)\n        {\n          // Threshold\n          if (*current > 127)\n\t    byte ^= bit;\n        }\n        else if (*current > dline[x & 15])\n        {\n          // Dither anything else\n\t  byte ^= bit;\n\t}\n      }\n    }\n\n    // Next output bit...\n    if (bit > 1)\n    {\n      bit /= 2;\n    }\n    else\n    {\n      *outptr++ = byte;\n      byte      = dither->out_white;\n      bit       = 128;\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 261,
    "end_line": 286,
    "code": " (*current)\n    {\n      // Not pure white/blank...\n      if (*current == 255)\n      {\n        // 100% black...\n        byte ^= bit;\n      }\n      else\n      {\n        // Only dither if this pixel does not border 100% white or black...\n\tif ((x > 0 && (current[-1] == 255 || current[-1] == 0)) ||\n\t    (count > 1 && (current[1] == 255 || current[1] == 0)) ||\n\t    *prev == 255 || *prev == 0 || *next == 255 || *next == 0)\n        {\n          // Threshold\n          if (*current > 127)\n\t    byte ^= bit;\n        }\n        else if (*current > dline[x & 15])\n        {\n          // Dither anything else\n\t  byte ^= bit;\n\t}\n      }\n    }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 262,
    "end_line": 286,
    "code": "      // Not pure white/blank...\n      if (*current == 255)\n      {\n        // 100% black...\n        byte ^= bit;\n      }\n      else\n      {\n        // Only dither if this pixel does not border 100% white or black...\n\tif ((x > 0 && (current[-1] == 255 || current[-1] == 0)) ||\n\t    (count > 1 && (current[1] == 255 || current[1] == 0)) ||\n\t    *prev == 255 || *prev == 0 || *next == 255 || *next == 0)\n        {\n          // Threshold\n          if (*current > 127)\n\t    byte ^= bit;\n        }\n        else if (*current > dline[x & 15])\n        {\n          // Dither anything else\n\t  byte ^= bit;\n\t}\n      }\n    }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 264,
    "end_line": 285,
    "code": " (*current == 255)\n      {\n        // 100% black...\n        byte ^= bit;\n      }\n      else\n      {\n        // Only dither if this pixel does not border 100% white or black...\n\tif ((x > 0 && (current[-1] == 255 || current[-1] == 0)) ||\n\t    (count > 1 && (current[1] == 255 || current[1] == 0)) ||\n\t    *prev == 255 || *prev == 0 || *next == 255 || *next == 0)\n        {\n          // Threshold\n          if (*current > 127)\n\t    byte ^= bit;\n        }\n        else if (*current > dline[x & 15])\n        {\n          // Dither anything else\n\t  byte ^= bit;\n\t}\n      }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 265,
    "end_line": 268,
    "code": "        // 100% black...\n        byte ^= bit;\n      }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 269,
    "end_line": 285,
    "code": "se\n      {\n        // Only dither if this pixel does not border 100% white or black...\n\tif ((x > 0 && (current[-1] == 255 || current[-1] == 0)) ||\n\t    (count > 1 && (current[1] == 255 || current[1] == 0)) ||\n\t    *prev == 255 || *prev == 0 || *next == 255 || *next == 0)\n        {\n          // Threshold\n          if (*current > 127)\n\t    byte ^= bit;\n        }\n        else if (*current > dline[x & 15])\n        {\n          // Dither anything else\n\t  byte ^= bit;\n\t}\n      }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 270,
    "end_line": 285,
    "code": "        // Only dither if this pixel does not border 100% white or black...\n\tif ((x > 0 && (current[-1] == 255 || current[-1] == 0)) ||\n\t    (count > 1 && (current[1] == 255 || current[1] == 0)) ||\n\t    *prev == 255 || *prev == 0 || *next == 255 || *next == 0)\n        {\n          // Threshold\n          if (*current > 127)\n\t    byte ^= bit;\n        }\n        else if (*current > dline[x & 15])\n        {\n          // Dither anything else\n\t  byte ^= bit;\n\t}\n      }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 289,
    "end_line": 298,
    "code": " (bit > 1)\n    {\n      bit /= 2;\n    }\n    else\n    {\n      *outptr++ = byte;\n      byte      = dither->out_white;\n      bit       = 128;\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 289,
    "end_line": 298,
    "code": " (bit > 1)\n    {\n      bit /= 2;\n    }\n    else\n    {\n      *outptr++ = byte;\n      byte      = dither->out_white;\n      bit       = 128;\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 293,
    "end_line": 298,
    "code": "se\n    {\n      *outptr++ = byte;\n      byte      = dither->out_white;\n      bit       = 128;\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 294,
    "end_line": 298,
    "code": "      *outptr++ = byte;\n      byte      = dither->out_white;\n      bit       = 128;\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 296,
    "end_line": 296,
    "code": "te      = dither->out_white;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 296,
    "end_line": 296,
    "code": "te      = dither->out_white;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function",
    "start_line": 313,
    "end_line": 352,
    "name": "lprintMediaLoad",
    "parent": null,
    "hierarchy": "lprintMediaLoad",
    "code": "ol\t\t\t\t\t// O - `true` on success, `false` on error\nlprintMediaLoad(\n    pappl_printer_t        *printer,\t// I - Printer\n    pappl_pr_driver_data_t *data)\t// I - Driver data\n{\n  lprint_cmedia_t\t*cmedia;\t// Custom media\n  int\t\t\tfd;\t\t// Custom media file descriptor\n  cups_file_t\t\t*fp;\t\t// Custom media file\n  char\t\t\tfilename[1024],\t// Custom media filename\n\t\t\tline[256];\t// Line from file\n  int\t\t\ti;\t\t// Looping var\n\n\n  // Allocate memory as needed...\n  if ((cmedia = (lprint_cmedia_t *)data->extension) == NULL)\n  {\n    if ((cmedia = (lprint_cmedia_t *)calloc(1, sizeof(lprint_cmedia_t))) == NULL)\n      return (false);\n\n    data->extension = cmedia;\n    data->delete_cb = free_cmedia;\n  }\n\n  // Load any existing custom media sizes...\n  if ((fd = papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"r\")) < 0)\n    return (true);\n\n  if ((fp = cupsFileOpenFd(fd, \"r\")) == NULL)\n  {\n    close(fd);\n    return (true);\n  }\n\n  for (i = 0; i < data->num_source && cupsFileGets(fp, line, sizeof(line)); i ++)\n    papplCopyString(cmedia->custom_name[i], line, sizeof(cmedia->custom_name[i]));\n\n  cupsFileClose(fp);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 313,
    "end_line": 352,
    "code": "ol\t\t\t\t\t// O - `true` on success, `false` on error\nlprintMediaLoad(\n    pappl_printer_t        *printer,\t// I - Printer\n    pappl_pr_driver_data_t *data)\t// I - Driver data\n{\n  lprint_cmedia_t\t*cmedia;\t// Custom media\n  int\t\t\tfd;\t\t// Custom media file descriptor\n  cups_file_t\t\t*fp;\t\t// Custom media file\n  char\t\t\tfilename[1024],\t// Custom media filename\n\t\t\tline[256];\t// Line from file\n  int\t\t\ti;\t\t// Looping var\n\n\n  // Allocate memory as needed...\n  if ((cmedia = (lprint_cmedia_t *)data->extension) == NULL)\n  {\n    if ((cmedia = (lprint_cmedia_t *)calloc(1, sizeof(lprint_cmedia_t))) == NULL)\n      return (false);\n\n    data->extension = cmedia;\n    data->delete_cb = free_cmedia;\n  }\n\n  // Load any existing custom media sizes...\n  if ((fd = papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"r\")) < 0)\n    return (true);\n\n  if ((fp = cupsFileOpenFd(fd, \"r\")) == NULL)\n  {\n    close(fd);\n    return (true);\n  }\n\n  for (i = 0; i < data->num_source && cupsFileGets(fp, line, sizeof(line)); i ++)\n    papplCopyString(cmedia->custom_name[i], line, sizeof(cmedia->custom_name[i]));\n\n  cupsFileClose(fp);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 313,
    "end_line": 352,
    "code": "ol\t\t\t\t\t// O - `true` on success, `false` on error\nlprintMediaLoad(\n    pappl_printer_t        *printer,\t// I - Printer\n    pappl_pr_driver_data_t *data)\t// I - Driver data\n{\n  lprint_cmedia_t\t*cmedia;\t// Custom media\n  int\t\t\tfd;\t\t// Custom media file descriptor\n  cups_file_t\t\t*fp;\t\t// Custom media file\n  char\t\t\tfilename[1024],\t// Custom media filename\n\t\t\tline[256];\t// Line from file\n  int\t\t\ti;\t\t// Looping var\n\n\n  // Allocate memory as needed...\n  if ((cmedia = (lprint_cmedia_t *)data->extension) == NULL)\n  {\n    if ((cmedia = (lprint_cmedia_t *)calloc(1, sizeof(lprint_cmedia_t))) == NULL)\n      return (false);\n\n    data->extension = cmedia;\n    data->delete_cb = free_cmedia;\n  }\n\n  // Load any existing custom media sizes...\n  if ((fd = papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"r\")) < 0)\n    return (true);\n\n  if ((fp = cupsFileOpenFd(fd, \"r\")) == NULL)\n  {\n    close(fd);\n    return (true);\n  }\n\n  for (i = 0; i < data->num_source && cupsFileGets(fp, line, sizeof(line)); i ++)\n    papplCopyString(cmedia->custom_name[i], line, sizeof(cmedia->custom_name[i]));\n\n  cupsFileClose(fp);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 317,
    "end_line": 352,
    "code": "  lprint_cmedia_t\t*cmedia;\t// Custom media\n  int\t\t\tfd;\t\t// Custom media file descriptor\n  cups_file_t\t\t*fp;\t\t// Custom media file\n  char\t\t\tfilename[1024],\t// Custom media filename\n\t\t\tline[256];\t// Line from file\n  int\t\t\ti;\t\t// Looping var\n\n\n  // Allocate memory as needed...\n  if ((cmedia = (lprint_cmedia_t *)data->extension) == NULL)\n  {\n    if ((cmedia = (lprint_cmedia_t *)calloc(1, sizeof(lprint_cmedia_t))) == NULL)\n      return (false);\n\n    data->extension = cmedia;\n    data->delete_cb = free_cmedia;\n  }\n\n  // Load any existing custom media sizes...\n  if ((fd = papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"r\")) < 0)\n    return (true);\n\n  if ((fp = cupsFileOpenFd(fd, \"r\")) == NULL)\n  {\n    close(fd);\n    return (true);\n  }\n\n  for (i = 0; i < data->num_source && cupsFileGets(fp, line, sizeof(line)); i ++)\n    papplCopyString(cmedia->custom_name[i], line, sizeof(cmedia->custom_name[i]));\n\n  cupsFileClose(fp);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 317,
    "end_line": 352,
    "code": "  lprint_cmedia_t\t*cmedia;\t// Custom media\n  int\t\t\tfd;\t\t// Custom media file descriptor\n  cups_file_t\t\t*fp;\t\t// Custom media file\n  char\t\t\tfilename[1024],\t// Custom media filename\n\t\t\tline[256];\t// Line from file\n  int\t\t\ti;\t\t// Looping var\n\n\n  // Allocate memory as needed...\n  if ((cmedia = (lprint_cmedia_t *)data->extension) == NULL)\n  {\n    if ((cmedia = (lprint_cmedia_t *)calloc(1, sizeof(lprint_cmedia_t))) == NULL)\n      return (false);\n\n    data->extension = cmedia;\n    data->delete_cb = free_cmedia;\n  }\n\n  // Load any existing custom media sizes...\n  if ((fd = papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"r\")) < 0)\n    return (true);\n\n  if ((fp = cupsFileOpenFd(fd, \"r\")) == NULL)\n  {\n    close(fd);\n    return (true);\n  }\n\n  for (i = 0; i < data->num_source && cupsFileGets(fp, line, sizeof(line)); i ++)\n    papplCopyString(cmedia->custom_name[i], line, sizeof(cmedia->custom_name[i]));\n\n  cupsFileClose(fp);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 327,
    "end_line": 334,
    "code": " ((cmedia = (lprint_cmedia_t *)data->extension) == NULL)\n  {\n    if ((cmedia = (lprint_cmedia_t *)calloc(1, sizeof(lprint_cmedia_t))) == NULL)\n      return (false);\n\n    data->extension = cmedia;\n    data->delete_cb = free_cmedia;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 327,
    "end_line": 334,
    "code": " ((cmedia = (lprint_cmedia_t *)data->extension) == NULL)\n  {\n    if ((cmedia = (lprint_cmedia_t *)calloc(1, sizeof(lprint_cmedia_t))) == NULL)\n      return (false);\n\n    data->extension = cmedia;\n    data->delete_cb = free_cmedia;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 327,
    "end_line": 327,
    "code": "cmedia = (lprint_cmedia_t *)data->extension) == NULL)\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 327,
    "end_line": 327,
    "code": "media = (lprint_cmedia_t *)data->extension) == NULL)\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 327,
    "end_line": 327,
    "code": "media = (lprint_cmedia_t *)data->extension) =",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 327,
    "end_line": 327,
    "code": "edia = (lprint_cmedia_t *)data->extension) ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 328,
    "end_line": 334,
    "code": "    if ((cmedia = (lprint_cmedia_t *)calloc(1, sizeof(lprint_cmedia_t))) == NULL)\n      return (false);\n\n    data->extension = cmedia;\n    data->delete_cb = free_cmedia;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 328,
    "end_line": 334,
    "code": "    if ((cmedia = (lprint_cmedia_t *)calloc(1, sizeof(lprint_cmedia_t))) == NULL)\n      return (false);\n\n    data->extension = cmedia;\n    data->delete_cb = free_cmedia;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 332,
    "end_line": 332,
    "code": "ta->extension = cmedia;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 332,
    "end_line": 332,
    "code": "ta->extension = cmedia;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 333,
    "end_line": 333,
    "code": "ta->delete_cb = free_cmedia;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 333,
    "end_line": 333,
    "code": "ta->delete_cb = free_cmedia;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 346,
    "end_line": 347,
    "code": "r (i = 0; i < data->num_source && cupsFileGets(fp, line, sizeof(line)); i ++)\n    papplCopyString(cmedia->custom_name[i], line, sizeof(cmedia->custom_name[i]));\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 346,
    "end_line": 347,
    "code": "r (i = 0; i < data->num_source && cupsFileGets(fp, line, sizeof(line)); i ++)\n    papplCopyString(cmedia->custom_name[i], line, sizeof(cmedia->custom_name[i]));\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function",
    "start_line": 359,
    "end_line": 425,
    "name": null,
    "parent": null,
    "hierarchy": null,
    "code": "nst char *\t\t\t\t// O - Matching media size or `NULL` if none\nlprintMediaMatch(\n    pappl_printer_t *printer,\t\t// I - Printer\n    int             source,\t\t// I - \"media-source\" index (0-based)\n    int             width,\t\t// I - Width in hundredths of millimeters or `0` if unknown\n    int             length)\t\t// I - Length in hundredths of millimeters\n{\n  pappl_pr_driver_data_t pdata;\t\t// Printer driver data\n  lprint_cmedia_t\t*cmedia;\t// Custom media info\n  int\t\t\ti;\t\t// Looping var\n  pwg_media_t\t\t*pwg;\t\t// Current size info\n  const char\t\t*ret = NULL;\t// Return value\n\n\n  papplPrinterGetDriverData(printer, &pdata);\n\n  for (i = 0; i < pdata.num_media; i ++)\n  {\n    if ((!strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5)) && (strstr(pdata.media[i], \"_min_\") != NULL || strstr(pdata.media[i], \"_max_\") != NULL))\n      continue;\n\n    if ((pwg = pwgMediaForPWG(pdata.media[i])) == NULL)\n      continue;\n\n    if ((abs(pwg->width - width) <= 100 || !width) && (abs(pwg->length - length) <= 100 || !length))\n    {\n      if (!ret || !strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5))\n        ret = pdata.media[i];\n    }\n  }\n\n  if (!ret)\n  {\n    if (!pdata.extension)\n      lprintMediaLoad(printer, &pdata);\n\n    if ((cmedia = (lprint_cmedia_t *)pdata.extension) != NULL)\n    {\n      if (length == 0)\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"roll\", pdata.source[source], width, length, /*units*/NULL);\n      else\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"custom\", pdata.source[source], width, length, /*units*/NULL);\n\n      lprintMediaUpdate(printer, &pdata);\n      lprintMediaSave(printer, &pdata);\n\n      ret = cmedia->custom_name[source];\n    }\n  }\n\n  if (ret && strcmp(pdata.media_ready[source].size_name, ret) && (pwg = pwgMediaForPWG(ret)) != NULL)\n  {\n    // Ready media has changed...\n    papplCopyString(pdata.media_ready[source].size_name, ret, sizeof(pdata.media_ready[source].size_name));\n    pdata.media_ready[source].size_width  = pwg->width;\n    pdata.media_ready[source].size_length = pwg->length;\n\n    if (pwg->length == 0)\n      papplCopyString(pdata.media_ready[source].type, \"continuous\", sizeof(pdata.media_ready[source].type));\n    else\n      papplCopyString(pdata.media_ready[source].type, \"label\", sizeof(pdata.media_ready[source].type));\n\n    papplPrinterSetDriverData(printer, &pdata, NULL);\n  }\n\n  return (ret);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 359,
    "end_line": 425,
    "code": "nst char *\t\t\t\t// O - Matching media size or `NULL` if none\nlprintMediaMatch(\n    pappl_printer_t *printer,\t\t// I - Printer\n    int             source,\t\t// I - \"media-source\" index (0-based)\n    int             width,\t\t// I - Width in hundredths of millimeters or `0` if unknown\n    int             length)\t\t// I - Length in hundredths of millimeters\n{\n  pappl_pr_driver_data_t pdata;\t\t// Printer driver data\n  lprint_cmedia_t\t*cmedia;\t// Custom media info\n  int\t\t\ti;\t\t// Looping var\n  pwg_media_t\t\t*pwg;\t\t// Current size info\n  const char\t\t*ret = NULL;\t// Return value\n\n\n  papplPrinterGetDriverData(printer, &pdata);\n\n  for (i = 0; i < pdata.num_media; i ++)\n  {\n    if ((!strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5)) && (strstr(pdata.media[i], \"_min_\") != NULL || strstr(pdata.media[i], \"_max_\") != NULL))\n      continue;\n\n    if ((pwg = pwgMediaForPWG(pdata.media[i])) == NULL)\n      continue;\n\n    if ((abs(pwg->width - width) <= 100 || !width) && (abs(pwg->length - length) <= 100 || !length))\n    {\n      if (!ret || !strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5))\n        ret = pdata.media[i];\n    }\n  }\n\n  if (!ret)\n  {\n    if (!pdata.extension)\n      lprintMediaLoad(printer, &pdata);\n\n    if ((cmedia = (lprint_cmedia_t *)pdata.extension) != NULL)\n    {\n      if (length == 0)\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"roll\", pdata.source[source], width, length, /*units*/NULL);\n      else\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"custom\", pdata.source[source], width, length, /*units*/NULL);\n\n      lprintMediaUpdate(printer, &pdata);\n      lprintMediaSave(printer, &pdata);\n\n      ret = cmedia->custom_name[source];\n    }\n  }\n\n  if (ret && strcmp(pdata.media_ready[source].size_name, ret) && (pwg = pwgMediaForPWG(ret)) != NULL)\n  {\n    // Ready media has changed...\n    papplCopyString(pdata.media_ready[source].size_name, ret, sizeof(pdata.media_ready[source].size_name));\n    pdata.media_ready[source].size_width  = pwg->width;\n    pdata.media_ready[source].size_length = pwg->length;\n\n    if (pwg->length == 0)\n      papplCopyString(pdata.media_ready[source].type, \"continuous\", sizeof(pdata.media_ready[source].type));\n    else\n      papplCopyString(pdata.media_ready[source].type, \"label\", sizeof(pdata.media_ready[source].type));\n\n    papplPrinterSetDriverData(printer, &pdata, NULL);\n  }\n\n  return (ret);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 359,
    "end_line": 425,
    "code": "nst char *\t\t\t\t// O - Matching media size or `NULL` if none\nlprintMediaMatch(\n    pappl_printer_t *printer,\t\t// I - Printer\n    int             source,\t\t// I - \"media-source\" index (0-based)\n    int             width,\t\t// I - Width in hundredths of millimeters or `0` if unknown\n    int             length)\t\t// I - Length in hundredths of millimeters\n{\n  pappl_pr_driver_data_t pdata;\t\t// Printer driver data\n  lprint_cmedia_t\t*cmedia;\t// Custom media info\n  int\t\t\ti;\t\t// Looping var\n  pwg_media_t\t\t*pwg;\t\t// Current size info\n  const char\t\t*ret = NULL;\t// Return value\n\n\n  papplPrinterGetDriverData(printer, &pdata);\n\n  for (i = 0; i < pdata.num_media; i ++)\n  {\n    if ((!strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5)) && (strstr(pdata.media[i], \"_min_\") != NULL || strstr(pdata.media[i], \"_max_\") != NULL))\n      continue;\n\n    if ((pwg = pwgMediaForPWG(pdata.media[i])) == NULL)\n      continue;\n\n    if ((abs(pwg->width - width) <= 100 || !width) && (abs(pwg->length - length) <= 100 || !length))\n    {\n      if (!ret || !strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5))\n        ret = pdata.media[i];\n    }\n  }\n\n  if (!ret)\n  {\n    if (!pdata.extension)\n      lprintMediaLoad(printer, &pdata);\n\n    if ((cmedia = (lprint_cmedia_t *)pdata.extension) != NULL)\n    {\n      if (length == 0)\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"roll\", pdata.source[source], width, length, /*units*/NULL);\n      else\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"custom\", pdata.source[source], width, length, /*units*/NULL);\n\n      lprintMediaUpdate(printer, &pdata);\n      lprintMediaSave(printer, &pdata);\n\n      ret = cmedia->custom_name[source];\n    }\n  }\n\n  if (ret && strcmp(pdata.media_ready[source].size_name, ret) && (pwg = pwgMediaForPWG(ret)) != NULL)\n  {\n    // Ready media has changed...\n    papplCopyString(pdata.media_ready[source].size_name, ret, sizeof(pdata.media_ready[source].size_name));\n    pdata.media_ready[source].size_width  = pwg->width;\n    pdata.media_ready[source].size_length = pwg->length;\n\n    if (pwg->length == 0)\n      papplCopyString(pdata.media_ready[source].type, \"continuous\", sizeof(pdata.media_ready[source].type));\n    else\n      papplCopyString(pdata.media_ready[source].type, \"label\", sizeof(pdata.media_ready[source].type));\n\n    papplPrinterSetDriverData(printer, &pdata, NULL);\n  }\n\n  return (ret);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 365,
    "end_line": 425,
    "code": "  pappl_pr_driver_data_t pdata;\t\t// Printer driver data\n  lprint_cmedia_t\t*cmedia;\t// Custom media info\n  int\t\t\ti;\t\t// Looping var\n  pwg_media_t\t\t*pwg;\t\t// Current size info\n  const char\t\t*ret = NULL;\t// Return value\n\n\n  papplPrinterGetDriverData(printer, &pdata);\n\n  for (i = 0; i < pdata.num_media; i ++)\n  {\n    if ((!strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5)) && (strstr(pdata.media[i], \"_min_\") != NULL || strstr(pdata.media[i], \"_max_\") != NULL))\n      continue;\n\n    if ((pwg = pwgMediaForPWG(pdata.media[i])) == NULL)\n      continue;\n\n    if ((abs(pwg->width - width) <= 100 || !width) && (abs(pwg->length - length) <= 100 || !length))\n    {\n      if (!ret || !strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5))\n        ret = pdata.media[i];\n    }\n  }\n\n  if (!ret)\n  {\n    if (!pdata.extension)\n      lprintMediaLoad(printer, &pdata);\n\n    if ((cmedia = (lprint_cmedia_t *)pdata.extension) != NULL)\n    {\n      if (length == 0)\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"roll\", pdata.source[source], width, length, /*units*/NULL);\n      else\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"custom\", pdata.source[source], width, length, /*units*/NULL);\n\n      lprintMediaUpdate(printer, &pdata);\n      lprintMediaSave(printer, &pdata);\n\n      ret = cmedia->custom_name[source];\n    }\n  }\n\n  if (ret && strcmp(pdata.media_ready[source].size_name, ret) && (pwg = pwgMediaForPWG(ret)) != NULL)\n  {\n    // Ready media has changed...\n    papplCopyString(pdata.media_ready[source].size_name, ret, sizeof(pdata.media_ready[source].size_name));\n    pdata.media_ready[source].size_width  = pwg->width;\n    pdata.media_ready[source].size_length = pwg->length;\n\n    if (pwg->length == 0)\n      papplCopyString(pdata.media_ready[source].type, \"continuous\", sizeof(pdata.media_ready[source].type));\n    else\n      papplCopyString(pdata.media_ready[source].type, \"label\", sizeof(pdata.media_ready[source].type));\n\n    papplPrinterSetDriverData(printer, &pdata, NULL);\n  }\n\n  return (ret);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 365,
    "end_line": 425,
    "code": "  pappl_pr_driver_data_t pdata;\t\t// Printer driver data\n  lprint_cmedia_t\t*cmedia;\t// Custom media info\n  int\t\t\ti;\t\t// Looping var\n  pwg_media_t\t\t*pwg;\t\t// Current size info\n  const char\t\t*ret = NULL;\t// Return value\n\n\n  papplPrinterGetDriverData(printer, &pdata);\n\n  for (i = 0; i < pdata.num_media; i ++)\n  {\n    if ((!strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5)) && (strstr(pdata.media[i], \"_min_\") != NULL || strstr(pdata.media[i], \"_max_\") != NULL))\n      continue;\n\n    if ((pwg = pwgMediaForPWG(pdata.media[i])) == NULL)\n      continue;\n\n    if ((abs(pwg->width - width) <= 100 || !width) && (abs(pwg->length - length) <= 100 || !length))\n    {\n      if (!ret || !strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5))\n        ret = pdata.media[i];\n    }\n  }\n\n  if (!ret)\n  {\n    if (!pdata.extension)\n      lprintMediaLoad(printer, &pdata);\n\n    if ((cmedia = (lprint_cmedia_t *)pdata.extension) != NULL)\n    {\n      if (length == 0)\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"roll\", pdata.source[source], width, length, /*units*/NULL);\n      else\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"custom\", pdata.source[source], width, length, /*units*/NULL);\n\n      lprintMediaUpdate(printer, &pdata);\n      lprintMediaSave(printer, &pdata);\n\n      ret = cmedia->custom_name[source];\n    }\n  }\n\n  if (ret && strcmp(pdata.media_ready[source].size_name, ret) && (pwg = pwgMediaForPWG(ret)) != NULL)\n  {\n    // Ready media has changed...\n    papplCopyString(pdata.media_ready[source].size_name, ret, sizeof(pdata.media_ready[source].size_name));\n    pdata.media_ready[source].size_width  = pwg->width;\n    pdata.media_ready[source].size_length = pwg->length;\n\n    if (pwg->length == 0)\n      papplCopyString(pdata.media_ready[source].type, \"continuous\", sizeof(pdata.media_ready[source].type));\n    else\n      papplCopyString(pdata.media_ready[source].type, \"label\", sizeof(pdata.media_ready[source].type));\n\n    papplPrinterSetDriverData(printer, &pdata, NULL);\n  }\n\n  return (ret);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "global_variable",
    "start_line": 370,
    "end_line": 370,
    "code": "nst char\t\t*ret = NULL;\t/",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 375,
    "end_line": 388,
    "code": "r (i = 0; i < pdata.num_media; i ++)\n  {\n    if ((!strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5)) && (strstr(pdata.media[i], \"_min_\") != NULL || strstr(pdata.media[i], \"_max_\") != NULL))\n      continue;\n\n    if ((pwg = pwgMediaForPWG(pdata.media[i])) == NULL)\n      continue;\n\n    if ((abs(pwg->width - width) <= 100 || !width) && (abs(pwg->length - length) <= 100 || !length))\n    {\n      if (!ret || !strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5))\n        ret = pdata.media[i];\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 375,
    "end_line": 388,
    "code": "r (i = 0; i < pdata.num_media; i ++)\n  {\n    if ((!strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5)) && (strstr(pdata.media[i], \"_min_\") != NULL || strstr(pdata.media[i], \"_max_\") != NULL))\n      continue;\n\n    if ((pwg = pwgMediaForPWG(pdata.media[i])) == NULL)\n      continue;\n\n    if ((abs(pwg->width - width) <= 100 || !width) && (abs(pwg->length - length) <= 100 || !length))\n    {\n      if (!ret || !strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5))\n        ret = pdata.media[i];\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 376,
    "end_line": 388,
    "code": "    if ((!strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5)) && (strstr(pdata.media[i], \"_min_\") != NULL || strstr(pdata.media[i], \"_max_\") != NULL))\n      continue;\n\n    if ((pwg = pwgMediaForPWG(pdata.media[i])) == NULL)\n      continue;\n\n    if ((abs(pwg->width - width) <= 100 || !width) && (abs(pwg->length - length) <= 100 || !length))\n    {\n      if (!ret || !strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5))\n        ret = pdata.media[i];\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 376,
    "end_line": 388,
    "code": "    if ((!strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5)) && (strstr(pdata.media[i], \"_min_\") != NULL || strstr(pdata.media[i], \"_max_\") != NULL))\n      continue;\n\n    if ((pwg = pwgMediaForPWG(pdata.media[i])) == NULL)\n      continue;\n\n    if ((abs(pwg->width - width) <= 100 || !width) && (abs(pwg->length - length) <= 100 || !length))\n    {\n      if (!ret || !strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5))\n        ret = pdata.media[i];\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 377,
    "end_line": 378,
    "code": " ((!strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5)) && (strstr(pdata.media[i], \"_min_\") != NULL || strstr(pdata.media[i], \"_max_\") != NULL))\n      continue;\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 380,
    "end_line": 381,
    "code": " ((pwg = pwgMediaForPWG(pdata.media[i])) == NULL)\n      continue;\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 383,
    "end_line": 387,
    "code": " ((abs(pwg->width - width) <= 100 || !width) && (abs(pwg->length - length) <= 100 || !length))\n    {\n      if (!ret || !strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5))\n        ret = pdata.media[i];\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 383,
    "end_line": 387,
    "code": " ((abs(pwg->width - width) <= 100 || !width) && (abs(pwg->length - length) <= 100 || !length))\n    {\n      if (!ret || !strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5))\n        ret = pdata.media[i];\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 383,
    "end_line": 383,
    "code": "abs(pwg->width - width) <= 100 || !width) && (abs(pwg->length - length) <= 100 || !length))\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 383,
    "end_line": 383,
    "code": "bs(pwg->width - width) <= 100 || !width) && (abs(pwg->length - length) <= 100 || !length))\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 383,
    "end_line": 383,
    "code": "bs(pwg->width - width) <= 100 || !width) &",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 383,
    "end_line": 383,
    "code": "s(pwg->width - width) <= 100 || !width) ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 383,
    "end_line": 383,
    "code": "s(pwg->width - width) <= 100 |",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 383,
    "end_line": 383,
    "code": "bs(pwg->length - length) <= 100 || !length))\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 383,
    "end_line": 383,
    "code": "s(pwg->length - length) <= 100 || !length))",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 383,
    "end_line": 383,
    "code": "s(pwg->length - length) <= 100 |",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 384,
    "end_line": 387,
    "code": "      if (!ret || !strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5))\n        ret = pdata.media[i];\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 385,
    "end_line": 386,
    "code": " (!ret || !strncmp(pdata.media[i], \"custom_\", 7) || !strncmp(pdata.media[i], \"roll_\", 5))\n        ret = pdata.media[i];\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 386,
    "end_line": 386,
    "code": "t = pdata.media[i];\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 386,
    "end_line": 386,
    "code": "t = pdata.media[i];\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 390,
    "end_line": 407,
    "code": " (!ret)\n  {\n    if (!pdata.extension)\n      lprintMediaLoad(printer, &pdata);\n\n    if ((cmedia = (lprint_cmedia_t *)pdata.extension) != NULL)\n    {\n      if (length == 0)\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"roll\", pdata.source[source], width, length, /*units*/NULL);\n      else\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"custom\", pdata.source[source], width, length, /*units*/NULL);\n\n      lprintMediaUpdate(printer, &pdata);\n      lprintMediaSave(printer, &pdata);\n\n      ret = cmedia->custom_name[source];\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 390,
    "end_line": 407,
    "code": " (!ret)\n  {\n    if (!pdata.extension)\n      lprintMediaLoad(printer, &pdata);\n\n    if ((cmedia = (lprint_cmedia_t *)pdata.extension) != NULL)\n    {\n      if (length == 0)\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"roll\", pdata.source[source], width, length, /*units*/NULL);\n      else\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"custom\", pdata.source[source], width, length, /*units*/NULL);\n\n      lprintMediaUpdate(printer, &pdata);\n      lprintMediaSave(printer, &pdata);\n\n      ret = cmedia->custom_name[source];\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 391,
    "end_line": 407,
    "code": "    if (!pdata.extension)\n      lprintMediaLoad(printer, &pdata);\n\n    if ((cmedia = (lprint_cmedia_t *)pdata.extension) != NULL)\n    {\n      if (length == 0)\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"roll\", pdata.source[source], width, length, /*units*/NULL);\n      else\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"custom\", pdata.source[source], width, length, /*units*/NULL);\n\n      lprintMediaUpdate(printer, &pdata);\n      lprintMediaSave(printer, &pdata);\n\n      ret = cmedia->custom_name[source];\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 391,
    "end_line": 407,
    "code": "    if (!pdata.extension)\n      lprintMediaLoad(printer, &pdata);\n\n    if ((cmedia = (lprint_cmedia_t *)pdata.extension) != NULL)\n    {\n      if (length == 0)\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"roll\", pdata.source[source], width, length, /*units*/NULL);\n      else\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"custom\", pdata.source[source], width, length, /*units*/NULL);\n\n      lprintMediaUpdate(printer, &pdata);\n      lprintMediaSave(printer, &pdata);\n\n      ret = cmedia->custom_name[source];\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 395,
    "end_line": 406,
    "code": " ((cmedia = (lprint_cmedia_t *)pdata.extension) != NULL)\n    {\n      if (length == 0)\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"roll\", pdata.source[source], width, length, /*units*/NULL);\n      else\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"custom\", pdata.source[source], width, length, /*units*/NULL);\n\n      lprintMediaUpdate(printer, &pdata);\n      lprintMediaSave(printer, &pdata);\n\n      ret = cmedia->custom_name[source];\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 395,
    "end_line": 406,
    "code": " ((cmedia = (lprint_cmedia_t *)pdata.extension) != NULL)\n    {\n      if (length == 0)\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"roll\", pdata.source[source], width, length, /*units*/NULL);\n      else\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"custom\", pdata.source[source], width, length, /*units*/NULL);\n\n      lprintMediaUpdate(printer, &pdata);\n      lprintMediaSave(printer, &pdata);\n\n      ret = cmedia->custom_name[source];\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 396,
    "end_line": 406,
    "code": "      if (length == 0)\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"roll\", pdata.source[source], width, length, /*units*/NULL);\n      else\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"custom\", pdata.source[source], width, length, /*units*/NULL);\n\n      lprintMediaUpdate(printer, &pdata);\n      lprintMediaSave(printer, &pdata);\n\n      ret = cmedia->custom_name[source];\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 396,
    "end_line": 406,
    "code": "      if (length == 0)\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"roll\", pdata.source[source], width, length, /*units*/NULL);\n      else\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"custom\", pdata.source[source], width, length, /*units*/NULL);\n\n      lprintMediaUpdate(printer, &pdata);\n      lprintMediaSave(printer, &pdata);\n\n      ret = cmedia->custom_name[source];\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 397,
    "end_line": 400,
    "code": " (length == 0)\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"roll\", pdata.source[source], width, length, /*units*/NULL);\n      else\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"custom\", pdata.source[source], width, length, /*units*/NULL);\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 397,
    "end_line": 400,
    "code": " (length == 0)\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"roll\", pdata.source[source], width, length, /*units*/NULL);\n      else\n        pwgFormatSizeName(cmedia->custom_name[source], sizeof(cmedia->custom_name[source]), \"custom\", pdata.source[source], width, length, /*units*/NULL);\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 405,
    "end_line": 405,
    "code": "t = cmedia->custom_name[source];\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 405,
    "end_line": 405,
    "code": "t = cmedia->custom_name[source];\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 409,
    "end_line": 422,
    "code": " (ret && strcmp(pdata.media_ready[source].size_name, ret) && (pwg = pwgMediaForPWG(ret)) != NULL)\n  {\n    // Ready media has changed...\n    papplCopyString(pdata.media_ready[source].size_name, ret, sizeof(pdata.media_ready[source].size_name));\n    pdata.media_ready[source].size_width  = pwg->width;\n    pdata.media_ready[source].size_length = pwg->length;\n\n    if (pwg->length == 0)\n      papplCopyString(pdata.media_ready[source].type, \"continuous\", sizeof(pdata.media_ready[source].type));\n    else\n      papplCopyString(pdata.media_ready[source].type, \"label\", sizeof(pdata.media_ready[source].type));\n\n    papplPrinterSetDriverData(printer, &pdata, NULL);\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 409,
    "end_line": 422,
    "code": " (ret && strcmp(pdata.media_ready[source].size_name, ret) && (pwg = pwgMediaForPWG(ret)) != NULL)\n  {\n    // Ready media has changed...\n    papplCopyString(pdata.media_ready[source].size_name, ret, sizeof(pdata.media_ready[source].size_name));\n    pdata.media_ready[source].size_width  = pwg->width;\n    pdata.media_ready[source].size_length = pwg->length;\n\n    if (pwg->length == 0)\n      papplCopyString(pdata.media_ready[source].type, \"continuous\", sizeof(pdata.media_ready[source].type));\n    else\n      papplCopyString(pdata.media_ready[source].type, \"label\", sizeof(pdata.media_ready[source].type));\n\n    papplPrinterSetDriverData(printer, &pdata, NULL);\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 410,
    "end_line": 422,
    "code": "    // Ready media has changed...\n    papplCopyString(pdata.media_ready[source].size_name, ret, sizeof(pdata.media_ready[source].size_name));\n    pdata.media_ready[source].size_width  = pwg->width;\n    pdata.media_ready[source].size_length = pwg->length;\n\n    if (pwg->length == 0)\n      papplCopyString(pdata.media_ready[source].type, \"continuous\", sizeof(pdata.media_ready[source].type));\n    else\n      papplCopyString(pdata.media_ready[source].type, \"label\", sizeof(pdata.media_ready[source].type));\n\n    papplPrinterSetDriverData(printer, &pdata, NULL);\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 410,
    "end_line": 422,
    "code": "    // Ready media has changed...\n    papplCopyString(pdata.media_ready[source].size_name, ret, sizeof(pdata.media_ready[source].size_name));\n    pdata.media_ready[source].size_width  = pwg->width;\n    pdata.media_ready[source].size_length = pwg->length;\n\n    if (pwg->length == 0)\n      papplCopyString(pdata.media_ready[source].type, \"continuous\", sizeof(pdata.media_ready[source].type));\n    else\n      papplCopyString(pdata.media_ready[source].type, \"label\", sizeof(pdata.media_ready[source].type));\n\n    papplPrinterSetDriverData(printer, &pdata, NULL);\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 413,
    "end_line": 413,
    "code": "ata.media_ready[source].size_width  = pwg->width;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 413,
    "end_line": 413,
    "code": "ata.media_ready[source].size_width  = pwg->width;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 414,
    "end_line": 414,
    "code": "ata.media_ready[source].size_length = pwg->length;\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 414,
    "end_line": 414,
    "code": "ata.media_ready[source].size_length = pwg->length;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 416,
    "end_line": 419,
    "code": " (pwg->length == 0)\n      papplCopyString(pdata.media_ready[source].type, \"continuous\", sizeof(pdata.media_ready[source].type));\n    else\n      papplCopyString(pdata.media_ready[source].type, \"label\", sizeof(pdata.media_ready[source].type));\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 416,
    "end_line": 419,
    "code": " (pwg->length == 0)\n      papplCopyString(pdata.media_ready[source].type, \"continuous\", sizeof(pdata.media_ready[source].type));\n    else\n      papplCopyString(pdata.media_ready[source].type, \"label\", sizeof(pdata.media_ready[source].type));\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function",
    "start_line": 432,
    "end_line": 468,
    "name": "lprintMediaSave",
    "parent": null,
    "hierarchy": "lprintMediaSave",
    "code": "ol\t\t\t\t\t// O - `true` on success, `false` on error\nlprintMediaSave(\n    pappl_printer_t        *printer,\t// I - Printer\n    pappl_pr_driver_data_t *data)\t// I - Driver data\n{\n  lprint_cmedia_t\t*cmedia;\t// Custom media\n  int\t\t\ti,\t\t// Looping var\n\t\t\tfd;\t\t// Custom media file descriptor\n  cups_file_t\t\t*fp;\t\t// Custom media file\n  char\t\t\tfilename[1024];\t// Custom media filename\n\n\n  // Get the custom media...\n  if ((cmedia = (lprint_cmedia_t *)data->extension) == NULL)\n  {\n    // No custom media, delete any existing file...\n    papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"x\");\n    return (true);\n  }\n\n  // Save custom media sizes...\n  if ((fd = papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"w\")) < 0)\n    return (true);\n\n  if ((fp = cupsFileOpenFd(fd, \"w\")) == NULL)\n  {\n    close(fd);\n    return (true);\n  }\n\n  for (i = 0; i < data->num_source; i ++)\n    cupsFilePrintf(fp, \"%s\\n\", cmedia->custom_name[i]);\n\n  cupsFileClose(fp);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 432,
    "end_line": 468,
    "code": "ol\t\t\t\t\t// O - `true` on success, `false` on error\nlprintMediaSave(\n    pappl_printer_t        *printer,\t// I - Printer\n    pappl_pr_driver_data_t *data)\t// I - Driver data\n{\n  lprint_cmedia_t\t*cmedia;\t// Custom media\n  int\t\t\ti,\t\t// Looping var\n\t\t\tfd;\t\t// Custom media file descriptor\n  cups_file_t\t\t*fp;\t\t// Custom media file\n  char\t\t\tfilename[1024];\t// Custom media filename\n\n\n  // Get the custom media...\n  if ((cmedia = (lprint_cmedia_t *)data->extension) == NULL)\n  {\n    // No custom media, delete any existing file...\n    papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"x\");\n    return (true);\n  }\n\n  // Save custom media sizes...\n  if ((fd = papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"w\")) < 0)\n    return (true);\n\n  if ((fp = cupsFileOpenFd(fd, \"w\")) == NULL)\n  {\n    close(fd);\n    return (true);\n  }\n\n  for (i = 0; i < data->num_source; i ++)\n    cupsFilePrintf(fp, \"%s\\n\", cmedia->custom_name[i]);\n\n  cupsFileClose(fp);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 432,
    "end_line": 468,
    "code": "ol\t\t\t\t\t// O - `true` on success, `false` on error\nlprintMediaSave(\n    pappl_printer_t        *printer,\t// I - Printer\n    pappl_pr_driver_data_t *data)\t// I - Driver data\n{\n  lprint_cmedia_t\t*cmedia;\t// Custom media\n  int\t\t\ti,\t\t// Looping var\n\t\t\tfd;\t\t// Custom media file descriptor\n  cups_file_t\t\t*fp;\t\t// Custom media file\n  char\t\t\tfilename[1024];\t// Custom media filename\n\n\n  // Get the custom media...\n  if ((cmedia = (lprint_cmedia_t *)data->extension) == NULL)\n  {\n    // No custom media, delete any existing file...\n    papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"x\");\n    return (true);\n  }\n\n  // Save custom media sizes...\n  if ((fd = papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"w\")) < 0)\n    return (true);\n\n  if ((fp = cupsFileOpenFd(fd, \"w\")) == NULL)\n  {\n    close(fd);\n    return (true);\n  }\n\n  for (i = 0; i < data->num_source; i ++)\n    cupsFilePrintf(fp, \"%s\\n\", cmedia->custom_name[i]);\n\n  cupsFileClose(fp);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 436,
    "end_line": 468,
    "code": "  lprint_cmedia_t\t*cmedia;\t// Custom media\n  int\t\t\ti,\t\t// Looping var\n\t\t\tfd;\t\t// Custom media file descriptor\n  cups_file_t\t\t*fp;\t\t// Custom media file\n  char\t\t\tfilename[1024];\t// Custom media filename\n\n\n  // Get the custom media...\n  if ((cmedia = (lprint_cmedia_t *)data->extension) == NULL)\n  {\n    // No custom media, delete any existing file...\n    papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"x\");\n    return (true);\n  }\n\n  // Save custom media sizes...\n  if ((fd = papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"w\")) < 0)\n    return (true);\n\n  if ((fp = cupsFileOpenFd(fd, \"w\")) == NULL)\n  {\n    close(fd);\n    return (true);\n  }\n\n  for (i = 0; i < data->num_source; i ++)\n    cupsFilePrintf(fp, \"%s\\n\", cmedia->custom_name[i]);\n\n  cupsFileClose(fp);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 436,
    "end_line": 468,
    "code": "  lprint_cmedia_t\t*cmedia;\t// Custom media\n  int\t\t\ti,\t\t// Looping var\n\t\t\tfd;\t\t// Custom media file descriptor\n  cups_file_t\t\t*fp;\t\t// Custom media file\n  char\t\t\tfilename[1024];\t// Custom media filename\n\n\n  // Get the custom media...\n  if ((cmedia = (lprint_cmedia_t *)data->extension) == NULL)\n  {\n    // No custom media, delete any existing file...\n    papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"x\");\n    return (true);\n  }\n\n  // Save custom media sizes...\n  if ((fd = papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"w\")) < 0)\n    return (true);\n\n  if ((fp = cupsFileOpenFd(fd, \"w\")) == NULL)\n  {\n    close(fd);\n    return (true);\n  }\n\n  for (i = 0; i < data->num_source; i ++)\n    cupsFilePrintf(fp, \"%s\\n\", cmedia->custom_name[i]);\n\n  cupsFileClose(fp);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 445,
    "end_line": 450,
    "code": " ((cmedia = (lprint_cmedia_t *)data->extension) == NULL)\n  {\n    // No custom media, delete any existing file...\n    papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"x\");\n    return (true);\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 445,
    "end_line": 450,
    "code": " ((cmedia = (lprint_cmedia_t *)data->extension) == NULL)\n  {\n    // No custom media, delete any existing file...\n    papplPrinterOpenFile(printer, filename, sizeof(filename), /*directory*/NULL, \"custom-media\", \"txt\", \"x\");\n    return (true);\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 445,
    "end_line": 445,
    "code": "cmedia = (lprint_cmedia_t *)data->extension) == NULL)\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 445,
    "end_line": 445,
    "code": "media = (lprint_cmedia_t *)data->extension) == NULL)\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 445,
    "end_line": 445,
    "code": "media = (lprint_cmedia_t *)data->extension) =",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 445,
    "end_line": 445,
    "code": "edia = (lprint_cmedia_t *)data->extension) ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 462,
    "end_line": 463,
    "code": "r (i = 0; i < data->num_source; i ++)\n    cupsFilePrintf(fp, \"%s\\n\", cmedia->custom_name[i]);\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 462,
    "end_line": 463,
    "code": "r (i = 0; i < data->num_source; i ++)\n    cupsFilePrintf(fp, \"%s\\n\", cmedia->custom_name[i]);\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function",
    "start_line": 475,
    "end_line": 655,
    "name": "lprintMediaUI",
    "parent": null,
    "hierarchy": "lprintMediaUI",
    "code": "ol\t\t\t\t\t// O - `true` on success, `false` on failure\nlprintMediaUI(\n    pappl_client_t  *client,\t\t// I - Client\n    pappl_printer_t *printer)\t\t// I - Printer\n{\n  int\t\t\ti;\t\t// Looping var\n  pappl_pr_driver_data_t data;\t\t// Driver data\n  lprint_cmedia_t\t*cmedia;\t// Custom label sizes, if any\n  char\t\t\tname[128],\t// Form variable name\n\t\t\ttext[256];\t// Localized text\n  const char\t\t*status = NULL;\t// Status message, if any\n\n\n  LPRINT_DEBUG(\"lprintMediaUI(client=%p, printer=%p(%s))\\n\", client, printer, printer ? papplPrinterGetName(printer) : \"null\");\n\n  // Only allow access as appropriate...\n  if (!papplClientHTMLAuthorize(client))\n    return (true);\n\n  // Get the driver data...\n  papplPrinterGetDriverData(printer, &data);\n\n  LPRINT_DEBUG(\"lprintMediaUI: data.extension=%p\\n\", data.extension);\n  if (!data.extension)\n  {\n    lprintMediaLoad(printer, &data);\n    LPRINT_DEBUG(\"lprintMediaUI: AFTER data.extension=%p\\n\", data.extension);\n  }\n  cmedia = (lprint_cmedia_t *)data.extension;\n\n  if (papplClientGetMethod(client) == HTTP_STATE_POST)\n  {\n    int\t\t\tnum_form = 0;\t// Number of form variable\n    cups_option_t\t*form = NULL;\t// Form variables\n\n    if ((num_form = papplClientGetForm(client, &form)) == 0)\n    {\n      status = papplClientGetLocString(client, \"Invalid form data.\");\n    }\n    else if (!papplClientIsValidForm(client, num_form, form))\n    {\n      status = papplClientGetLocString(client, \"Invalid form submission.\");\n    }\n    else\n    {\n      bool\t\tchanged = false;// Did the custom media list change?\n      pwg_media_t\t*pwg = NULL;\t// PWG media info\n      pappl_media_col_t\t*ready;\t\t// Current ready media\n      const char\t*value,\t\t// Value of form variable\n\t\t\t*custom_width,\t// Custom media width\n\t\t\t*custom_length,\t// Custom media length\n\t\t\t*custom_units;\t// Custom media units\n\n      memset(data.media_ready, 0, sizeof(data.media_ready));\n      for (i = 0, ready = data.media_ready; i < data.num_source; i ++, ready ++)\n      {\n        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n      if (changed)\n      {\n\t// Rebuild media size list and save...\n\tlprintMediaUpdate(printer, &data);\n\tpapplPrinterSetDriverData(printer, &data, NULL);\n\tlprintMediaSave(printer, &data);\n      }\n\n      papplPrinterSetReadyMedia(printer, data.num_source, data.media_ready);\n\n      status = \"Changes saved.\";\n    }\n\n    cupsFreeOptions(num_form, form);\n  }\n\n  papplClientHTMLPrinterHeader(client, printer, \"Media\", 0, NULL, NULL);\n  if (status)\n    papplClientHTMLPrintf(client, \"<div class=\\\"banner\\\">%s</div>\\n\", status);\n\n  papplClientHTMLStartForm(client, papplClientGetURI(client), false);\n\n  papplClientHTMLPuts(client,\n\t\t      \"          <table class=\\\"form\\\">\\n\"\n\t\t      \"            <tbody>\\n\");\n\n  for (i = 0; i < data.num_source; i ++)\n  {\n    snprintf(name, sizeof(name), \"ready%d\", i);\n    media_chooser(client, &data, localize_keyword(client, \"media-source\", data.source[i], text, sizeof(text)), name, data.media_ready + i);\n  }\n\n  papplClientHTMLPrintf(client,\n\t\t\t\"              <tr><th></th><td><input type=\\\"submit\\\" value=\\\"%s\\\"></td></tr>\\n\"\n\t\t\t\"            </tbody>\\n\"\n\t\t\t\"          </table>\"\n\t\t\t\"        </form>\\n\"\n\t\t\t\"        <script>function show_hide_custom(name) {\\n\"\n\t\t        \"  let selelem = document.forms['form'][name + '-size'];\\n\"\n\t\t        \"  let divelem = document.getElementById(name + '-custom');\\n\"\n\t\t        \"  if (selelem.selectedIndex == 0)\\n\"\n\t\t        \"    divelem.style = 'display: inline-block;';\\n\"\n\t\t        \"  else\\n\"\n\t\t        \"    divelem.style = 'display: none;';\\n\"\n\t\t\t\"}</script>\\n\", papplClientGetLocString(client, \"Save Changes\"));\n\n  papplClientHTMLPrinterFooter(client);\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 475,
    "end_line": 655,
    "code": "ol\t\t\t\t\t// O - `true` on success, `false` on failure\nlprintMediaUI(\n    pappl_client_t  *client,\t\t// I - Client\n    pappl_printer_t *printer)\t\t// I - Printer\n{\n  int\t\t\ti;\t\t// Looping var\n  pappl_pr_driver_data_t data;\t\t// Driver data\n  lprint_cmedia_t\t*cmedia;\t// Custom label sizes, if any\n  char\t\t\tname[128],\t// Form variable name\n\t\t\ttext[256];\t// Localized text\n  const char\t\t*status = NULL;\t// Status message, if any\n\n\n  LPRINT_DEBUG(\"lprintMediaUI(client=%p, printer=%p(%s))\\n\", client, printer, printer ? papplPrinterGetName(printer) : \"null\");\n\n  // Only allow access as appropriate...\n  if (!papplClientHTMLAuthorize(client))\n    return (true);\n\n  // Get the driver data...\n  papplPrinterGetDriverData(printer, &data);\n\n  LPRINT_DEBUG(\"lprintMediaUI: data.extension=%p\\n\", data.extension);\n  if (!data.extension)\n  {\n    lprintMediaLoad(printer, &data);\n    LPRINT_DEBUG(\"lprintMediaUI: AFTER data.extension=%p\\n\", data.extension);\n  }\n  cmedia = (lprint_cmedia_t *)data.extension;\n\n  if (papplClientGetMethod(client) == HTTP_STATE_POST)\n  {\n    int\t\t\tnum_form = 0;\t// Number of form variable\n    cups_option_t\t*form = NULL;\t// Form variables\n\n    if ((num_form = papplClientGetForm(client, &form)) == 0)\n    {\n      status = papplClientGetLocString(client, \"Invalid form data.\");\n    }\n    else if (!papplClientIsValidForm(client, num_form, form))\n    {\n      status = papplClientGetLocString(client, \"Invalid form submission.\");\n    }\n    else\n    {\n      bool\t\tchanged = false;// Did the custom media list change?\n      pwg_media_t\t*pwg = NULL;\t// PWG media info\n      pappl_media_col_t\t*ready;\t\t// Current ready media\n      const char\t*value,\t\t// Value of form variable\n\t\t\t*custom_width,\t// Custom media width\n\t\t\t*custom_length,\t// Custom media length\n\t\t\t*custom_units;\t// Custom media units\n\n      memset(data.media_ready, 0, sizeof(data.media_ready));\n      for (i = 0, ready = data.media_ready; i < data.num_source; i ++, ready ++)\n      {\n        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n      if (changed)\n      {\n\t// Rebuild media size list and save...\n\tlprintMediaUpdate(printer, &data);\n\tpapplPrinterSetDriverData(printer, &data, NULL);\n\tlprintMediaSave(printer, &data);\n      }\n\n      papplPrinterSetReadyMedia(printer, data.num_source, data.media_ready);\n\n      status = \"Changes saved.\";\n    }\n\n    cupsFreeOptions(num_form, form);\n  }\n\n  papplClientHTMLPrinterHeader(client, printer, \"Media\", 0, NULL, NULL);\n  if (status)\n    papplClientHTMLPrintf(client, \"<div class=\\\"banner\\\">%s</div>\\n\", status);\n\n  papplClientHTMLStartForm(client, papplClientGetURI(client), false);\n\n  papplClientHTMLPuts(client,\n\t\t      \"          <table class=\\\"form\\\">\\n\"\n\t\t      \"            <tbody>\\n\");\n\n  for (i = 0; i < data.num_source; i ++)\n  {\n    snprintf(name, sizeof(name), \"ready%d\", i);\n    media_chooser(client, &data, localize_keyword(client, \"media-source\", data.source[i], text, sizeof(text)), name, data.media_ready + i);\n  }\n\n  papplClientHTMLPrintf(client,\n\t\t\t\"              <tr><th></th><td><input type=\\\"submit\\\" value=\\\"%s\\\"></td></tr>\\n\"\n\t\t\t\"            </tbody>\\n\"\n\t\t\t\"          </table>\"\n\t\t\t\"        </form>\\n\"\n\t\t\t\"        <script>function show_hide_custom(name) {\\n\"\n\t\t        \"  let selelem = document.forms['form'][name + '-size'];\\n\"\n\t\t        \"  let divelem = document.getElementById(name + '-custom');\\n\"\n\t\t        \"  if (selelem.selectedIndex == 0)\\n\"\n\t\t        \"    divelem.style = 'display: inline-block;';\\n\"\n\t\t        \"  else\\n\"\n\t\t        \"    divelem.style = 'display: none;';\\n\"\n\t\t\t\"}</script>\\n\", papplClientGetLocString(client, \"Save Changes\"));\n\n  papplClientHTMLPrinterFooter(client);\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 475,
    "end_line": 655,
    "code": "ol\t\t\t\t\t// O - `true` on success, `false` on failure\nlprintMediaUI(\n    pappl_client_t  *client,\t\t// I - Client\n    pappl_printer_t *printer)\t\t// I - Printer\n{\n  int\t\t\ti;\t\t// Looping var\n  pappl_pr_driver_data_t data;\t\t// Driver data\n  lprint_cmedia_t\t*cmedia;\t// Custom label sizes, if any\n  char\t\t\tname[128],\t// Form variable name\n\t\t\ttext[256];\t// Localized text\n  const char\t\t*status = NULL;\t// Status message, if any\n\n\n  LPRINT_DEBUG(\"lprintMediaUI(client=%p, printer=%p(%s))\\n\", client, printer, printer ? papplPrinterGetName(printer) : \"null\");\n\n  // Only allow access as appropriate...\n  if (!papplClientHTMLAuthorize(client))\n    return (true);\n\n  // Get the driver data...\n  papplPrinterGetDriverData(printer, &data);\n\n  LPRINT_DEBUG(\"lprintMediaUI: data.extension=%p\\n\", data.extension);\n  if (!data.extension)\n  {\n    lprintMediaLoad(printer, &data);\n    LPRINT_DEBUG(\"lprintMediaUI: AFTER data.extension=%p\\n\", data.extension);\n  }\n  cmedia = (lprint_cmedia_t *)data.extension;\n\n  if (papplClientGetMethod(client) == HTTP_STATE_POST)\n  {\n    int\t\t\tnum_form = 0;\t// Number of form variable\n    cups_option_t\t*form = NULL;\t// Form variables\n\n    if ((num_form = papplClientGetForm(client, &form)) == 0)\n    {\n      status = papplClientGetLocString(client, \"Invalid form data.\");\n    }\n    else if (!papplClientIsValidForm(client, num_form, form))\n    {\n      status = papplClientGetLocString(client, \"Invalid form submission.\");\n    }\n    else\n    {\n      bool\t\tchanged = false;// Did the custom media list change?\n      pwg_media_t\t*pwg = NULL;\t// PWG media info\n      pappl_media_col_t\t*ready;\t\t// Current ready media\n      const char\t*value,\t\t// Value of form variable\n\t\t\t*custom_width,\t// Custom media width\n\t\t\t*custom_length,\t// Custom media length\n\t\t\t*custom_units;\t// Custom media units\n\n      memset(data.media_ready, 0, sizeof(data.media_ready));\n      for (i = 0, ready = data.media_ready; i < data.num_source; i ++, ready ++)\n      {\n        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n      if (changed)\n      {\n\t// Rebuild media size list and save...\n\tlprintMediaUpdate(printer, &data);\n\tpapplPrinterSetDriverData(printer, &data, NULL);\n\tlprintMediaSave(printer, &data);\n      }\n\n      papplPrinterSetReadyMedia(printer, data.num_source, data.media_ready);\n\n      status = \"Changes saved.\";\n    }\n\n    cupsFreeOptions(num_form, form);\n  }\n\n  papplClientHTMLPrinterHeader(client, printer, \"Media\", 0, NULL, NULL);\n  if (status)\n    papplClientHTMLPrintf(client, \"<div class=\\\"banner\\\">%s</div>\\n\", status);\n\n  papplClientHTMLStartForm(client, papplClientGetURI(client), false);\n\n  papplClientHTMLPuts(client,\n\t\t      \"          <table class=\\\"form\\\">\\n\"\n\t\t      \"            <tbody>\\n\");\n\n  for (i = 0; i < data.num_source; i ++)\n  {\n    snprintf(name, sizeof(name), \"ready%d\", i);\n    media_chooser(client, &data, localize_keyword(client, \"media-source\", data.source[i], text, sizeof(text)), name, data.media_ready + i);\n  }\n\n  papplClientHTMLPrintf(client,\n\t\t\t\"              <tr><th></th><td><input type=\\\"submit\\\" value=\\\"%s\\\"></td></tr>\\n\"\n\t\t\t\"            </tbody>\\n\"\n\t\t\t\"          </table>\"\n\t\t\t\"        </form>\\n\"\n\t\t\t\"        <script>function show_hide_custom(name) {\\n\"\n\t\t        \"  let selelem = document.forms['form'][name + '-size'];\\n\"\n\t\t        \"  let divelem = document.getElementById(name + '-custom');\\n\"\n\t\t        \"  if (selelem.selectedIndex == 0)\\n\"\n\t\t        \"    divelem.style = 'display: inline-block;';\\n\"\n\t\t        \"  else\\n\"\n\t\t        \"    divelem.style = 'display: none;';\\n\"\n\t\t\t\"}</script>\\n\", papplClientGetLocString(client, \"Save Changes\"));\n\n  papplClientHTMLPrinterFooter(client);\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 479,
    "end_line": 655,
    "code": "  int\t\t\ti;\t\t// Looping var\n  pappl_pr_driver_data_t data;\t\t// Driver data\n  lprint_cmedia_t\t*cmedia;\t// Custom label sizes, if any\n  char\t\t\tname[128],\t// Form variable name\n\t\t\ttext[256];\t// Localized text\n  const char\t\t*status = NULL;\t// Status message, if any\n\n\n  LPRINT_DEBUG(\"lprintMediaUI(client=%p, printer=%p(%s))\\n\", client, printer, printer ? papplPrinterGetName(printer) : \"null\");\n\n  // Only allow access as appropriate...\n  if (!papplClientHTMLAuthorize(client))\n    return (true);\n\n  // Get the driver data...\n  papplPrinterGetDriverData(printer, &data);\n\n  LPRINT_DEBUG(\"lprintMediaUI: data.extension=%p\\n\", data.extension);\n  if (!data.extension)\n  {\n    lprintMediaLoad(printer, &data);\n    LPRINT_DEBUG(\"lprintMediaUI: AFTER data.extension=%p\\n\", data.extension);\n  }\n  cmedia = (lprint_cmedia_t *)data.extension;\n\n  if (papplClientGetMethod(client) == HTTP_STATE_POST)\n  {\n    int\t\t\tnum_form = 0;\t// Number of form variable\n    cups_option_t\t*form = NULL;\t// Form variables\n\n    if ((num_form = papplClientGetForm(client, &form)) == 0)\n    {\n      status = papplClientGetLocString(client, \"Invalid form data.\");\n    }\n    else if (!papplClientIsValidForm(client, num_form, form))\n    {\n      status = papplClientGetLocString(client, \"Invalid form submission.\");\n    }\n    else\n    {\n      bool\t\tchanged = false;// Did the custom media list change?\n      pwg_media_t\t*pwg = NULL;\t// PWG media info\n      pappl_media_col_t\t*ready;\t\t// Current ready media\n      const char\t*value,\t\t// Value of form variable\n\t\t\t*custom_width,\t// Custom media width\n\t\t\t*custom_length,\t// Custom media length\n\t\t\t*custom_units;\t// Custom media units\n\n      memset(data.media_ready, 0, sizeof(data.media_ready));\n      for (i = 0, ready = data.media_ready; i < data.num_source; i ++, ready ++)\n      {\n        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n      if (changed)\n      {\n\t// Rebuild media size list and save...\n\tlprintMediaUpdate(printer, &data);\n\tpapplPrinterSetDriverData(printer, &data, NULL);\n\tlprintMediaSave(printer, &data);\n      }\n\n      papplPrinterSetReadyMedia(printer, data.num_source, data.media_ready);\n\n      status = \"Changes saved.\";\n    }\n\n    cupsFreeOptions(num_form, form);\n  }\n\n  papplClientHTMLPrinterHeader(client, printer, \"Media\", 0, NULL, NULL);\n  if (status)\n    papplClientHTMLPrintf(client, \"<div class=\\\"banner\\\">%s</div>\\n\", status);\n\n  papplClientHTMLStartForm(client, papplClientGetURI(client), false);\n\n  papplClientHTMLPuts(client,\n\t\t      \"          <table class=\\\"form\\\">\\n\"\n\t\t      \"            <tbody>\\n\");\n\n  for (i = 0; i < data.num_source; i ++)\n  {\n    snprintf(name, sizeof(name), \"ready%d\", i);\n    media_chooser(client, &data, localize_keyword(client, \"media-source\", data.source[i], text, sizeof(text)), name, data.media_ready + i);\n  }\n\n  papplClientHTMLPrintf(client,\n\t\t\t\"              <tr><th></th><td><input type=\\\"submit\\\" value=\\\"%s\\\"></td></tr>\\n\"\n\t\t\t\"            </tbody>\\n\"\n\t\t\t\"          </table>\"\n\t\t\t\"        </form>\\n\"\n\t\t\t\"        <script>function show_hide_custom(name) {\\n\"\n\t\t        \"  let selelem = document.forms['form'][name + '-size'];\\n\"\n\t\t        \"  let divelem = document.getElementById(name + '-custom');\\n\"\n\t\t        \"  if (selelem.selectedIndex == 0)\\n\"\n\t\t        \"    divelem.style = 'display: inline-block;';\\n\"\n\t\t        \"  else\\n\"\n\t\t        \"    divelem.style = 'display: none;';\\n\"\n\t\t\t\"}</script>\\n\", papplClientGetLocString(client, \"Save Changes\"));\n\n  papplClientHTMLPrinterFooter(client);\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 479,
    "end_line": 655,
    "code": "  int\t\t\ti;\t\t// Looping var\n  pappl_pr_driver_data_t data;\t\t// Driver data\n  lprint_cmedia_t\t*cmedia;\t// Custom label sizes, if any\n  char\t\t\tname[128],\t// Form variable name\n\t\t\ttext[256];\t// Localized text\n  const char\t\t*status = NULL;\t// Status message, if any\n\n\n  LPRINT_DEBUG(\"lprintMediaUI(client=%p, printer=%p(%s))\\n\", client, printer, printer ? papplPrinterGetName(printer) : \"null\");\n\n  // Only allow access as appropriate...\n  if (!papplClientHTMLAuthorize(client))\n    return (true);\n\n  // Get the driver data...\n  papplPrinterGetDriverData(printer, &data);\n\n  LPRINT_DEBUG(\"lprintMediaUI: data.extension=%p\\n\", data.extension);\n  if (!data.extension)\n  {\n    lprintMediaLoad(printer, &data);\n    LPRINT_DEBUG(\"lprintMediaUI: AFTER data.extension=%p\\n\", data.extension);\n  }\n  cmedia = (lprint_cmedia_t *)data.extension;\n\n  if (papplClientGetMethod(client) == HTTP_STATE_POST)\n  {\n    int\t\t\tnum_form = 0;\t// Number of form variable\n    cups_option_t\t*form = NULL;\t// Form variables\n\n    if ((num_form = papplClientGetForm(client, &form)) == 0)\n    {\n      status = papplClientGetLocString(client, \"Invalid form data.\");\n    }\n    else if (!papplClientIsValidForm(client, num_form, form))\n    {\n      status = papplClientGetLocString(client, \"Invalid form submission.\");\n    }\n    else\n    {\n      bool\t\tchanged = false;// Did the custom media list change?\n      pwg_media_t\t*pwg = NULL;\t// PWG media info\n      pappl_media_col_t\t*ready;\t\t// Current ready media\n      const char\t*value,\t\t// Value of form variable\n\t\t\t*custom_width,\t// Custom media width\n\t\t\t*custom_length,\t// Custom media length\n\t\t\t*custom_units;\t// Custom media units\n\n      memset(data.media_ready, 0, sizeof(data.media_ready));\n      for (i = 0, ready = data.media_ready; i < data.num_source; i ++, ready ++)\n      {\n        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n      if (changed)\n      {\n\t// Rebuild media size list and save...\n\tlprintMediaUpdate(printer, &data);\n\tpapplPrinterSetDriverData(printer, &data, NULL);\n\tlprintMediaSave(printer, &data);\n      }\n\n      papplPrinterSetReadyMedia(printer, data.num_source, data.media_ready);\n\n      status = \"Changes saved.\";\n    }\n\n    cupsFreeOptions(num_form, form);\n  }\n\n  papplClientHTMLPrinterHeader(client, printer, \"Media\", 0, NULL, NULL);\n  if (status)\n    papplClientHTMLPrintf(client, \"<div class=\\\"banner\\\">%s</div>\\n\", status);\n\n  papplClientHTMLStartForm(client, papplClientGetURI(client), false);\n\n  papplClientHTMLPuts(client,\n\t\t      \"          <table class=\\\"form\\\">\\n\"\n\t\t      \"            <tbody>\\n\");\n\n  for (i = 0; i < data.num_source; i ++)\n  {\n    snprintf(name, sizeof(name), \"ready%d\", i);\n    media_chooser(client, &data, localize_keyword(client, \"media-source\", data.source[i], text, sizeof(text)), name, data.media_ready + i);\n  }\n\n  papplClientHTMLPrintf(client,\n\t\t\t\"              <tr><th></th><td><input type=\\\"submit\\\" value=\\\"%s\\\"></td></tr>\\n\"\n\t\t\t\"            </tbody>\\n\"\n\t\t\t\"          </table>\"\n\t\t\t\"        </form>\\n\"\n\t\t\t\"        <script>function show_hide_custom(name) {\\n\"\n\t\t        \"  let selelem = document.forms['form'][name + '-size'];\\n\"\n\t\t        \"  let divelem = document.getElementById(name + '-custom');\\n\"\n\t\t        \"  if (selelem.selectedIndex == 0)\\n\"\n\t\t        \"    divelem.style = 'display: inline-block;';\\n\"\n\t\t        \"  else\\n\"\n\t\t        \"    divelem.style = 'display: none;';\\n\"\n\t\t\t\"}</script>\\n\", papplClientGetLocString(client, \"Save Changes\"));\n\n  papplClientHTMLPrinterFooter(client);\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "global_variable",
    "start_line": 485,
    "end_line": 485,
    "code": "nst char\t\t*status = NULL;\t/",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 497,
    "end_line": 497,
    "code": "RINT_DEBUG(\"lprintMediaUI: data.extension=%p\\n\", data.extension);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 497,
    "end_line": 497,
    "code": "RINT_DEBUG(\"lprintMediaUI: data.extension=%p\\n\", data.extension);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 497,
    "end_line": 497,
    "code": "lprintMediaUI: data.extension=%p\\n\", data.extension);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 498,
    "end_line": 502,
    "code": " (!data.extension)\n  {\n    lprintMediaLoad(printer, &data);\n    LPRINT_DEBUG(\"lprintMediaUI: AFTER data.extension=%p\\n\", data.extension);\n  }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 499,
    "end_line": 502,
    "code": "    lprintMediaLoad(printer, &data);\n    LPRINT_DEBUG(\"lprintMediaUI: AFTER data.extension=%p\\n\", data.extension);\n  }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 501,
    "end_line": 501,
    "code": "RINT_DEBUG(\"lprintMediaUI: AFTER data.extension=%p\\n\", data.extension);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 501,
    "end_line": 501,
    "code": "RINT_DEBUG(\"lprintMediaUI: AFTER data.extension=%p\\n\", data.extension);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 501,
    "end_line": 501,
    "code": "lprintMediaUI: AFTER data.extension=%p\\n\", data.extension);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 503,
    "end_line": 503,
    "code": "edia = (lprint_cmedia_t *)data.extension;\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 503,
    "end_line": 503,
    "code": "edia = (lprint_cmedia_t *)data.extension;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 505,
    "end_line": 621,
    "code": " (papplClientGetMethod(client) == HTTP_STATE_POST)\n  {\n    int\t\t\tnum_form = 0;\t// Number of form variable\n    cups_option_t\t*form = NULL;\t// Form variables\n\n    if ((num_form = papplClientGetForm(client, &form)) == 0)\n    {\n      status = papplClientGetLocString(client, \"Invalid form data.\");\n    }\n    else if (!papplClientIsValidForm(client, num_form, form))\n    {\n      status = papplClientGetLocString(client, \"Invalid form submission.\");\n    }\n    else\n    {\n      bool\t\tchanged = false;// Did the custom media list change?\n      pwg_media_t\t*pwg = NULL;\t// PWG media info\n      pappl_media_col_t\t*ready;\t\t// Current ready media\n      const char\t*value,\t\t// Value of form variable\n\t\t\t*custom_width,\t// Custom media width\n\t\t\t*custom_length,\t// Custom media length\n\t\t\t*custom_units;\t// Custom media units\n\n      memset(data.media_ready, 0, sizeof(data.media_ready));\n      for (i = 0, ready = data.media_ready; i < data.num_source; i ++, ready ++)\n      {\n        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n      if (changed)\n      {\n\t// Rebuild media size list and save...\n\tlprintMediaUpdate(printer, &data);\n\tpapplPrinterSetDriverData(printer, &data, NULL);\n\tlprintMediaSave(printer, &data);\n      }\n\n      papplPrinterSetReadyMedia(printer, data.num_source, data.media_ready);\n\n      status = \"Changes saved.\";\n    }\n\n    cupsFreeOptions(num_form, form);\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 505,
    "end_line": 621,
    "code": " (papplClientGetMethod(client) == HTTP_STATE_POST)\n  {\n    int\t\t\tnum_form = 0;\t// Number of form variable\n    cups_option_t\t*form = NULL;\t// Form variables\n\n    if ((num_form = papplClientGetForm(client, &form)) == 0)\n    {\n      status = papplClientGetLocString(client, \"Invalid form data.\");\n    }\n    else if (!papplClientIsValidForm(client, num_form, form))\n    {\n      status = papplClientGetLocString(client, \"Invalid form submission.\");\n    }\n    else\n    {\n      bool\t\tchanged = false;// Did the custom media list change?\n      pwg_media_t\t*pwg = NULL;\t// PWG media info\n      pappl_media_col_t\t*ready;\t\t// Current ready media\n      const char\t*value,\t\t// Value of form variable\n\t\t\t*custom_width,\t// Custom media width\n\t\t\t*custom_length,\t// Custom media length\n\t\t\t*custom_units;\t// Custom media units\n\n      memset(data.media_ready, 0, sizeof(data.media_ready));\n      for (i = 0, ready = data.media_ready; i < data.num_source; i ++, ready ++)\n      {\n        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n      if (changed)\n      {\n\t// Rebuild media size list and save...\n\tlprintMediaUpdate(printer, &data);\n\tpapplPrinterSetDriverData(printer, &data, NULL);\n\tlprintMediaSave(printer, &data);\n      }\n\n      papplPrinterSetReadyMedia(printer, data.num_source, data.media_ready);\n\n      status = \"Changes saved.\";\n    }\n\n    cupsFreeOptions(num_form, form);\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 506,
    "end_line": 621,
    "code": "    int\t\t\tnum_form = 0;\t// Number of form variable\n    cups_option_t\t*form = NULL;\t// Form variables\n\n    if ((num_form = papplClientGetForm(client, &form)) == 0)\n    {\n      status = papplClientGetLocString(client, \"Invalid form data.\");\n    }\n    else if (!papplClientIsValidForm(client, num_form, form))\n    {\n      status = papplClientGetLocString(client, \"Invalid form submission.\");\n    }\n    else\n    {\n      bool\t\tchanged = false;// Did the custom media list change?\n      pwg_media_t\t*pwg = NULL;\t// PWG media info\n      pappl_media_col_t\t*ready;\t\t// Current ready media\n      const char\t*value,\t\t// Value of form variable\n\t\t\t*custom_width,\t// Custom media width\n\t\t\t*custom_length,\t// Custom media length\n\t\t\t*custom_units;\t// Custom media units\n\n      memset(data.media_ready, 0, sizeof(data.media_ready));\n      for (i = 0, ready = data.media_ready; i < data.num_source; i ++, ready ++)\n      {\n        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n      if (changed)\n      {\n\t// Rebuild media size list and save...\n\tlprintMediaUpdate(printer, &data);\n\tpapplPrinterSetDriverData(printer, &data, NULL);\n\tlprintMediaSave(printer, &data);\n      }\n\n      papplPrinterSetReadyMedia(printer, data.num_source, data.media_ready);\n\n      status = \"Changes saved.\";\n    }\n\n    cupsFreeOptions(num_form, form);\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 506,
    "end_line": 621,
    "code": "    int\t\t\tnum_form = 0;\t// Number of form variable\n    cups_option_t\t*form = NULL;\t// Form variables\n\n    if ((num_form = papplClientGetForm(client, &form)) == 0)\n    {\n      status = papplClientGetLocString(client, \"Invalid form data.\");\n    }\n    else if (!papplClientIsValidForm(client, num_form, form))\n    {\n      status = papplClientGetLocString(client, \"Invalid form submission.\");\n    }\n    else\n    {\n      bool\t\tchanged = false;// Did the custom media list change?\n      pwg_media_t\t*pwg = NULL;\t// PWG media info\n      pappl_media_col_t\t*ready;\t\t// Current ready media\n      const char\t*value,\t\t// Value of form variable\n\t\t\t*custom_width,\t// Custom media width\n\t\t\t*custom_length,\t// Custom media length\n\t\t\t*custom_units;\t// Custom media units\n\n      memset(data.media_ready, 0, sizeof(data.media_ready));\n      for (i = 0, ready = data.media_ready; i < data.num_source; i ++, ready ++)\n      {\n        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n      if (changed)\n      {\n\t// Rebuild media size list and save...\n\tlprintMediaUpdate(printer, &data);\n\tpapplPrinterSetDriverData(printer, &data, NULL);\n\tlprintMediaSave(printer, &data);\n      }\n\n      papplPrinterSetReadyMedia(printer, data.num_source, data.media_ready);\n\n      status = \"Changes saved.\";\n    }\n\n    cupsFreeOptions(num_form, form);\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "global_variable",
    "start_line": 507,
    "end_line": 507,
    "code": "t\t\t\tnum_form = 0;\t/",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "global_variable",
    "start_line": 508,
    "end_line": 508,
    "code": "ps_option_t\t*form = NULL;\t/",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 510,
    "end_line": 618,
    "code": " ((num_form = papplClientGetForm(client, &form)) == 0)\n    {\n      status = papplClientGetLocString(client, \"Invalid form data.\");\n    }\n    else if (!papplClientIsValidForm(client, num_form, form))\n    {\n      status = papplClientGetLocString(client, \"Invalid form submission.\");\n    }\n    else\n    {\n      bool\t\tchanged = false;// Did the custom media list change?\n      pwg_media_t\t*pwg = NULL;\t// PWG media info\n      pappl_media_col_t\t*ready;\t\t// Current ready media\n      const char\t*value,\t\t// Value of form variable\n\t\t\t*custom_width,\t// Custom media width\n\t\t\t*custom_length,\t// Custom media length\n\t\t\t*custom_units;\t// Custom media units\n\n      memset(data.media_ready, 0, sizeof(data.media_ready));\n      for (i = 0, ready = data.media_ready; i < data.num_source; i ++, ready ++)\n      {\n        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n      if (changed)\n      {\n\t// Rebuild media size list and save...\n\tlprintMediaUpdate(printer, &data);\n\tpapplPrinterSetDriverData(printer, &data, NULL);\n\tlprintMediaSave(printer, &data);\n      }\n\n      papplPrinterSetReadyMedia(printer, data.num_source, data.media_ready);\n\n      status = \"Changes saved.\";\n    }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 510,
    "end_line": 618,
    "code": " ((num_form = papplClientGetForm(client, &form)) == 0)\n    {\n      status = papplClientGetLocString(client, \"Invalid form data.\");\n    }\n    else if (!papplClientIsValidForm(client, num_form, form))\n    {\n      status = papplClientGetLocString(client, \"Invalid form submission.\");\n    }\n    else\n    {\n      bool\t\tchanged = false;// Did the custom media list change?\n      pwg_media_t\t*pwg = NULL;\t// PWG media info\n      pappl_media_col_t\t*ready;\t\t// Current ready media\n      const char\t*value,\t\t// Value of form variable\n\t\t\t*custom_width,\t// Custom media width\n\t\t\t*custom_length,\t// Custom media length\n\t\t\t*custom_units;\t// Custom media units\n\n      memset(data.media_ready, 0, sizeof(data.media_ready));\n      for (i = 0, ready = data.media_ready; i < data.num_source; i ++, ready ++)\n      {\n        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n      if (changed)\n      {\n\t// Rebuild media size list and save...\n\tlprintMediaUpdate(printer, &data);\n\tpapplPrinterSetDriverData(printer, &data, NULL);\n\tlprintMediaSave(printer, &data);\n      }\n\n      papplPrinterSetReadyMedia(printer, data.num_source, data.media_ready);\n\n      status = \"Changes saved.\";\n    }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 511,
    "end_line": 513,
    "code": "      status = papplClientGetLocString(client, \"Invalid form data.\");\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 512,
    "end_line": 512,
    "code": "atus = papplClientGetLocString(client, \"Invalid form data.\");\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 512,
    "end_line": 512,
    "code": "atus = papplClientGetLocString(client, \"Invalid form data.\");\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 514,
    "end_line": 618,
    "code": "se if (!papplClientIsValidForm(client, num_form, form))\n    {\n      status = papplClientGetLocString(client, \"Invalid form submission.\");\n    }\n    else\n    {\n      bool\t\tchanged = false;// Did the custom media list change?\n      pwg_media_t\t*pwg = NULL;\t// PWG media info\n      pappl_media_col_t\t*ready;\t\t// Current ready media\n      const char\t*value,\t\t// Value of form variable\n\t\t\t*custom_width,\t// Custom media width\n\t\t\t*custom_length,\t// Custom media length\n\t\t\t*custom_units;\t// Custom media units\n\n      memset(data.media_ready, 0, sizeof(data.media_ready));\n      for (i = 0, ready = data.media_ready; i < data.num_source; i ++, ready ++)\n      {\n        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n      if (changed)\n      {\n\t// Rebuild media size list and save...\n\tlprintMediaUpdate(printer, &data);\n\tpapplPrinterSetDriverData(printer, &data, NULL);\n\tlprintMediaSave(printer, &data);\n      }\n\n      papplPrinterSetReadyMedia(printer, data.num_source, data.media_ready);\n\n      status = \"Changes saved.\";\n    }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 514,
    "end_line": 618,
    "code": "se if (!papplClientIsValidForm(client, num_form, form))\n    {\n      status = papplClientGetLocString(client, \"Invalid form submission.\");\n    }\n    else\n    {\n      bool\t\tchanged = false;// Did the custom media list change?\n      pwg_media_t\t*pwg = NULL;\t// PWG media info\n      pappl_media_col_t\t*ready;\t\t// Current ready media\n      const char\t*value,\t\t// Value of form variable\n\t\t\t*custom_width,\t// Custom media width\n\t\t\t*custom_length,\t// Custom media length\n\t\t\t*custom_units;\t// Custom media units\n\n      memset(data.media_ready, 0, sizeof(data.media_ready));\n      for (i = 0, ready = data.media_ready; i < data.num_source; i ++, ready ++)\n      {\n        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n      if (changed)\n      {\n\t// Rebuild media size list and save...\n\tlprintMediaUpdate(printer, &data);\n\tpapplPrinterSetDriverData(printer, &data, NULL);\n\tlprintMediaSave(printer, &data);\n      }\n\n      papplPrinterSetReadyMedia(printer, data.num_source, data.media_ready);\n\n      status = \"Changes saved.\";\n    }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 514,
    "end_line": 618,
    "code": " (!papplClientIsValidForm(client, num_form, form))\n    {\n      status = papplClientGetLocString(client, \"Invalid form submission.\");\n    }\n    else\n    {\n      bool\t\tchanged = false;// Did the custom media list change?\n      pwg_media_t\t*pwg = NULL;\t// PWG media info\n      pappl_media_col_t\t*ready;\t\t// Current ready media\n      const char\t*value,\t\t// Value of form variable\n\t\t\t*custom_width,\t// Custom media width\n\t\t\t*custom_length,\t// Custom media length\n\t\t\t*custom_units;\t// Custom media units\n\n      memset(data.media_ready, 0, sizeof(data.media_ready));\n      for (i = 0, ready = data.media_ready; i < data.num_source; i ++, ready ++)\n      {\n        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n      if (changed)\n      {\n\t// Rebuild media size list and save...\n\tlprintMediaUpdate(printer, &data);\n\tpapplPrinterSetDriverData(printer, &data, NULL);\n\tlprintMediaSave(printer, &data);\n      }\n\n      papplPrinterSetReadyMedia(printer, data.num_source, data.media_ready);\n\n      status = \"Changes saved.\";\n    }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 514,
    "end_line": 618,
    "code": " (!papplClientIsValidForm(client, num_form, form))\n    {\n      status = papplClientGetLocString(client, \"Invalid form submission.\");\n    }\n    else\n    {\n      bool\t\tchanged = false;// Did the custom media list change?\n      pwg_media_t\t*pwg = NULL;\t// PWG media info\n      pappl_media_col_t\t*ready;\t\t// Current ready media\n      const char\t*value,\t\t// Value of form variable\n\t\t\t*custom_width,\t// Custom media width\n\t\t\t*custom_length,\t// Custom media length\n\t\t\t*custom_units;\t// Custom media units\n\n      memset(data.media_ready, 0, sizeof(data.media_ready));\n      for (i = 0, ready = data.media_ready; i < data.num_source; i ++, ready ++)\n      {\n        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n      if (changed)\n      {\n\t// Rebuild media size list and save...\n\tlprintMediaUpdate(printer, &data);\n\tpapplPrinterSetDriverData(printer, &data, NULL);\n\tlprintMediaSave(printer, &data);\n      }\n\n      papplPrinterSetReadyMedia(printer, data.num_source, data.media_ready);\n\n      status = \"Changes saved.\";\n    }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 515,
    "end_line": 517,
    "code": "      status = papplClientGetLocString(client, \"Invalid form submission.\");\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 516,
    "end_line": 516,
    "code": "atus = papplClientGetLocString(client, \"Invalid form submission.\");\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 516,
    "end_line": 516,
    "code": "atus = papplClientGetLocString(client, \"Invalid form submission.\");\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 518,
    "end_line": 618,
    "code": "se\n    {\n      bool\t\tchanged = false;// Did the custom media list change?\n      pwg_media_t\t*pwg = NULL;\t// PWG media info\n      pappl_media_col_t\t*ready;\t\t// Current ready media\n      const char\t*value,\t\t// Value of form variable\n\t\t\t*custom_width,\t// Custom media width\n\t\t\t*custom_length,\t// Custom media length\n\t\t\t*custom_units;\t// Custom media units\n\n      memset(data.media_ready, 0, sizeof(data.media_ready));\n      for (i = 0, ready = data.media_ready; i < data.num_source; i ++, ready ++)\n      {\n        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n      if (changed)\n      {\n\t// Rebuild media size list and save...\n\tlprintMediaUpdate(printer, &data);\n\tpapplPrinterSetDriverData(printer, &data, NULL);\n\tlprintMediaSave(printer, &data);\n      }\n\n      papplPrinterSetReadyMedia(printer, data.num_source, data.media_ready);\n\n      status = \"Changes saved.\";\n    }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 518,
    "end_line": 618,
    "code": "se\n    {\n      bool\t\tchanged = false;// Did the custom media list change?\n      pwg_media_t\t*pwg = NULL;\t// PWG media info\n      pappl_media_col_t\t*ready;\t\t// Current ready media\n      const char\t*value,\t\t// Value of form variable\n\t\t\t*custom_width,\t// Custom media width\n\t\t\t*custom_length,\t// Custom media length\n\t\t\t*custom_units;\t// Custom media units\n\n      memset(data.media_ready, 0, sizeof(data.media_ready));\n      for (i = 0, ready = data.media_ready; i < data.num_source; i ++, ready ++)\n      {\n        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n      if (changed)\n      {\n\t// Rebuild media size list and save...\n\tlprintMediaUpdate(printer, &data);\n\tpapplPrinterSetDriverData(printer, &data, NULL);\n\tlprintMediaSave(printer, &data);\n      }\n\n      papplPrinterSetReadyMedia(printer, data.num_source, data.media_ready);\n\n      status = \"Changes saved.\";\n    }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 519,
    "end_line": 618,
    "code": "      bool\t\tchanged = false;// Did the custom media list change?\n      pwg_media_t\t*pwg = NULL;\t// PWG media info\n      pappl_media_col_t\t*ready;\t\t// Current ready media\n      const char\t*value,\t\t// Value of form variable\n\t\t\t*custom_width,\t// Custom media width\n\t\t\t*custom_length,\t// Custom media length\n\t\t\t*custom_units;\t// Custom media units\n\n      memset(data.media_ready, 0, sizeof(data.media_ready));\n      for (i = 0, ready = data.media_ready; i < data.num_source; i ++, ready ++)\n      {\n        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n      if (changed)\n      {\n\t// Rebuild media size list and save...\n\tlprintMediaUpdate(printer, &data);\n\tpapplPrinterSetDriverData(printer, &data, NULL);\n\tlprintMediaSave(printer, &data);\n      }\n\n      papplPrinterSetReadyMedia(printer, data.num_source, data.media_ready);\n\n      status = \"Changes saved.\";\n    }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 519,
    "end_line": 618,
    "code": "      bool\t\tchanged = false;// Did the custom media list change?\n      pwg_media_t\t*pwg = NULL;\t// PWG media info\n      pappl_media_col_t\t*ready;\t\t// Current ready media\n      const char\t*value,\t\t// Value of form variable\n\t\t\t*custom_width,\t// Custom media width\n\t\t\t*custom_length,\t// Custom media length\n\t\t\t*custom_units;\t// Custom media units\n\n      memset(data.media_ready, 0, sizeof(data.media_ready));\n      for (i = 0, ready = data.media_ready; i < data.num_source; i ++, ready ++)\n      {\n        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n      if (changed)\n      {\n\t// Rebuild media size list and save...\n\tlprintMediaUpdate(printer, &data);\n\tpapplPrinterSetDriverData(printer, &data, NULL);\n\tlprintMediaSave(printer, &data);\n      }\n\n      papplPrinterSetReadyMedia(printer, data.num_source, data.media_ready);\n\n      status = \"Changes saved.\";\n    }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "global_variable",
    "start_line": 520,
    "end_line": 520,
    "code": "ol\t\tchanged = false;//",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "global_variable",
    "start_line": 521,
    "end_line": 521,
    "code": "g_media_t\t*pwg = NULL;\t/",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 529,
    "end_line": 605,
    "code": "r (i = 0, ready = data.media_ready; i < data.num_source; i ++, ready ++)\n      {\n        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 529,
    "end_line": 605,
    "code": "r (i = 0, ready = data.media_ready; i < data.num_source; i ++, ready ++)\n      {\n        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 529,
    "end_line": 529,
    "code": "= 0, ready = data.media_ready; ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 529,
    "end_line": 529,
    "code": "ady = data.media_ready; ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 530,
    "end_line": 605,
    "code": "        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 530,
    "end_line": 605,
    "code": "        // size\n        snprintf(name, sizeof(name), \"ready%d-size\", i);\n        if ((value = cupsGetOption(name, num_form, form)) == NULL)\n          continue;\n\n        ready->size_name[0] = '\\0';\n        ready->size_width   = 0;\n        ready->size_length  = 0;\n\n        if (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n        papplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n        // source\n        papplCopyString(ready->source, data.source[i], sizeof(ready->source));\n\n        // xxx-margin\n\tready->bottom_margin = ready->top_margin = data.bottom_top;\n\tready->left_margin = ready->right_margin = data.left_right;\n\n        // tracking\n        snprintf(name, sizeof(name), \"ready%d-tracking\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n        // type\n        snprintf(name, sizeof(name), \"ready%d-type\", i);\n        if ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n      }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 536,
    "end_line": 536,
    "code": "ady->size_name[0] = '\\0';\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 536,
    "end_line": 536,
    "code": "ady->size_name[0] = '\\0';\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 537,
    "end_line": 537,
    "code": "ady->size_width   = 0;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 537,
    "end_line": 537,
    "code": "ady->size_width   = 0;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 538,
    "end_line": 538,
    "code": "ady->size_length  = 0;\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 538,
    "end_line": 538,
    "code": "ady->size_length  = 0;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 540,
    "end_line": 576,
    "code": " (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 540,
    "end_line": 576,
    "code": " (!strcmp(value, \"custom\"))\n        {\n          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n        else if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 541,
    "end_line": 569,
    "code": "          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 541,
    "end_line": 569,
    "code": "          // Custom size...\n          snprintf(name, sizeof(name), \"ready%d-custom-width\", i);\n          custom_width = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-length\", i);\n          custom_length = cupsGetOption(name, num_form, form);\n          snprintf(name, sizeof(name), \"ready%d-custom-units\", i);\n          custom_units = cupsGetOption(name, num_form, form);\n\n          if (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n        }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 550,
    "end_line": 568,
    "code": " (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 550,
    "end_line": 568,
    "code": " (custom_width && custom_length && custom_units)\n          {\n            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 551,
    "end_line": 568,
    "code": "            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 551,
    "end_line": 568,
    "code": "            changed = true;\n\n            if (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n            snprintf(name, sizeof(name), \"ready%d\", i);\n            pwgFormatSizeName(ready->size_name, sizeof(ready->size_name), \"custom\", name, ready->size_width, ready->size_length, custom_units);\n            papplCopyString(cmedia->custom_name[i], ready->size_name, sizeof(cmedia->custom_name[i]));\n\t  }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 554,
    "end_line": 563,
    "code": " (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 554,
    "end_line": 563,
    "code": " (!strcmp(custom_units, \"in\"))\n            {\n\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t    else\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 555,
    "end_line": 558,
    "code": "\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 555,
    "end_line": 558,
    "code": "\t      ready->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t    }\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 556,
    "end_line": 556,
    "code": "ady->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 556,
    "end_line": 556,
    "code": "ady->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 556,
    "end_line": 556,
    "code": "ady->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 556,
    "end_line": 556,
    "code": "ady->size_width  = (int)(2540.0 * strtod(custom_width, NULL));\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 557,
    "end_line": 557,
    "code": "ady->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 557,
    "end_line": 557,
    "code": "ady->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 557,
    "end_line": 557,
    "code": "ady->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 557,
    "end_line": 557,
    "code": "ady->size_length = (int)(2540.0 * strtod(custom_length, NULL));\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 559,
    "end_line": 563,
    "code": "se\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 559,
    "end_line": 563,
    "code": "se\n\t    {\n\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 560,
    "end_line": 563,
    "code": "\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 560,
    "end_line": 563,
    "code": "\t      ready->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t      ready->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t    }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 561,
    "end_line": 561,
    "code": "ady->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 561,
    "end_line": 561,
    "code": "ady->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 561,
    "end_line": 561,
    "code": "ady->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 561,
    "end_line": 561,
    "code": "ady->size_width  = (int)(100.0 * strtod(custom_width, NULL));\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 562,
    "end_line": 562,
    "code": "ady->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 562,
    "end_line": 562,
    "code": "ady->size_length = (int)(100.0 * strtod(custom_length, NULL));\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 562,
    "end_line": 562,
    "code": "ady->size_length = (int)(100.0 * strtod(custom_length, NULL));\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 562,
    "end_line": 562,
    "code": "ady->size_length = (int)(100.0 * strtod(custom_length, NULL));\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 570,
    "end_line": 576,
    "code": "se if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 570,
    "end_line": 576,
    "code": "se if ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 570,
    "end_line": 576,
    "code": " ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 570,
    "end_line": 576,
    "code": " ((pwg = pwgMediaForPWG(value)) != NULL)\n        {\n          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 571,
    "end_line": 576,
    "code": "          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 571,
    "end_line": 576,
    "code": "          // Standard size...\n          papplCopyString(ready->size_name, pwg->pwg, sizeof(ready->size_name));\n          ready->size_width  = pwg->width;\n          ready->size_length = pwg->length;\n        }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 574,
    "end_line": 574,
    "code": "ady->size_width  = pwg->width;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 574,
    "end_line": 574,
    "code": "ady->size_width  = pwg->width;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 575,
    "end_line": 575,
    "code": "ady->size_length = pwg->length;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 575,
    "end_line": 575,
    "code": "ady->size_length = pwg->length;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 578,
    "end_line": 578,
    "code": "pplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 578,
    "end_line": 578,
    "code": "pplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 578,
    "end_line": 578,
    "code": "pplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 578,
    "end_line": 578,
    "code": "pplLogClient(client, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 578,
    "end_line": 578,
    "code": "lient, PAPPL_LOGLEVEL_DEBUG, \"ready%d-size='%s',%d,%d\", i, ready->size_name, ready->size_width, ready->size_length);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 584,
    "end_line": 584,
    "code": "ady->bottom_margin = ready->top_margin = data.bottom_top;\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 584,
    "end_line": 584,
    "code": "ady->bottom_margin = ready->top_margin = data.bottom_top;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 584,
    "end_line": 584,
    "code": "ady->top_margin = data.bottom_top;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 585,
    "end_line": 585,
    "code": "ady->left_margin = ready->right_margin = data.left_right;\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 585,
    "end_line": 585,
    "code": "ady->left_margin = ready->right_margin = data.left_right;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 585,
    "end_line": 585,
    "code": "ady->right_margin = data.left_right;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 589,
    "end_line": 599,
    "code": " ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 589,
    "end_line": 599,
    "code": " ((value = cupsGetOption(name, num_form, form)) != NULL)\n        {\n          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 590,
    "end_line": 599,
    "code": "          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 590,
    "end_line": 599,
    "code": "          if (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n        }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 591,
    "end_line": 598,
    "code": " (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 591,
    "end_line": 598,
    "code": " (!strcmp(value, \"continuous\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n          else if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 592,
    "end_line": 592,
    "code": "ady->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 592,
    "end_line": 592,
    "code": "ady->tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 593,
    "end_line": 598,
    "code": "se if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 593,
    "end_line": 598,
    "code": "se if (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 593,
    "end_line": 598,
    "code": " (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 593,
    "end_line": 598,
    "code": " (!strcmp(value, \"gap\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_GAP;\n          else if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 594,
    "end_line": 594,
    "code": "ady->tracking = PAPPL_MEDIA_TRACKING_GAP;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 594,
    "end_line": 594,
    "code": "ady->tracking = PAPPL_MEDIA_TRACKING_GAP;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 595,
    "end_line": 598,
    "code": "se if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 595,
    "end_line": 598,
    "code": "se if (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 595,
    "end_line": 598,
    "code": " (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 595,
    "end_line": 598,
    "code": " (!strcmp(value, \"mark\"))\n            ready->tracking = PAPPL_MEDIA_TRACKING_MARK;\n          else\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 596,
    "end_line": 596,
    "code": "ady->tracking = PAPPL_MEDIA_TRACKING_MARK;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 596,
    "end_line": 596,
    "code": "ady->tracking = PAPPL_MEDIA_TRACKING_MARK;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 597,
    "end_line": 598,
    "code": "se\n            ready->tracking = PAPPL_MEDIA_TRACKING_WEB;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 598,
    "end_line": 598,
    "code": "ady->tracking = PAPPL_MEDIA_TRACKING_WEB;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 598,
    "end_line": 598,
    "code": "ady->tracking = PAPPL_MEDIA_TRACKING_WEB;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 603,
    "end_line": 604,
    "code": " ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 603,
    "end_line": 604,
    "code": " ((value = cupsGetOption(name, num_form, form)) != NULL)\n          papplCopyString(ready->type, value, sizeof(ready->type));\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 617,
    "end_line": 617,
    "code": "atus = \"Changes saved.\";\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 617,
    "end_line": 617,
    "code": "atus = \"Changes saved.\";\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 633,
    "end_line": 637,
    "code": "r (i = 0; i < data.num_source; i ++)\n  {\n    snprintf(name, sizeof(name), \"ready%d\", i);\n    media_chooser(client, &data, localize_keyword(client, \"media-source\", data.source[i], text, sizeof(text)), name, data.media_ready + i);\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 639,
    "end_line": 651,
    "code": "pplClientHTMLPrintf(client,\n\t\t\t\"              <tr><th></th><td><input type=\\\"submit\\\" value=\\\"%s\\\"></td></tr>\\n\"\n\t\t\t\"            </tbody>\\n\"\n\t\t\t\"          </table>\"\n\t\t\t\"        </form>\\n\"\n\t\t\t\"        <script>function show_hide_custom(name) {\\n\"\n\t\t        \"  let selelem = document.forms['form'][name + '-size'];\\n\"\n\t\t        \"  let divelem = document.getElementById(name + '-custom');\\n\"\n\t\t        \"  if (selelem.selectedIndex == 0)\\n\"\n\t\t        \"    divelem.style = 'display: inline-block;';\\n\"\n\t\t        \"  else\\n\"\n\t\t        \"    divelem.style = 'display: none;';\\n\"\n\t\t\t\"}</script>\\n\", papplClientGetLocString(client, \"Save Changes\"));\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 639,
    "end_line": 651,
    "code": "pplClientHTMLPrintf(client,\n\t\t\t\"              <tr><th></th><td><input type=\\\"submit\\\" value=\\\"%s\\\"></td></tr>\\n\"\n\t\t\t\"            </tbody>\\n\"\n\t\t\t\"          </table>\"\n\t\t\t\"        </form>\\n\"\n\t\t\t\"        <script>function show_hide_custom(name) {\\n\"\n\t\t        \"  let selelem = document.forms['form'][name + '-size'];\\n\"\n\t\t        \"  let divelem = document.getElementById(name + '-custom');\\n\"\n\t\t        \"  if (selelem.selectedIndex == 0)\\n\"\n\t\t        \"    divelem.style = 'display: inline-block;';\\n\"\n\t\t        \"  else\\n\"\n\t\t        \"    divelem.style = 'display: none;';\\n\"\n\t\t\t\"}</script>\\n\", papplClientGetLocString(client, \"Save Changes\"));\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 639,
    "end_line": 651,
    "code": "lient,\n\t\t\t\"              <tr><th></th><td><input type=\\\"submit\\\" value=\\\"%s\\\"></td></tr>\\n\"\n\t\t\t\"            </tbody>\\n\"\n\t\t\t\"          </table>\"\n\t\t\t\"        </form>\\n\"\n\t\t\t\"        <script>function show_hide_custom(name) {\\n\"\n\t\t        \"  let selelem = document.forms['form'][name + '-size'];\\n\"\n\t\t        \"  let divelem = document.getElementById(name + '-custom');\\n\"\n\t\t        \"  if (selelem.selectedIndex == 0)\\n\"\n\t\t        \"    divelem.style = 'display: inline-block;';\\n\"\n\t\t        \"  else\\n\"\n\t\t        \"    divelem.style = 'display: none;';\\n\"\n\t\t\t\"}</script>\\n\", papplClientGetLocString(client, \"Save Changes\"));\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 640,
    "end_line": 651,
    "code": "             <tr><th></th><td><input type=\\\"submit\\\" value=\\\"%s\\\"></td></tr>\\n\"\n\t\t\t\"            </tbody>\\n\"\n\t\t\t\"          </table>\"\n\t\t\t\"        </form>\\n\"\n\t\t\t\"        <script>function show_hide_custom(name) {\\n\"\n\t\t        \"  let selelem = document.forms['form'][name + '-size'];\\n\"\n\t\t        \"  let divelem = document.getElementById(name + '-custom');\\n\"\n\t\t        \"  if (selelem.selectedIndex == 0)\\n\"\n\t\t        \"    divelem.style = 'display: inline-block;';\\n\"\n\t\t        \"  else\\n\"\n\t\t        \"    divelem.style = 'display: none;';\\n\"\n\t\t\t\"}</script>\\n\", ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 645,
    "end_line": 645,
    "code": " let selelem = document.forms['form'][name + '-size'];\\n\"\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 645,
    "end_line": 645,
    "code": "let selelem = document.forms['form'][name + '-size'];\\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 646,
    "end_line": 646,
    "code": " let divelem = document.getElementById(name + '-custom');\\n\"\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 646,
    "end_line": 646,
    "code": "let divelem = document.getElementById(name + '-custom');\\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 648,
    "end_line": 648,
    "code": "   divelem.style = 'display: inline-block;';\\n\"\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 648,
    "end_line": 648,
    "code": "  divelem.style = 'display: inline-block;';\\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 650,
    "end_line": 650,
    "code": "   divelem.style = 'display: none;';\\n\"\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 650,
    "end_line": 650,
    "code": "  divelem.style = 'display: none;';\\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function",
    "start_line": 662,
    "end_line": 695,
    "name": "lprintMediaUpdate",
    "parent": null,
    "hierarchy": "lprintMediaUpdate",
    "code": "id\nlprintMediaUpdate(\n    pappl_printer_t        *printer,\t// I - Printer\n    pappl_pr_driver_data_t *data)\t// I - Driver data\n{\n  int\t\t\ti, j;\t\t// Looping vars\n  lprint_cmedia_t\t*cmedia;\t// Custom label sizes\n\n\n  (void)printer;\n\n  // Find the last size in the media list...\n  for (i = 0; i < data->num_media; i ++)\n  {\n    if (!strncmp(data->media[i], \"custom_\", 7) && strncmp(data->media[i], \"custom_min_\", 11) && strncmp(data->media[i], \"custom_max_\", 11))\n      break;\n  }\n\n  // Then copy any custom sizes over...\n  if ((cmedia = (lprint_cmedia_t *)data->extension) != NULL)\n  {\n    for (j = 0; j < data->num_source && i < PAPPL_MAX_MEDIA; j ++)\n    {\n      if (cmedia->custom_name[j][0])\n        data->media[i ++] = cmedia->custom_name[j];\n    }\n  }\n\n  data->num_media = i;\n\n  LPRINT_DEBUG(\"lprintMediaUpdate: num_media=%d\\n\", data->num_media);\n  for (i = 0; i < data->num_media; i ++)\n    LPRINT_DEBUG(\"lprintMediaUpdate: media[%d]='%s'\\n\", i, data->media[i]);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 662,
    "end_line": 695,
    "code": "id\nlprintMediaUpdate(\n    pappl_printer_t        *printer,\t// I - Printer\n    pappl_pr_driver_data_t *data)\t// I - Driver data\n{\n  int\t\t\ti, j;\t\t// Looping vars\n  lprint_cmedia_t\t*cmedia;\t// Custom label sizes\n\n\n  (void)printer;\n\n  // Find the last size in the media list...\n  for (i = 0; i < data->num_media; i ++)\n  {\n    if (!strncmp(data->media[i], \"custom_\", 7) && strncmp(data->media[i], \"custom_min_\", 11) && strncmp(data->media[i], \"custom_max_\", 11))\n      break;\n  }\n\n  // Then copy any custom sizes over...\n  if ((cmedia = (lprint_cmedia_t *)data->extension) != NULL)\n  {\n    for (j = 0; j < data->num_source && i < PAPPL_MAX_MEDIA; j ++)\n    {\n      if (cmedia->custom_name[j][0])\n        data->media[i ++] = cmedia->custom_name[j];\n    }\n  }\n\n  data->num_media = i;\n\n  LPRINT_DEBUG(\"lprintMediaUpdate: num_media=%d\\n\", data->num_media);\n  for (i = 0; i < data->num_media; i ++)\n    LPRINT_DEBUG(\"lprintMediaUpdate: media[%d]='%s'\\n\", i, data->media[i]);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 662,
    "end_line": 695,
    "code": "id\nlprintMediaUpdate(\n    pappl_printer_t        *printer,\t// I - Printer\n    pappl_pr_driver_data_t *data)\t// I - Driver data\n{\n  int\t\t\ti, j;\t\t// Looping vars\n  lprint_cmedia_t\t*cmedia;\t// Custom label sizes\n\n\n  (void)printer;\n\n  // Find the last size in the media list...\n  for (i = 0; i < data->num_media; i ++)\n  {\n    if (!strncmp(data->media[i], \"custom_\", 7) && strncmp(data->media[i], \"custom_min_\", 11) && strncmp(data->media[i], \"custom_max_\", 11))\n      break;\n  }\n\n  // Then copy any custom sizes over...\n  if ((cmedia = (lprint_cmedia_t *)data->extension) != NULL)\n  {\n    for (j = 0; j < data->num_source && i < PAPPL_MAX_MEDIA; j ++)\n    {\n      if (cmedia->custom_name[j][0])\n        data->media[i ++] = cmedia->custom_name[j];\n    }\n  }\n\n  data->num_media = i;\n\n  LPRINT_DEBUG(\"lprintMediaUpdate: num_media=%d\\n\", data->num_media);\n  for (i = 0; i < data->num_media; i ++)\n    LPRINT_DEBUG(\"lprintMediaUpdate: media[%d]='%s'\\n\", i, data->media[i]);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 666,
    "end_line": 695,
    "code": "  int\t\t\ti, j;\t\t// Looping vars\n  lprint_cmedia_t\t*cmedia;\t// Custom label sizes\n\n\n  (void)printer;\n\n  // Find the last size in the media list...\n  for (i = 0; i < data->num_media; i ++)\n  {\n    if (!strncmp(data->media[i], \"custom_\", 7) && strncmp(data->media[i], \"custom_min_\", 11) && strncmp(data->media[i], \"custom_max_\", 11))\n      break;\n  }\n\n  // Then copy any custom sizes over...\n  if ((cmedia = (lprint_cmedia_t *)data->extension) != NULL)\n  {\n    for (j = 0; j < data->num_source && i < PAPPL_MAX_MEDIA; j ++)\n    {\n      if (cmedia->custom_name[j][0])\n        data->media[i ++] = cmedia->custom_name[j];\n    }\n  }\n\n  data->num_media = i;\n\n  LPRINT_DEBUG(\"lprintMediaUpdate: num_media=%d\\n\", data->num_media);\n  for (i = 0; i < data->num_media; i ++)\n    LPRINT_DEBUG(\"lprintMediaUpdate: media[%d]='%s'\\n\", i, data->media[i]);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 666,
    "end_line": 695,
    "code": "  int\t\t\ti, j;\t\t// Looping vars\n  lprint_cmedia_t\t*cmedia;\t// Custom label sizes\n\n\n  (void)printer;\n\n  // Find the last size in the media list...\n  for (i = 0; i < data->num_media; i ++)\n  {\n    if (!strncmp(data->media[i], \"custom_\", 7) && strncmp(data->media[i], \"custom_min_\", 11) && strncmp(data->media[i], \"custom_max_\", 11))\n      break;\n  }\n\n  // Then copy any custom sizes over...\n  if ((cmedia = (lprint_cmedia_t *)data->extension) != NULL)\n  {\n    for (j = 0; j < data->num_source && i < PAPPL_MAX_MEDIA; j ++)\n    {\n      if (cmedia->custom_name[j][0])\n        data->media[i ++] = cmedia->custom_name[j];\n    }\n  }\n\n  data->num_media = i;\n\n  LPRINT_DEBUG(\"lprintMediaUpdate: num_media=%d\\n\", data->num_media);\n  for (i = 0; i < data->num_media; i ++)\n    LPRINT_DEBUG(\"lprintMediaUpdate: media[%d]='%s'\\n\", i, data->media[i]);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 674,
    "end_line": 678,
    "code": "r (i = 0; i < data->num_media; i ++)\n  {\n    if (!strncmp(data->media[i], \"custom_\", 7) && strncmp(data->media[i], \"custom_min_\", 11) && strncmp(data->media[i], \"custom_max_\", 11))\n      break;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 674,
    "end_line": 678,
    "code": "r (i = 0; i < data->num_media; i ++)\n  {\n    if (!strncmp(data->media[i], \"custom_\", 7) && strncmp(data->media[i], \"custom_min_\", 11) && strncmp(data->media[i], \"custom_max_\", 11))\n      break;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 681,
    "end_line": 688,
    "code": " ((cmedia = (lprint_cmedia_t *)data->extension) != NULL)\n  {\n    for (j = 0; j < data->num_source && i < PAPPL_MAX_MEDIA; j ++)\n    {\n      if (cmedia->custom_name[j][0])\n        data->media[i ++] = cmedia->custom_name[j];\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 681,
    "end_line": 688,
    "code": " ((cmedia = (lprint_cmedia_t *)data->extension) != NULL)\n  {\n    for (j = 0; j < data->num_source && i < PAPPL_MAX_MEDIA; j ++)\n    {\n      if (cmedia->custom_name[j][0])\n        data->media[i ++] = cmedia->custom_name[j];\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 681,
    "end_line": 681,
    "code": "cmedia = (lprint_cmedia_t *)data->extension) != NULL)\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 681,
    "end_line": 681,
    "code": "media = (lprint_cmedia_t *)data->extension) != NULL)\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 681,
    "end_line": 681,
    "code": "media = (lprint_cmedia_t *)data->extension) !",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 681,
    "end_line": 681,
    "code": "edia = (lprint_cmedia_t *)data->extension) ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 682,
    "end_line": 688,
    "code": "    for (j = 0; j < data->num_source && i < PAPPL_MAX_MEDIA; j ++)\n    {\n      if (cmedia->custom_name[j][0])\n        data->media[i ++] = cmedia->custom_name[j];\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 682,
    "end_line": 688,
    "code": "    for (j = 0; j < data->num_source && i < PAPPL_MAX_MEDIA; j ++)\n    {\n      if (cmedia->custom_name[j][0])\n        data->media[i ++] = cmedia->custom_name[j];\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 683,
    "end_line": 687,
    "code": "r (j = 0; j < data->num_source && i < PAPPL_MAX_MEDIA; j ++)\n    {\n      if (cmedia->custom_name[j][0])\n        data->media[i ++] = cmedia->custom_name[j];\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 683,
    "end_line": 687,
    "code": "r (j = 0; j < data->num_source && i < PAPPL_MAX_MEDIA; j ++)\n    {\n      if (cmedia->custom_name[j][0])\n        data->media[i ++] = cmedia->custom_name[j];\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 684,
    "end_line": 687,
    "code": "      if (cmedia->custom_name[j][0])\n        data->media[i ++] = cmedia->custom_name[j];\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 684,
    "end_line": 687,
    "code": "      if (cmedia->custom_name[j][0])\n        data->media[i ++] = cmedia->custom_name[j];\n    }\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 685,
    "end_line": 686,
    "code": " (cmedia->custom_name[j][0])\n        data->media[i ++] = cmedia->custom_name[j];\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 685,
    "end_line": 686,
    "code": " (cmedia->custom_name[j][0])\n        data->media[i ++] = cmedia->custom_name[j];\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 686,
    "end_line": 686,
    "code": "ta->media[i ++] = cmedia->custom_name[j];\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 686,
    "end_line": 686,
    "code": "ta->media[i ++] = cmedia->custom_name[j];\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 690,
    "end_line": 690,
    "code": "ta->num_media = i;\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 690,
    "end_line": 690,
    "code": "ta->num_media = i;\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 692,
    "end_line": 692,
    "code": "RINT_DEBUG(\"lprintMediaUpdate: num_media=%d\\n\", data->num_media);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 692,
    "end_line": 692,
    "code": "RINT_DEBUG(\"lprintMediaUpdate: num_media=%d\\n\", data->num_media);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 692,
    "end_line": 692,
    "code": "RINT_DEBUG(\"lprintMediaUpdate: num_media=%d\\n\", data->num_media);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 692,
    "end_line": 692,
    "code": "RINT_DEBUG(\"lprintMediaUpdate: num_media=%d\\n\", data->num_media);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 692,
    "end_line": 692,
    "code": "lprintMediaUpdate: num_media=%d\\n\", data->num_media);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 693,
    "end_line": 694,
    "code": "r (i = 0; i < data->num_media; i ++)\n    LPRINT_DEBUG(\"lprintMediaUpdate: media[%d]='%s'\\n\", i, data->media[i]);\n}",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 693,
    "end_line": 694,
    "code": "r (i = 0; i < data->num_media; i ++)\n    LPRINT_DEBUG(\"lprintMediaUpdate: media[%d]='%s'\\n\", i, data->media[i]);\n}",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 694,
    "end_line": 694,
    "code": "RINT_DEBUG(\"lprintMediaUpdate: media[%d]='%s'\\n\", i, data->media[i]);\n}",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 694,
    "end_line": 694,
    "code": "RINT_DEBUG(\"lprintMediaUpdate: media[%d]='%s'\\n\", i, data->media[i]);\n}",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 694,
    "end_line": 694,
    "code": "RINT_DEBUG(\"lprintMediaUpdate: media[%d]='%s'\\n\", i, data->media[i]);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 694,
    "end_line": 694,
    "code": "RINT_DEBUG(\"lprintMediaUpdate: media[%d]='%s'\\n\", i, data->media[i]);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 694,
    "end_line": 694,
    "code": "lprintMediaUpdate: media[%d]='%s'\\n\", i, data->media[i]);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function",
    "start_line": 704,
    "end_line": 708,
    "name": null,
    "parent": null,
    "hierarchy": null,
    "code": "signed char *\t\t\t\t// O - Pointer to compression buffer\nlprintPackBitsAlloc(size_t len)\t\t// I - Size of input buffer\n{\n  return (malloc(len + (len + 127) / 128));\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function",
    "start_line": 719,
    "end_line": 813,
    "name": "lprintPackBitsCompress",
    "parent": null,
    "hierarchy": "lprintPackBitsCompress",
    "code": "ze_t\t\t\t\t\t// O - Number of compressed bytes\nlprintPackBitsCompress(\n    unsigned char       *dst,\t\t// I - Destination buffer\n    const unsigned char *src,\t\t// I - Source buffer\n    size_t              srclen)\t\t// I - Number of source bytes (at least 3)\n{\n  const unsigned char\t*srcptr,\t// Current byte pointer\n\t\t\t*srcend,\t// End-of-line byte pointer\n\t\t\t*srclptr,\t// Start of literal sequence\n\t\t\t*srcrptr;\t// Start of repeated sequence\n  unsigned char\t\t*dstptr;\t// Pointer into compression buffer\n  unsigned\t\tcount,\t\t// Current count\n\t\t\tsrclcount,\t// Count of literal bytes for output\n\t\t\tsrcrcount;\t// Count of repeated bytes for output\n\n\n  // Do TIFF PackBits compression over the source buffer...\n  srcptr = srclptr = src;\n  srcend = src + srclen - 1;\n  dstptr = dst;\n\n  while (srclptr <= srcend)\n  {\n    // Scan for literal and repeated sequences...\n    srclcount = srcptr - srclptr;\n    srcrcount = 0;\n\n    while (srcptr <= srcend)\n    {\n      // Extend literal sequence, if any...\n      while (srcptr < srcend && srcptr[0] != srcptr[1])\n\tsrcptr ++;\n\n      srclcount = srcptr - srclptr;\n      srcrcount = 0;\n\n      if (srcptr == srcend)\n      {\n        // Last byte, stop here...\n\tsrcptr ++;\n\tsrclcount ++;\n\tbreak;\n      }\n\n      // Count a run...\n      srcrptr = srcptr;\n\n      while (srcptr < srcend && srcptr[0] == srcptr[1])\n      {\n\tsrcptr ++;\n\tsrcrcount ++;\n      }\n\n      srcptr ++;\n      srcrcount ++;\n\n      // Only stop to encode if the repeated sequence is long enough to make sense...\n      if (srcrcount > 2 || srcrptr == srclptr)\n        break;\n    }\n\n    // Encode literal byte sequences...\n    while (srclcount > 0)\n    {\n      if (srclcount > 128)\n\tcount = 128;\n      else\n\tcount = srclcount;\n\n      *dstptr++ = (unsigned char)(count - 1);\n      memcpy(dstptr, srclptr, count);\n      dstptr += count;\n      srclptr += count;\n      srclcount -= count;\n    }\n\n    // Encode repeated byte sequences...\n    while (srcrcount > 1)\n    {\n      if (srcrcount > 128)\n\tcount = 128;\n      else\n\tcount = srcrcount;\n\n      *dstptr++ = (unsigned char)(257 - count);\n      *dstptr++ = *srcrptr;\n      srcrcount -= count;\n    }\n\n    // Reset the literal pointer and continue...\n    srclptr = srcptr - srcrcount;\n  }\n\n  return ((size_t)(dstptr - dst));\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 719,
    "end_line": 813,
    "code": "ze_t\t\t\t\t\t// O - Number of compressed bytes\nlprintPackBitsCompress(\n    unsigned char       *dst,\t\t// I - Destination buffer\n    const unsigned char *src,\t\t// I - Source buffer\n    size_t              srclen)\t\t// I - Number of source bytes (at least 3)\n{\n  const unsigned char\t*srcptr,\t// Current byte pointer\n\t\t\t*srcend,\t// End-of-line byte pointer\n\t\t\t*srclptr,\t// Start of literal sequence\n\t\t\t*srcrptr;\t// Start of repeated sequence\n  unsigned char\t\t*dstptr;\t// Pointer into compression buffer\n  unsigned\t\tcount,\t\t// Current count\n\t\t\tsrclcount,\t// Count of literal bytes for output\n\t\t\tsrcrcount;\t// Count of repeated bytes for output\n\n\n  // Do TIFF PackBits compression over the source buffer...\n  srcptr = srclptr = src;\n  srcend = src + srclen - 1;\n  dstptr = dst;\n\n  while (srclptr <= srcend)\n  {\n    // Scan for literal and repeated sequences...\n    srclcount = srcptr - srclptr;\n    srcrcount = 0;\n\n    while (srcptr <= srcend)\n    {\n      // Extend literal sequence, if any...\n      while (srcptr < srcend && srcptr[0] != srcptr[1])\n\tsrcptr ++;\n\n      srclcount = srcptr - srclptr;\n      srcrcount = 0;\n\n      if (srcptr == srcend)\n      {\n        // Last byte, stop here...\n\tsrcptr ++;\n\tsrclcount ++;\n\tbreak;\n      }\n\n      // Count a run...\n      srcrptr = srcptr;\n\n      while (srcptr < srcend && srcptr[0] == srcptr[1])\n      {\n\tsrcptr ++;\n\tsrcrcount ++;\n      }\n\n      srcptr ++;\n      srcrcount ++;\n\n      // Only stop to encode if the repeated sequence is long enough to make sense...\n      if (srcrcount > 2 || srcrptr == srclptr)\n        break;\n    }\n\n    // Encode literal byte sequences...\n    while (srclcount > 0)\n    {\n      if (srclcount > 128)\n\tcount = 128;\n      else\n\tcount = srclcount;\n\n      *dstptr++ = (unsigned char)(count - 1);\n      memcpy(dstptr, srclptr, count);\n      dstptr += count;\n      srclptr += count;\n      srclcount -= count;\n    }\n\n    // Encode repeated byte sequences...\n    while (srcrcount > 1)\n    {\n      if (srcrcount > 128)\n\tcount = 128;\n      else\n\tcount = srcrcount;\n\n      *dstptr++ = (unsigned char)(257 - count);\n      *dstptr++ = *srcrptr;\n      srcrcount -= count;\n    }\n\n    // Reset the literal pointer and continue...\n    srclptr = srcptr - srcrcount;\n  }\n\n  return ((size_t)(dstptr - dst));\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 724,
    "end_line": 813,
    "code": "  const unsigned char\t*srcptr,\t// Current byte pointer\n\t\t\t*srcend,\t// End-of-line byte pointer\n\t\t\t*srclptr,\t// Start of literal sequence\n\t\t\t*srcrptr;\t// Start of repeated sequence\n  unsigned char\t\t*dstptr;\t// Pointer into compression buffer\n  unsigned\t\tcount,\t\t// Current count\n\t\t\tsrclcount,\t// Count of literal bytes for output\n\t\t\tsrcrcount;\t// Count of repeated bytes for output\n\n\n  // Do TIFF PackBits compression over the source buffer...\n  srcptr = srclptr = src;\n  srcend = src + srclen - 1;\n  dstptr = dst;\n\n  while (srclptr <= srcend)\n  {\n    // Scan for literal and repeated sequences...\n    srclcount = srcptr - srclptr;\n    srcrcount = 0;\n\n    while (srcptr <= srcend)\n    {\n      // Extend literal sequence, if any...\n      while (srcptr < srcend && srcptr[0] != srcptr[1])\n\tsrcptr ++;\n\n      srclcount = srcptr - srclptr;\n      srcrcount = 0;\n\n      if (srcptr == srcend)\n      {\n        // Last byte, stop here...\n\tsrcptr ++;\n\tsrclcount ++;\n\tbreak;\n      }\n\n      // Count a run...\n      srcrptr = srcptr;\n\n      while (srcptr < srcend && srcptr[0] == srcptr[1])\n      {\n\tsrcptr ++;\n\tsrcrcount ++;\n      }\n\n      srcptr ++;\n      srcrcount ++;\n\n      // Only stop to encode if the repeated sequence is long enough to make sense...\n      if (srcrcount > 2 || srcrptr == srclptr)\n        break;\n    }\n\n    // Encode literal byte sequences...\n    while (srclcount > 0)\n    {\n      if (srclcount > 128)\n\tcount = 128;\n      else\n\tcount = srclcount;\n\n      *dstptr++ = (unsigned char)(count - 1);\n      memcpy(dstptr, srclptr, count);\n      dstptr += count;\n      srclptr += count;\n      srclcount -= count;\n    }\n\n    // Encode repeated byte sequences...\n    while (srcrcount > 1)\n    {\n      if (srcrcount > 128)\n\tcount = 128;\n      else\n\tcount = srcrcount;\n\n      *dstptr++ = (unsigned char)(257 - count);\n      *dstptr++ = *srcrptr;\n      srcrcount -= count;\n    }\n\n    // Reset the literal pointer and continue...\n    srclptr = srcptr - srcrcount;\n  }\n\n  return ((size_t)(dstptr - dst));\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 740,
    "end_line": 810,
    "code": "ile (srclptr <= srcend)\n  {\n    // Scan for literal and repeated sequences...\n    srclcount = srcptr - srclptr;\n    srcrcount = 0;\n\n    while (srcptr <= srcend)\n    {\n      // Extend literal sequence, if any...\n      while (srcptr < srcend && srcptr[0] != srcptr[1])\n\tsrcptr ++;\n\n      srclcount = srcptr - srclptr;\n      srcrcount = 0;\n\n      if (srcptr == srcend)\n      {\n        // Last byte, stop here...\n\tsrcptr ++;\n\tsrclcount ++;\n\tbreak;\n      }\n\n      // Count a run...\n      srcrptr = srcptr;\n\n      while (srcptr < srcend && srcptr[0] == srcptr[1])\n      {\n\tsrcptr ++;\n\tsrcrcount ++;\n      }\n\n      srcptr ++;\n      srcrcount ++;\n\n      // Only stop to encode if the repeated sequence is long enough to make sense...\n      if (srcrcount > 2 || srcrptr == srclptr)\n        break;\n    }\n\n    // Encode literal byte sequences...\n    while (srclcount > 0)\n    {\n      if (srclcount > 128)\n\tcount = 128;\n      else\n\tcount = srclcount;\n\n      *dstptr++ = (unsigned char)(count - 1);\n      memcpy(dstptr, srclptr, count);\n      dstptr += count;\n      srclptr += count;\n      srclcount -= count;\n    }\n\n    // Encode repeated byte sequences...\n    while (srcrcount > 1)\n    {\n      if (srcrcount > 128)\n\tcount = 128;\n      else\n\tcount = srcrcount;\n\n      *dstptr++ = (unsigned char)(257 - count);\n      *dstptr++ = *srcrptr;\n      srcrcount -= count;\n    }\n\n    // Reset the literal pointer and continue...\n    srclptr = srcptr - srcrcount;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 741,
    "end_line": 810,
    "code": "    // Scan for literal and repeated sequences...\n    srclcount = srcptr - srclptr;\n    srcrcount = 0;\n\n    while (srcptr <= srcend)\n    {\n      // Extend literal sequence, if any...\n      while (srcptr < srcend && srcptr[0] != srcptr[1])\n\tsrcptr ++;\n\n      srclcount = srcptr - srclptr;\n      srcrcount = 0;\n\n      if (srcptr == srcend)\n      {\n        // Last byte, stop here...\n\tsrcptr ++;\n\tsrclcount ++;\n\tbreak;\n      }\n\n      // Count a run...\n      srcrptr = srcptr;\n\n      while (srcptr < srcend && srcptr[0] == srcptr[1])\n      {\n\tsrcptr ++;\n\tsrcrcount ++;\n      }\n\n      srcptr ++;\n      srcrcount ++;\n\n      // Only stop to encode if the repeated sequence is long enough to make sense...\n      if (srcrcount > 2 || srcrptr == srclptr)\n        break;\n    }\n\n    // Encode literal byte sequences...\n    while (srclcount > 0)\n    {\n      if (srclcount > 128)\n\tcount = 128;\n      else\n\tcount = srclcount;\n\n      *dstptr++ = (unsigned char)(count - 1);\n      memcpy(dstptr, srclptr, count);\n      dstptr += count;\n      srclptr += count;\n      srclcount -= count;\n    }\n\n    // Encode repeated byte sequences...\n    while (srcrcount > 1)\n    {\n      if (srcrcount > 128)\n\tcount = 128;\n      else\n\tcount = srcrcount;\n\n      *dstptr++ = (unsigned char)(257 - count);\n      *dstptr++ = *srcrptr;\n      srcrcount -= count;\n    }\n\n    // Reset the literal pointer and continue...\n    srclptr = srcptr - srcrcount;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 746,
    "end_line": 778,
    "code": "ile (srcptr <= srcend)\n    {\n      // Extend literal sequence, if any...\n      while (srcptr < srcend && srcptr[0] != srcptr[1])\n\tsrcptr ++;\n\n      srclcount = srcptr - srclptr;\n      srcrcount = 0;\n\n      if (srcptr == srcend)\n      {\n        // Last byte, stop here...\n\tsrcptr ++;\n\tsrclcount ++;\n\tbreak;\n      }\n\n      // Count a run...\n      srcrptr = srcptr;\n\n      while (srcptr < srcend && srcptr[0] == srcptr[1])\n      {\n\tsrcptr ++;\n\tsrcrcount ++;\n      }\n\n      srcptr ++;\n      srcrcount ++;\n\n      // Only stop to encode if the repeated sequence is long enough to make sense...\n      if (srcrcount > 2 || srcrptr == srclptr)\n        break;\n    }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 747,
    "end_line": 778,
    "code": "      // Extend literal sequence, if any...\n      while (srcptr < srcend && srcptr[0] != srcptr[1])\n\tsrcptr ++;\n\n      srclcount = srcptr - srclptr;\n      srcrcount = 0;\n\n      if (srcptr == srcend)\n      {\n        // Last byte, stop here...\n\tsrcptr ++;\n\tsrclcount ++;\n\tbreak;\n      }\n\n      // Count a run...\n      srcrptr = srcptr;\n\n      while (srcptr < srcend && srcptr[0] == srcptr[1])\n      {\n\tsrcptr ++;\n\tsrcrcount ++;\n      }\n\n      srcptr ++;\n      srcrcount ++;\n\n      // Only stop to encode if the repeated sequence is long enough to make sense...\n      if (srcrcount > 2 || srcrptr == srclptr)\n        break;\n    }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 755,
    "end_line": 761,
    "code": " (srcptr == srcend)\n      {\n        // Last byte, stop here...\n\tsrcptr ++;\n\tsrclcount ++;\n\tbreak;\n      }\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function",
    "start_line": 820,
    "end_line": 826,
    "name": "free_cmedia",
    "parent": null,
    "hierarchy": "free_cmedia",
    "code": "atic void\nfree_cmedia(\n    pappl_printer_t        *printer,\t// I - Printer (unused)\n    pappl_pr_driver_data_t *data)\t// I - Driver data\n{\n  free(data->extension);\n}\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function",
    "start_line": 833,
    "end_line": 889,
    "name": null,
    "parent": null,
    "hierarchy": null,
    "code": "atic char *\t\t\t\t// O - Localized string\nlocalize_keyword(\n    pappl_client_t *client,\t\t// I - Client\n    const char     *attrname,\t\t// I - Attribute name\n    const char     *keyword,\t\t// I - Keyword value\n    char           *buffer,\t\t// I - String buffer\n    size_t         bufsize)\t\t// I - Size of string buffer\n{\n  const char\t*loctext;\t\t// Localized text\n  char\t\tkey[256];\t\t// Localization key\n\n\n  snprintf(key, sizeof(key), \"%s.%s\", attrname, keyword);\n  if ((loctext = papplClientGetLocString(client, key)) != key)\n  {\n    // Use localized string...\n    papplCopyString(buffer, loctext, bufsize);\n  }\n  else if (!strcmp(attrname, \"media\"))\n  {\n    // Create a dimensional name for the size...\n    pwg_media_t *pwg = pwgMediaForPWG(keyword);\n\t\t\t\t\t// PWG media size info\n\n    LPRINT_DEBUG(\"localize_keyword: keyword='%s', pwg=%p(%dx%d)\\n\", keyword, pwg, pwg ? pwg->width : 0, pwg ? pwg->length : 0);\n    if (pwg)\n    {\n      if ((pwg->width % 100) == 0 && (pwg->width % 2540) != 0)\n\tsnprintf(buffer, bufsize, \"%d x %dmm Custom Label\", pwg->width / 100, pwg->length / 100);\n      else\n\tsnprintf(buffer, bufsize, \"%g x %g\u02ba Custom Label\", pwg->width / 2540.0, pwg->length / 2540.0);\n    }\n    else\n    {\n      snprintf(buffer, bufsize, \"Invalid '%s'\", keyword);\n    }\n  }\n  else\n  {\n    // Convert \"separated-words\" to \"Separated Words\"...\n    char\t*ptr;\t\t\t// Pointer into string\n\n    papplCopyString(buffer, keyword, bufsize);\n    *buffer = (char)toupper(*buffer & 255);\n\n    for (ptr = buffer + 1; *ptr; ptr ++)\n    {\n      if (*ptr == '-' && ptr[1])\n      {\n\t*ptr++ = ' ';\n\t*ptr   = (char)toupper(*ptr & 255);\n      }\n    }\n  }\n\n  return (buffer);\n}\n\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 833,
    "end_line": 889,
    "code": "atic char *\t\t\t\t// O - Localized string\nlocalize_keyword(\n    pappl_client_t *client,\t\t// I - Client\n    const char     *attrname,\t\t// I - Attribute name\n    const char     *keyword,\t\t// I - Keyword value\n    char           *buffer,\t\t// I - String buffer\n    size_t         bufsize)\t\t// I - Size of string buffer\n{\n  const char\t*loctext;\t\t// Localized text\n  char\t\tkey[256];\t\t// Localization key\n\n\n  snprintf(key, sizeof(key), \"%s.%s\", attrname, keyword);\n  if ((loctext = papplClientGetLocString(client, key)) != key)\n  {\n    // Use localized string...\n    papplCopyString(buffer, loctext, bufsize);\n  }\n  else if (!strcmp(attrname, \"media\"))\n  {\n    // Create a dimensional name for the size...\n    pwg_media_t *pwg = pwgMediaForPWG(keyword);\n\t\t\t\t\t// PWG media size info\n\n    LPRINT_DEBUG(\"localize_keyword: keyword='%s', pwg=%p(%dx%d)\\n\", keyword, pwg, pwg ? pwg->width : 0, pwg ? pwg->length : 0);\n    if (pwg)\n    {\n      if ((pwg->width % 100) == 0 && (pwg->width % 2540) != 0)\n\tsnprintf(buffer, bufsize, \"%d x %dmm Custom Label\", pwg->width / 100, pwg->length / 100);\n      else\n\tsnprintf(buffer, bufsize, \"%g x %g\u02ba Custom Label\", pwg->width / 2540.0, pwg->length / 2540.0);\n    }\n    else\n    {\n      snprintf(buffer, bufsize, \"Invalid '%s'\", keyword);\n    }\n  }\n  else\n  {\n    // Convert \"separated-words\" to \"Separated Words\"...\n    char\t*ptr;\t\t\t// Pointer into string\n\n    papplCopyString(buffer, keyword, bufsize);\n    *buffer = (char)toupper(*buffer & 255);\n\n    for (ptr = buffer + 1; *ptr; ptr ++)\n    {\n      if (*ptr == '-' && ptr[1])\n      {\n\t*ptr++ = ' ';\n\t*ptr   = (char)toupper(*ptr & 255);\n      }\n    }\n  }\n\n  return (buffer);\n}\n\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 833,
    "end_line": 889,
    "code": "atic char *\t\t\t\t// O - Localized string\nlocalize_keyword(\n    pappl_client_t *client,\t\t// I - Client\n    const char     *attrname,\t\t// I - Attribute name\n    const char     *keyword,\t\t// I - Keyword value\n    char           *buffer,\t\t// I - String buffer\n    size_t         bufsize)\t\t// I - Size of string buffer\n{\n  const char\t*loctext;\t\t// Localized text\n  char\t\tkey[256];\t\t// Localization key\n\n\n  snprintf(key, sizeof(key), \"%s.%s\", attrname, keyword);\n  if ((loctext = papplClientGetLocString(client, key)) != key)\n  {\n    // Use localized string...\n    papplCopyString(buffer, loctext, bufsize);\n  }\n  else if (!strcmp(attrname, \"media\"))\n  {\n    // Create a dimensional name for the size...\n    pwg_media_t *pwg = pwgMediaForPWG(keyword);\n\t\t\t\t\t// PWG media size info\n\n    LPRINT_DEBUG(\"localize_keyword: keyword='%s', pwg=%p(%dx%d)\\n\", keyword, pwg, pwg ? pwg->width : 0, pwg ? pwg->length : 0);\n    if (pwg)\n    {\n      if ((pwg->width % 100) == 0 && (pwg->width % 2540) != 0)\n\tsnprintf(buffer, bufsize, \"%d x %dmm Custom Label\", pwg->width / 100, pwg->length / 100);\n      else\n\tsnprintf(buffer, bufsize, \"%g x %g\u02ba Custom Label\", pwg->width / 2540.0, pwg->length / 2540.0);\n    }\n    else\n    {\n      snprintf(buffer, bufsize, \"Invalid '%s'\", keyword);\n    }\n  }\n  else\n  {\n    // Convert \"separated-words\" to \"Separated Words\"...\n    char\t*ptr;\t\t\t// Pointer into string\n\n    papplCopyString(buffer, keyword, bufsize);\n    *buffer = (char)toupper(*buffer & 255);\n\n    for (ptr = buffer + 1; *ptr; ptr ++)\n    {\n      if (*ptr == '-' && ptr[1])\n      {\n\t*ptr++ = ' ';\n\t*ptr   = (char)toupper(*ptr & 255);\n      }\n    }\n  }\n\n  return (buffer);\n}\n\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 840,
    "end_line": 889,
    "code": "  const char\t*loctext;\t\t// Localized text\n  char\t\tkey[256];\t\t// Localization key\n\n\n  snprintf(key, sizeof(key), \"%s.%s\", attrname, keyword);\n  if ((loctext = papplClientGetLocString(client, key)) != key)\n  {\n    // Use localized string...\n    papplCopyString(buffer, loctext, bufsize);\n  }\n  else if (!strcmp(attrname, \"media\"))\n  {\n    // Create a dimensional name for the size...\n    pwg_media_t *pwg = pwgMediaForPWG(keyword);\n\t\t\t\t\t// PWG media size info\n\n    LPRINT_DEBUG(\"localize_keyword: keyword='%s', pwg=%p(%dx%d)\\n\", keyword, pwg, pwg ? pwg->width : 0, pwg ? pwg->length : 0);\n    if (pwg)\n    {\n      if ((pwg->width % 100) == 0 && (pwg->width % 2540) != 0)\n\tsnprintf(buffer, bufsize, \"%d x %dmm Custom Label\", pwg->width / 100, pwg->length / 100);\n      else\n\tsnprintf(buffer, bufsize, \"%g x %g\u02ba Custom Label\", pwg->width / 2540.0, pwg->length / 2540.0);\n    }\n    else\n    {\n      snprintf(buffer, bufsize, \"Invalid '%s'\", keyword);\n    }\n  }\n  else\n  {\n    // Convert \"separated-words\" to \"Separated Words\"...\n    char\t*ptr;\t\t\t// Pointer into string\n\n    papplCopyString(buffer, keyword, bufsize);\n    *buffer = (char)toupper(*buffer & 255);\n\n    for (ptr = buffer + 1; *ptr; ptr ++)\n    {\n      if (*ptr == '-' && ptr[1])\n      {\n\t*ptr++ = ' ';\n\t*ptr   = (char)toupper(*ptr & 255);\n      }\n    }\n  }\n\n  return (buffer);\n}\n\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 840,
    "end_line": 889,
    "code": "  const char\t*loctext;\t\t// Localized text\n  char\t\tkey[256];\t\t// Localization key\n\n\n  snprintf(key, sizeof(key), \"%s.%s\", attrname, keyword);\n  if ((loctext = papplClientGetLocString(client, key)) != key)\n  {\n    // Use localized string...\n    papplCopyString(buffer, loctext, bufsize);\n  }\n  else if (!strcmp(attrname, \"media\"))\n  {\n    // Create a dimensional name for the size...\n    pwg_media_t *pwg = pwgMediaForPWG(keyword);\n\t\t\t\t\t// PWG media size info\n\n    LPRINT_DEBUG(\"localize_keyword: keyword='%s', pwg=%p(%dx%d)\\n\", keyword, pwg, pwg ? pwg->width : 0, pwg ? pwg->length : 0);\n    if (pwg)\n    {\n      if ((pwg->width % 100) == 0 && (pwg->width % 2540) != 0)\n\tsnprintf(buffer, bufsize, \"%d x %dmm Custom Label\", pwg->width / 100, pwg->length / 100);\n      else\n\tsnprintf(buffer, bufsize, \"%g x %g\u02ba Custom Label\", pwg->width / 2540.0, pwg->length / 2540.0);\n    }\n    else\n    {\n      snprintf(buffer, bufsize, \"Invalid '%s'\", keyword);\n    }\n  }\n  else\n  {\n    // Convert \"separated-words\" to \"Separated Words\"...\n    char\t*ptr;\t\t\t// Pointer into string\n\n    papplCopyString(buffer, keyword, bufsize);\n    *buffer = (char)toupper(*buffer & 255);\n\n    for (ptr = buffer + 1; *ptr; ptr ++)\n    {\n      if (*ptr == '-' && ptr[1])\n      {\n\t*ptr++ = ' ';\n\t*ptr   = (char)toupper(*ptr & 255);\n      }\n    }\n  }\n\n  return (buffer);\n}\n\n\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 846,
    "end_line": 886,
    "code": " ((loctext = papplClientGetLocString(client, key)) != key)\n  {\n    // Use localized string...\n    papplCopyString(buffer, loctext, bufsize);\n  }\n  else if (!strcmp(attrname, \"media\"))\n  {\n    // Create a dimensional name for the size...\n    pwg_media_t *pwg = pwgMediaForPWG(keyword);\n\t\t\t\t\t// PWG media size info\n\n    LPRINT_DEBUG(\"localize_keyword: keyword='%s', pwg=%p(%dx%d)\\n\", keyword, pwg, pwg ? pwg->width : 0, pwg ? pwg->length : 0);\n    if (pwg)\n    {\n      if ((pwg->width % 100) == 0 && (pwg->width % 2540) != 0)\n\tsnprintf(buffer, bufsize, \"%d x %dmm Custom Label\", pwg->width / 100, pwg->length / 100);\n      else\n\tsnprintf(buffer, bufsize, \"%g x %g\u02ba Custom Label\", pwg->width / 2540.0, pwg->length / 2540.0);\n    }\n    else\n    {\n      snprintf(buffer, bufsize, \"Invalid '%s'\", keyword);\n    }\n  }\n  else\n  {\n    // Convert \"separated-words\" to \"Separated Words\"...\n    char\t*ptr;\t\t\t// Pointer into string\n\n    papplCopyString(buffer, keyword, bufsize);\n    *buffer = (char)toupper(*buffer & 255);\n\n    for (ptr = buffer + 1; *ptr; ptr ++)\n    {\n      if (*ptr == '-' && ptr[1])\n      {\n\t*ptr++ = ' ';\n\t*ptr   = (char)toupper(*ptr & 255);\n      }\n    }\n  }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 846,
    "end_line": 886,
    "code": " ((loctext = papplClientGetLocString(client, key)) != key)\n  {\n    // Use localized string...\n    papplCopyString(buffer, loctext, bufsize);\n  }\n  else if (!strcmp(attrname, \"media\"))\n  {\n    // Create a dimensional name for the size...\n    pwg_media_t *pwg = pwgMediaForPWG(keyword);\n\t\t\t\t\t// PWG media size info\n\n    LPRINT_DEBUG(\"localize_keyword: keyword='%s', pwg=%p(%dx%d)\\n\", keyword, pwg, pwg ? pwg->width : 0, pwg ? pwg->length : 0);\n    if (pwg)\n    {\n      if ((pwg->width % 100) == 0 && (pwg->width % 2540) != 0)\n\tsnprintf(buffer, bufsize, \"%d x %dmm Custom Label\", pwg->width / 100, pwg->length / 100);\n      else\n\tsnprintf(buffer, bufsize, \"%g x %g\u02ba Custom Label\", pwg->width / 2540.0, pwg->length / 2540.0);\n    }\n    else\n    {\n      snprintf(buffer, bufsize, \"Invalid '%s'\", keyword);\n    }\n  }\n  else\n  {\n    // Convert \"separated-words\" to \"Separated Words\"...\n    char\t*ptr;\t\t\t// Pointer into string\n\n    papplCopyString(buffer, keyword, bufsize);\n    *buffer = (char)toupper(*buffer & 255);\n\n    for (ptr = buffer + 1; *ptr; ptr ++)\n    {\n      if (*ptr == '-' && ptr[1])\n      {\n\t*ptr++ = ' ';\n\t*ptr   = (char)toupper(*ptr & 255);\n      }\n    }\n  }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 851,
    "end_line": 886,
    "code": "se if (!strcmp(attrname, \"media\"))\n  {\n    // Create a dimensional name for the size...\n    pwg_media_t *pwg = pwgMediaForPWG(keyword);\n\t\t\t\t\t// PWG media size info\n\n    LPRINT_DEBUG(\"localize_keyword: keyword='%s', pwg=%p(%dx%d)\\n\", keyword, pwg, pwg ? pwg->width : 0, pwg ? pwg->length : 0);\n    if (pwg)\n    {\n      if ((pwg->width % 100) == 0 && (pwg->width % 2540) != 0)\n\tsnprintf(buffer, bufsize, \"%d x %dmm Custom Label\", pwg->width / 100, pwg->length / 100);\n      else\n\tsnprintf(buffer, bufsize, \"%g x %g\u02ba Custom Label\", pwg->width / 2540.0, pwg->length / 2540.0);\n    }\n    else\n    {\n      snprintf(buffer, bufsize, \"Invalid '%s'\", keyword);\n    }\n  }\n  else\n  {\n    // Convert \"separated-words\" to \"Separated Words\"...\n    char\t*ptr;\t\t\t// Pointer into string\n\n    papplCopyString(buffer, keyword, bufsize);\n    *buffer = (char)toupper(*buffer & 255);\n\n    for (ptr = buffer + 1; *ptr; ptr ++)\n    {\n      if (*ptr == '-' && ptr[1])\n      {\n\t*ptr++ = ' ';\n\t*ptr   = (char)toupper(*ptr & 255);\n      }\n    }\n  }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 851,
    "end_line": 886,
    "code": "se if (!strcmp(attrname, \"media\"))\n  {\n    // Create a dimensional name for the size...\n    pwg_media_t *pwg = pwgMediaForPWG(keyword);\n\t\t\t\t\t// PWG media size info\n\n    LPRINT_DEBUG(\"localize_keyword: keyword='%s', pwg=%p(%dx%d)\\n\", keyword, pwg, pwg ? pwg->width : 0, pwg ? pwg->length : 0);\n    if (pwg)\n    {\n      if ((pwg->width % 100) == 0 && (pwg->width % 2540) != 0)\n\tsnprintf(buffer, bufsize, \"%d x %dmm Custom Label\", pwg->width / 100, pwg->length / 100);\n      else\n\tsnprintf(buffer, bufsize, \"%g x %g\u02ba Custom Label\", pwg->width / 2540.0, pwg->length / 2540.0);\n    }\n    else\n    {\n      snprintf(buffer, bufsize, \"Invalid '%s'\", keyword);\n    }\n  }\n  else\n  {\n    // Convert \"separated-words\" to \"Separated Words\"...\n    char\t*ptr;\t\t\t// Pointer into string\n\n    papplCopyString(buffer, keyword, bufsize);\n    *buffer = (char)toupper(*buffer & 255);\n\n    for (ptr = buffer + 1; *ptr; ptr ++)\n    {\n      if (*ptr == '-' && ptr[1])\n      {\n\t*ptr++ = ' ';\n\t*ptr   = (char)toupper(*ptr & 255);\n      }\n    }\n  }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 851,
    "end_line": 886,
    "code": " (!strcmp(attrname, \"media\"))\n  {\n    // Create a dimensional name for the size...\n    pwg_media_t *pwg = pwgMediaForPWG(keyword);\n\t\t\t\t\t// PWG media size info\n\n    LPRINT_DEBUG(\"localize_keyword: keyword='%s', pwg=%p(%dx%d)\\n\", keyword, pwg, pwg ? pwg->width : 0, pwg ? pwg->length : 0);\n    if (pwg)\n    {\n      if ((pwg->width % 100) == 0 && (pwg->width % 2540) != 0)\n\tsnprintf(buffer, bufsize, \"%d x %dmm Custom Label\", pwg->width / 100, pwg->length / 100);\n      else\n\tsnprintf(buffer, bufsize, \"%g x %g\u02ba Custom Label\", pwg->width / 2540.0, pwg->length / 2540.0);\n    }\n    else\n    {\n      snprintf(buffer, bufsize, \"Invalid '%s'\", keyword);\n    }\n  }\n  else\n  {\n    // Convert \"separated-words\" to \"Separated Words\"...\n    char\t*ptr;\t\t\t// Pointer into string\n\n    papplCopyString(buffer, keyword, bufsize);\n    *buffer = (char)toupper(*buffer & 255);\n\n    for (ptr = buffer + 1; *ptr; ptr ++)\n    {\n      if (*ptr == '-' && ptr[1])\n      {\n\t*ptr++ = ' ';\n\t*ptr   = (char)toupper(*ptr & 255);\n      }\n    }\n  }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 851,
    "end_line": 886,
    "code": " (!strcmp(attrname, \"media\"))\n  {\n    // Create a dimensional name for the size...\n    pwg_media_t *pwg = pwgMediaForPWG(keyword);\n\t\t\t\t\t// PWG media size info\n\n    LPRINT_DEBUG(\"localize_keyword: keyword='%s', pwg=%p(%dx%d)\\n\", keyword, pwg, pwg ? pwg->width : 0, pwg ? pwg->length : 0);\n    if (pwg)\n    {\n      if ((pwg->width % 100) == 0 && (pwg->width % 2540) != 0)\n\tsnprintf(buffer, bufsize, \"%d x %dmm Custom Label\", pwg->width / 100, pwg->length / 100);\n      else\n\tsnprintf(buffer, bufsize, \"%g x %g\u02ba Custom Label\", pwg->width / 2540.0, pwg->length / 2540.0);\n    }\n    else\n    {\n      snprintf(buffer, bufsize, \"Invalid '%s'\", keyword);\n    }\n  }\n  else\n  {\n    // Convert \"separated-words\" to \"Separated Words\"...\n    char\t*ptr;\t\t\t// Pointer into string\n\n    papplCopyString(buffer, keyword, bufsize);\n    *buffer = (char)toupper(*buffer & 255);\n\n    for (ptr = buffer + 1; *ptr; ptr ++)\n    {\n      if (*ptr == '-' && ptr[1])\n      {\n\t*ptr++ = ' ';\n\t*ptr   = (char)toupper(*ptr & 255);\n      }\n    }\n  }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 852,
    "end_line": 869,
    "code": "    // Create a dimensional name for the size...\n    pwg_media_t *pwg = pwgMediaForPWG(keyword);\n\t\t\t\t\t// PWG media size info\n\n    LPRINT_DEBUG(\"localize_keyword: keyword='%s', pwg=%p(%dx%d)\\n\", keyword, pwg, pwg ? pwg->width : 0, pwg ? pwg->length : 0);\n    if (pwg)\n    {\n      if ((pwg->width % 100) == 0 && (pwg->width % 2540) != 0)\n\tsnprintf(buffer, bufsize, \"%d x %dmm Custom Label\", pwg->width / 100, pwg->length / 100);\n      else\n\tsnprintf(buffer, bufsize, \"%g x %g\u02ba Custom Label\", pwg->width / 2540.0, pwg->length / 2540.0);\n    }\n    else\n    {\n      snprintf(buffer, bufsize, \"Invalid '%s'\", keyword);\n    }\n  }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 852,
    "end_line": 869,
    "code": "    // Create a dimensional name for the size...\n    pwg_media_t *pwg = pwgMediaForPWG(keyword);\n\t\t\t\t\t// PWG media size info\n\n    LPRINT_DEBUG(\"localize_keyword: keyword='%s', pwg=%p(%dx%d)\\n\", keyword, pwg, pwg ? pwg->width : 0, pwg ? pwg->length : 0);\n    if (pwg)\n    {\n      if ((pwg->width % 100) == 0 && (pwg->width % 2540) != 0)\n\tsnprintf(buffer, bufsize, \"%d x %dmm Custom Label\", pwg->width / 100, pwg->length / 100);\n      else\n\tsnprintf(buffer, bufsize, \"%g x %g\u02ba Custom Label\", pwg->width / 2540.0, pwg->length / 2540.0);\n    }\n    else\n    {\n      snprintf(buffer, bufsize, \"Invalid '%s'\", keyword);\n    }\n  }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "global_variable",
    "start_line": 854,
    "end_line": 854,
    "code": "g_media_t *pwg = pwgMediaForPWG(keyword);\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 857,
    "end_line": 857,
    "code": "RINT_DEBUG(\"localize_keyword: keyword='%s', pwg=%p(%dx%d)\\n\", keyword, pwg, pwg ? pwg->width : 0, pwg ? pwg->length : 0);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 857,
    "end_line": 857,
    "code": "RINT_DEBUG(\"localize_keyword: keyword='%s', pwg=%p(%dx%d)\\n\", keyword, pwg, pwg ? pwg->width : 0, pwg ? pwg->length : 0);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 857,
    "end_line": 857,
    "code": "RINT_DEBUG(\"localize_keyword: keyword='%s', pwg=%p(%dx%d)\\n\", keyword, pwg, pwg ? pwg->width : 0, pwg ? pwg->length : 0);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 857,
    "end_line": 857,
    "code": "RINT_DEBUG(\"localize_keyword: keyword='%s', pwg=%p(%dx%d)\\n\", keyword, pwg, pwg ? pwg->width : 0, pwg ? pwg->length : 0);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 857,
    "end_line": 857,
    "code": "localize_keyword: keyword='%s', pwg=%p(%dx%d)\\n\", keyword, pwg, pwg ? pwg->width : 0, pwg ? pwg->length : 0);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 857,
    "end_line": 857,
    "code": "localize_keyword: keyword='%s', pwg=%p(%dx%d)\\n\", keyword, pwg, pwg ? pwg->width : 0, pwg ? pwg->length : 0);\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 858,
    "end_line": 868,
    "code": " (pwg)\n    {\n      if ((pwg->width % 100) == 0 && (pwg->width % 2540) != 0)\n\tsnprintf(buffer, bufsize, \"%d x %dmm Custom Label\", pwg->width / 100, pwg->length / 100);\n      else\n\tsnprintf(buffer, bufsize, \"%g x %g\u02ba Custom Label\", pwg->width / 2540.0, pwg->length / 2540.0);\n    }\n    else\n    {\n      snprintf(buffer, bufsize, \"Invalid '%s'\", keyword);\n    }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 858,
    "end_line": 868,
    "code": " (pwg)\n    {\n      if ((pwg->width % 100) == 0 && (pwg->width % 2540) != 0)\n\tsnprintf(buffer, bufsize, \"%d x %dmm Custom Label\", pwg->width / 100, pwg->length / 100);\n      else\n\tsnprintf(buffer, bufsize, \"%g x %g\u02ba Custom Label\", pwg->width / 2540.0, pwg->length / 2540.0);\n    }\n    else\n    {\n      snprintf(buffer, bufsize, \"Invalid '%s'\", keyword);\n    }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 859,
    "end_line": 864,
    "code": "      if ((pwg->width % 100) == 0 && (pwg->width % 2540) != 0)\n\tsnprintf(buffer, bufsize, \"%d x %dmm Custom Label\", pwg->width / 100, pwg->length / 100);\n      else\n\tsnprintf(buffer, bufsize, \"%g x %g\u02ba Custom Label\", pwg->width / 2540.0, pwg->length / 2540.0);\n    }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 859,
    "end_line": 864,
    "code": "      if ((pwg->width % 100) == 0 && (pwg->width % 2540) != 0)\n\tsnprintf(buffer, bufsize, \"%d x %dmm Custom Label\", pwg->width / 100, pwg->length / 100);\n      else\n\tsnprintf(buffer, bufsize, \"%g x %g\u02ba Custom Label\", pwg->width / 2540.0, pwg->length / 2540.0);\n    }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 860,
    "end_line": 863,
    "code": " ((pwg->width % 100) == 0 && (pwg->width % 2540) != 0)\n\tsnprintf(buffer, bufsize, \"%d x %dmm Custom Label\", pwg->width / 100, pwg->length / 100);\n      else\n\tsnprintf(buffer, bufsize, \"%g x %g\u02ba Custom Label\", pwg->width / 2540.0, pwg->length / 2540.0);\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 860,
    "end_line": 863,
    "code": " ((pwg->width % 100) == 0 && (pwg->width % 2540) != 0)\n\tsnprintf(buffer, bufsize, \"%d x %dmm Custom Label\", pwg->width / 100, pwg->length / 100);\n      else\n\tsnprintf(buffer, bufsize, \"%g x %g\u02ba Custom Label\", pwg->width / 2540.0, pwg->length / 2540.0);\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 860,
    "end_line": 860,
    "code": "pwg->width % 100) == 0 && (pwg->width % 2540) != 0)\n\t",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 860,
    "end_line": 860,
    "code": "wg->width % 100) == 0 && (pwg->width % 2540) != 0)\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "anonymous_initializer_block",
    "start_line": 865,
    "end_line": 868,
    "code": "e\n    {\n      snprintf(buffer, bufsize, \"Invalid '%s'\", keyword);\n    }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 870,
    "end_line": 886,
    "code": "e\n  {\n    // Convert \"separated-words\" to \"Separated Words\"...\n    char\t*ptr;\t\t\t// Pointer into string\n\n    papplCopyString(buffer, keyword, bufsize);\n    *buffer = (char)toupper(*buffer & 255);\n\n    for (ptr = buffer + 1; *ptr; ptr ++)\n    {\n      if (*ptr == '-' && ptr[1])\n      {\n\t*ptr++ = ' ';\n\t*ptr   = (char)toupper(*ptr & 255);\n      }\n    }\n  }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 871,
    "end_line": 886,
    "code": "   // Convert \"separated-words\" to \"Separated Words\"...\n    char\t*ptr;\t\t\t// Pointer into string\n\n    papplCopyString(buffer, keyword, bufsize);\n    *buffer = (char)toupper(*buffer & 255);\n\n    for (ptr = buffer + 1; *ptr; ptr ++)\n    {\n      if (*ptr == '-' && ptr[1])\n      {\n\t*ptr++ = ' ';\n\t*ptr   = (char)toupper(*ptr & 255);\n      }\n    }\n  }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function",
    "start_line": 896,
    "end_line": 1039,
    "name": "media_chooser",
    "parent": null,
    "hierarchy": "media_chooser",
    "code": "tic void\nmedia_chooser(\n    pappl_client_t         *client,\t// I - Client\n    pappl_pr_driver_data_t *driver_data,// I - Driver data\n    const char             *title,\t// I - Title for field\n    const char             *name,\t// I - Form name/prefix\n    pappl_media_col_t      *media)\t// I - Current media values\n{\n  int\t\ti,\t\t\t// Looping vars\n\t\tcur_index = 0,\t\t// Current size index\n\t        sel_index = 0;\t\t// Selected size index...\n  pwg_media_t\t*pwg;\t\t\t// PWG media size info\n  char\t\ttext[256];\t\t// Localized text\n  const char\t*min_size = NULL,\t// Minimum size\n\t\t*max_size = NULL;\t// Maximum size\n\n\n  // media-size\n  papplLocFormatString(papplClientGetLoc(client), text, sizeof(text), \"%s Media\", title);\n  papplClientHTMLPrintf(client, \"              <tr><th>%s:</th><td>\", text);\n  for (i = 0; i < driver_data->num_media && (!min_size || !max_size); i ++)\n  {\n    if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n        min_size = driver_data->media[i];\n      else if (strstr(driver_data->media[i], \"_max_\"))\n        max_size = driver_data->media[i];\n    }\n  }\n  if (min_size && max_size)\n  {\n    papplClientHTMLPrintf(client, \"<select name=\\\"%s-size\\\" onChange=\\\"show_hide_custom('%s');\\\"><option value=\\\"custom\\\">%s</option>\", name, name, papplClientGetLocString(client, \"New Custom Size\"));\n    cur_index ++;\n  }\n  else\n    papplClientHTMLPrintf(client, \"<select name=\\\"%s-size\\\">\", name);\n\n  for (i = 0; i < driver_data->num_media; i ++)\n  {\n    if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n      {\n        min_size = driver_data->media[i];\n        continue;\n      }\n      else if (strstr(driver_data->media[i], \"_max_\"))\n      {\n        max_size = driver_data->media[i];\n        continue;\n      }\n    }\n\n    if (!strcmp(driver_data->media[i], media->size_name))\n      sel_index = cur_index;\n\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->media[i], sel_index == cur_index ? \" selected\" : \"\", localize_keyword(client, \"media\", driver_data->media[i], text, sizeof(text)));\n    cur_index ++;\n  }\n\n  if (min_size && max_size)\n  {\n    int cur_width, min_width, max_width;// Current/min/max width\n    int cur_length, min_length, max_length;\n\t\t\t\t\t// Current/min/max length\n    const char *cur_units;\t\t// Current units\n\n    if ((pwg = pwgMediaForPWG(min_size)) != NULL)\n    {\n      min_width  = pwg->width;\n      min_length = pwg->length;\n    }\n    else\n    {\n      min_width  = 1 * 2540;\n      min_length = 1 * 2540;\n    }\n\n    if ((pwg = pwgMediaForPWG(max_size)) != NULL)\n    {\n      max_width  = pwg->width;\n      max_length = pwg->length;\n    }\n    else\n    {\n      max_width  = 9 * 2540;\n      max_length = 22 * 2540;\n    }\n\n    if ((cur_width = media->size_width) < min_width)\n      cur_width = min_width;\n    else if (cur_width > max_width)\n      cur_width = max_width;\n\n    if ((cur_length = media->size_length) < min_length)\n      cur_length = min_length;\n    else if (cur_length > max_length)\n      cur_length = max_length;\n\n    if ((cur_units = media->size_name + strlen(media->size_name) - 2) < media->size_name)\n      cur_units = \"in\";\n\n    if (!strcmp(cur_units, \"mm\"))\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\"><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\" checked><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 100.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 100.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n    else\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\" checked><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\"><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 2540.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 2540.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n  }\n  else\n  {\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n  // media-tracking (if needed)\n  if (driver_data->tracking_supported)\n  {\n    pappl_media_tracking_t tracking;\t// Tracking value\n    static const char * const trackings[] =\n    {\t\t\t\t\t// Tracking strings\n      \"continuous\",\n      \"gap\",\n      \"mark\",\n      \"web\"\n    };\n\n    papplClientHTMLPrintf(client, \"                <select name=\\\"%s-tracking\\\">\", name);\n    for (i = 0, tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS; tracking <= PAPPL_MEDIA_TRACKING_WEB; i ++, tracking *= 2)\n    {\n      if (!(driver_data->tracking_supported & tracking))\n\tcontinue;\n\n      papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n    }\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n  // media-type\n  papplClientHTMLPrintf(client, \"                <select name=\\\"%s-type\\\">\", name);\n  for (i = 0; i < driver_data->num_type; i ++)\n  {\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->type[i], !strcmp(driver_data->type[i], media->type) ? \" selected\" : \"\", localize_keyword(client, \"media-type\", driver_data->type[i], text, sizeof(text)));\n  }\n  papplClientHTMLPrintf(client, \"</select></td></tr>\\n\");\n}\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 896,
    "end_line": 1039,
    "code": "tic void\nmedia_chooser(\n    pappl_client_t         *client,\t// I - Client\n    pappl_pr_driver_data_t *driver_data,// I - Driver data\n    const char             *title,\t// I - Title for field\n    const char             *name,\t// I - Form name/prefix\n    pappl_media_col_t      *media)\t// I - Current media values\n{\n  int\t\ti,\t\t\t// Looping vars\n\t\tcur_index = 0,\t\t// Current size index\n\t        sel_index = 0;\t\t// Selected size index...\n  pwg_media_t\t*pwg;\t\t\t// PWG media size info\n  char\t\ttext[256];\t\t// Localized text\n  const char\t*min_size = NULL,\t// Minimum size\n\t\t*max_size = NULL;\t// Maximum size\n\n\n  // media-size\n  papplLocFormatString(papplClientGetLoc(client), text, sizeof(text), \"%s Media\", title);\n  papplClientHTMLPrintf(client, \"              <tr><th>%s:</th><td>\", text);\n  for (i = 0; i < driver_data->num_media && (!min_size || !max_size); i ++)\n  {\n    if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n        min_size = driver_data->media[i];\n      else if (strstr(driver_data->media[i], \"_max_\"))\n        max_size = driver_data->media[i];\n    }\n  }\n  if (min_size && max_size)\n  {\n    papplClientHTMLPrintf(client, \"<select name=\\\"%s-size\\\" onChange=\\\"show_hide_custom('%s');\\\"><option value=\\\"custom\\\">%s</option>\", name, name, papplClientGetLocString(client, \"New Custom Size\"));\n    cur_index ++;\n  }\n  else\n    papplClientHTMLPrintf(client, \"<select name=\\\"%s-size\\\">\", name);\n\n  for (i = 0; i < driver_data->num_media; i ++)\n  {\n    if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n      {\n        min_size = driver_data->media[i];\n        continue;\n      }\n      else if (strstr(driver_data->media[i], \"_max_\"))\n      {\n        max_size = driver_data->media[i];\n        continue;\n      }\n    }\n\n    if (!strcmp(driver_data->media[i], media->size_name))\n      sel_index = cur_index;\n\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->media[i], sel_index == cur_index ? \" selected\" : \"\", localize_keyword(client, \"media\", driver_data->media[i], text, sizeof(text)));\n    cur_index ++;\n  }\n\n  if (min_size && max_size)\n  {\n    int cur_width, min_width, max_width;// Current/min/max width\n    int cur_length, min_length, max_length;\n\t\t\t\t\t// Current/min/max length\n    const char *cur_units;\t\t// Current units\n\n    if ((pwg = pwgMediaForPWG(min_size)) != NULL)\n    {\n      min_width  = pwg->width;\n      min_length = pwg->length;\n    }\n    else\n    {\n      min_width  = 1 * 2540;\n      min_length = 1 * 2540;\n    }\n\n    if ((pwg = pwgMediaForPWG(max_size)) != NULL)\n    {\n      max_width  = pwg->width;\n      max_length = pwg->length;\n    }\n    else\n    {\n      max_width  = 9 * 2540;\n      max_length = 22 * 2540;\n    }\n\n    if ((cur_width = media->size_width) < min_width)\n      cur_width = min_width;\n    else if (cur_width > max_width)\n      cur_width = max_width;\n\n    if ((cur_length = media->size_length) < min_length)\n      cur_length = min_length;\n    else if (cur_length > max_length)\n      cur_length = max_length;\n\n    if ((cur_units = media->size_name + strlen(media->size_name) - 2) < media->size_name)\n      cur_units = \"in\";\n\n    if (!strcmp(cur_units, \"mm\"))\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\"><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\" checked><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 100.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 100.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n    else\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\" checked><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\"><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 2540.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 2540.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n  }\n  else\n  {\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n  // media-tracking (if needed)\n  if (driver_data->tracking_supported)\n  {\n    pappl_media_tracking_t tracking;\t// Tracking value\n    static const char * const trackings[] =\n    {\t\t\t\t\t// Tracking strings\n      \"continuous\",\n      \"gap\",\n      \"mark\",\n      \"web\"\n    };\n\n    papplClientHTMLPrintf(client, \"                <select name=\\\"%s-tracking\\\">\", name);\n    for (i = 0, tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS; tracking <= PAPPL_MEDIA_TRACKING_WEB; i ++, tracking *= 2)\n    {\n      if (!(driver_data->tracking_supported & tracking))\n\tcontinue;\n\n      papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n    }\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n  // media-type\n  papplClientHTMLPrintf(client, \"                <select name=\\\"%s-type\\\">\", name);\n  for (i = 0; i < driver_data->num_type; i ++)\n  {\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->type[i], !strcmp(driver_data->type[i], media->type) ? \" selected\" : \"\", localize_keyword(client, \"media-type\", driver_data->type[i], text, sizeof(text)));\n  }\n  papplClientHTMLPrintf(client, \"</select></td></tr>\\n\");\n}\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 896,
    "end_line": 1039,
    "code": "tic void\nmedia_chooser(\n    pappl_client_t         *client,\t// I - Client\n    pappl_pr_driver_data_t *driver_data,// I - Driver data\n    const char             *title,\t// I - Title for field\n    const char             *name,\t// I - Form name/prefix\n    pappl_media_col_t      *media)\t// I - Current media values\n{\n  int\t\ti,\t\t\t// Looping vars\n\t\tcur_index = 0,\t\t// Current size index\n\t        sel_index = 0;\t\t// Selected size index...\n  pwg_media_t\t*pwg;\t\t\t// PWG media size info\n  char\t\ttext[256];\t\t// Localized text\n  const char\t*min_size = NULL,\t// Minimum size\n\t\t*max_size = NULL;\t// Maximum size\n\n\n  // media-size\n  papplLocFormatString(papplClientGetLoc(client), text, sizeof(text), \"%s Media\", title);\n  papplClientHTMLPrintf(client, \"              <tr><th>%s:</th><td>\", text);\n  for (i = 0; i < driver_data->num_media && (!min_size || !max_size); i ++)\n  {\n    if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n        min_size = driver_data->media[i];\n      else if (strstr(driver_data->media[i], \"_max_\"))\n        max_size = driver_data->media[i];\n    }\n  }\n  if (min_size && max_size)\n  {\n    papplClientHTMLPrintf(client, \"<select name=\\\"%s-size\\\" onChange=\\\"show_hide_custom('%s');\\\"><option value=\\\"custom\\\">%s</option>\", name, name, papplClientGetLocString(client, \"New Custom Size\"));\n    cur_index ++;\n  }\n  else\n    papplClientHTMLPrintf(client, \"<select name=\\\"%s-size\\\">\", name);\n\n  for (i = 0; i < driver_data->num_media; i ++)\n  {\n    if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n      {\n        min_size = driver_data->media[i];\n        continue;\n      }\n      else if (strstr(driver_data->media[i], \"_max_\"))\n      {\n        max_size = driver_data->media[i];\n        continue;\n      }\n    }\n\n    if (!strcmp(driver_data->media[i], media->size_name))\n      sel_index = cur_index;\n\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->media[i], sel_index == cur_index ? \" selected\" : \"\", localize_keyword(client, \"media\", driver_data->media[i], text, sizeof(text)));\n    cur_index ++;\n  }\n\n  if (min_size && max_size)\n  {\n    int cur_width, min_width, max_width;// Current/min/max width\n    int cur_length, min_length, max_length;\n\t\t\t\t\t// Current/min/max length\n    const char *cur_units;\t\t// Current units\n\n    if ((pwg = pwgMediaForPWG(min_size)) != NULL)\n    {\n      min_width  = pwg->width;\n      min_length = pwg->length;\n    }\n    else\n    {\n      min_width  = 1 * 2540;\n      min_length = 1 * 2540;\n    }\n\n    if ((pwg = pwgMediaForPWG(max_size)) != NULL)\n    {\n      max_width  = pwg->width;\n      max_length = pwg->length;\n    }\n    else\n    {\n      max_width  = 9 * 2540;\n      max_length = 22 * 2540;\n    }\n\n    if ((cur_width = media->size_width) < min_width)\n      cur_width = min_width;\n    else if (cur_width > max_width)\n      cur_width = max_width;\n\n    if ((cur_length = media->size_length) < min_length)\n      cur_length = min_length;\n    else if (cur_length > max_length)\n      cur_length = max_length;\n\n    if ((cur_units = media->size_name + strlen(media->size_name) - 2) < media->size_name)\n      cur_units = \"in\";\n\n    if (!strcmp(cur_units, \"mm\"))\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\"><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\" checked><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 100.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 100.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n    else\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\" checked><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\"><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 2540.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 2540.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n  }\n  else\n  {\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n  // media-tracking (if needed)\n  if (driver_data->tracking_supported)\n  {\n    pappl_media_tracking_t tracking;\t// Tracking value\n    static const char * const trackings[] =\n    {\t\t\t\t\t// Tracking strings\n      \"continuous\",\n      \"gap\",\n      \"mark\",\n      \"web\"\n    };\n\n    papplClientHTMLPrintf(client, \"                <select name=\\\"%s-tracking\\\">\", name);\n    for (i = 0, tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS; tracking <= PAPPL_MEDIA_TRACKING_WEB; i ++, tracking *= 2)\n    {\n      if (!(driver_data->tracking_supported & tracking))\n\tcontinue;\n\n      papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n    }\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n  // media-type\n  papplClientHTMLPrintf(client, \"                <select name=\\\"%s-type\\\">\", name);\n  for (i = 0; i < driver_data->num_type; i ++)\n  {\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->type[i], !strcmp(driver_data->type[i], media->type) ? \" selected\" : \"\", localize_keyword(client, \"media-type\", driver_data->type[i], text, sizeof(text)));\n  }\n  papplClientHTMLPrintf(client, \"</select></td></tr>\\n\");\n}\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "static_const_char_pointer_array",
    "start_line": 896,
    "end_line": 1039,
    "code": "tic void\nmedia_chooser(\n    pappl_client_t         *client,\t// I - Client\n    pappl_pr_driver_data_t *driver_data,// I - Driver data\n    const char             *title,\t// I - Title for field\n    const char             *name,\t// I - Form name/prefix\n    pappl_media_col_t      *media)\t// I - Current media values\n{\n  int\t\ti,\t\t\t// Looping vars\n\t\tcur_index = 0,\t\t// Current size index\n\t        sel_index = 0;\t\t// Selected size index...\n  pwg_media_t\t*pwg;\t\t\t// PWG media size info\n  char\t\ttext[256];\t\t// Localized text\n  const char\t*min_size = NULL,\t// Minimum size\n\t\t*max_size = NULL;\t// Maximum size\n\n\n  // media-size\n  papplLocFormatString(papplClientGetLoc(client), text, sizeof(text), \"%s Media\", title);\n  papplClientHTMLPrintf(client, \"              <tr><th>%s:</th><td>\", text);\n  for (i = 0; i < driver_data->num_media && (!min_size || !max_size); i ++)\n  {\n    if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n        min_size = driver_data->media[i];\n      else if (strstr(driver_data->media[i], \"_max_\"))\n        max_size = driver_data->media[i];\n    }\n  }\n  if (min_size && max_size)\n  {\n    papplClientHTMLPrintf(client, \"<select name=\\\"%s-size\\\" onChange=\\\"show_hide_custom('%s');\\\"><option value=\\\"custom\\\">%s</option>\", name, name, papplClientGetLocString(client, \"New Custom Size\"));\n    cur_index ++;\n  }\n  else\n    papplClientHTMLPrintf(client, \"<select name=\\\"%s-size\\\">\", name);\n\n  for (i = 0; i < driver_data->num_media; i ++)\n  {\n    if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n      {\n        min_size = driver_data->media[i];\n        continue;\n      }\n      else if (strstr(driver_data->media[i], \"_max_\"))\n      {\n        max_size = driver_data->media[i];\n        continue;\n      }\n    }\n\n    if (!strcmp(driver_data->media[i], media->size_name))\n      sel_index = cur_index;\n\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->media[i], sel_index == cur_index ? \" selected\" : \"\", localize_keyword(client, \"media\", driver_data->media[i], text, sizeof(text)));\n    cur_index ++;\n  }\n\n  if (min_size && max_size)\n  {\n    int cur_width, min_width, max_width;// Current/min/max width\n    int cur_length, min_length, max_length;\n\t\t\t\t\t// Current/min/max length\n    const char *cur_units;\t\t// Current units\n\n    if ((pwg = pwgMediaForPWG(min_size)) != NULL)\n    {\n      min_width  = pwg->width;\n      min_length = pwg->length;\n    }\n    else\n    {\n      min_width  = 1 * 2540;\n      min_length = 1 * 2540;\n    }\n\n    if ((pwg = pwgMediaForPWG(max_size)) != NULL)\n    {\n      max_width  = pwg->width;\n      max_length = pwg->length;\n    }\n    else\n    {\n      max_width  = 9 * 2540;\n      max_length = 22 * 2540;\n    }\n\n    if ((cur_width = media->size_width) < min_width)\n      cur_width = min_width;\n    else if (cur_width > max_width)\n      cur_width = max_width;\n\n    if ((cur_length = media->size_length) < min_length)\n      cur_length = min_length;\n    else if (cur_length > max_length)\n      cur_length = max_length;\n\n    if ((cur_units = media->size_name + strlen(media->size_name) - 2) < media->size_name)\n      cur_units = \"in\";\n\n    if (!strcmp(cur_units, \"mm\"))\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\"><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\" checked><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 100.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 100.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n    else\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\" checked><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\"><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 2540.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 2540.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n  }\n  else\n  {\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n  // media-tracking (if needed)\n  if (driver_data->tracking_supported)\n  {\n    pappl_media_tracking_t tracking;\t// Tracking value\n    static const char * const trackings[] =\n    {\t\t\t\t\t// Tracking strings\n      \"continuous\",\n      \"gap\",\n      \"mark\",\n      \"web\"\n    };\n\n    papplClientHTMLPrintf(client, \"                <select name=\\\"%s-tracking\\\">\", name);\n    for (i = 0, tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS; tracking <= PAPPL_MEDIA_TRACKING_WEB; i ++, tracking *= 2)\n    {\n      if (!(driver_data->tracking_supported & tracking))\n\tcontinue;\n\n      papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n    }\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n  // media-type\n  papplClientHTMLPrintf(client, \"                <select name=\\\"%s-type\\\">\", name);\n  for (i = 0; i < driver_data->num_type; i ++)\n  {\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->type[i], !strcmp(driver_data->type[i], media->type) ? \" selected\" : \"\", localize_keyword(client, \"media-type\", driver_data->type[i], text, sizeof(text)));\n  }\n  papplClientHTMLPrintf(client, \"</select></td></tr>\\n\");\n}\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 903,
    "end_line": 1039,
    "code": " int\t\ti,\t\t\t// Looping vars\n\t\tcur_index = 0,\t\t// Current size index\n\t        sel_index = 0;\t\t// Selected size index...\n  pwg_media_t\t*pwg;\t\t\t// PWG media size info\n  char\t\ttext[256];\t\t// Localized text\n  const char\t*min_size = NULL,\t// Minimum size\n\t\t*max_size = NULL;\t// Maximum size\n\n\n  // media-size\n  papplLocFormatString(papplClientGetLoc(client), text, sizeof(text), \"%s Media\", title);\n  papplClientHTMLPrintf(client, \"              <tr><th>%s:</th><td>\", text);\n  for (i = 0; i < driver_data->num_media && (!min_size || !max_size); i ++)\n  {\n    if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n        min_size = driver_data->media[i];\n      else if (strstr(driver_data->media[i], \"_max_\"))\n        max_size = driver_data->media[i];\n    }\n  }\n  if (min_size && max_size)\n  {\n    papplClientHTMLPrintf(client, \"<select name=\\\"%s-size\\\" onChange=\\\"show_hide_custom('%s');\\\"><option value=\\\"custom\\\">%s</option>\", name, name, papplClientGetLocString(client, \"New Custom Size\"));\n    cur_index ++;\n  }\n  else\n    papplClientHTMLPrintf(client, \"<select name=\\\"%s-size\\\">\", name);\n\n  for (i = 0; i < driver_data->num_media; i ++)\n  {\n    if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n      {\n        min_size = driver_data->media[i];\n        continue;\n      }\n      else if (strstr(driver_data->media[i], \"_max_\"))\n      {\n        max_size = driver_data->media[i];\n        continue;\n      }\n    }\n\n    if (!strcmp(driver_data->media[i], media->size_name))\n      sel_index = cur_index;\n\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->media[i], sel_index == cur_index ? \" selected\" : \"\", localize_keyword(client, \"media\", driver_data->media[i], text, sizeof(text)));\n    cur_index ++;\n  }\n\n  if (min_size && max_size)\n  {\n    int cur_width, min_width, max_width;// Current/min/max width\n    int cur_length, min_length, max_length;\n\t\t\t\t\t// Current/min/max length\n    const char *cur_units;\t\t// Current units\n\n    if ((pwg = pwgMediaForPWG(min_size)) != NULL)\n    {\n      min_width  = pwg->width;\n      min_length = pwg->length;\n    }\n    else\n    {\n      min_width  = 1 * 2540;\n      min_length = 1 * 2540;\n    }\n\n    if ((pwg = pwgMediaForPWG(max_size)) != NULL)\n    {\n      max_width  = pwg->width;\n      max_length = pwg->length;\n    }\n    else\n    {\n      max_width  = 9 * 2540;\n      max_length = 22 * 2540;\n    }\n\n    if ((cur_width = media->size_width) < min_width)\n      cur_width = min_width;\n    else if (cur_width > max_width)\n      cur_width = max_width;\n\n    if ((cur_length = media->size_length) < min_length)\n      cur_length = min_length;\n    else if (cur_length > max_length)\n      cur_length = max_length;\n\n    if ((cur_units = media->size_name + strlen(media->size_name) - 2) < media->size_name)\n      cur_units = \"in\";\n\n    if (!strcmp(cur_units, \"mm\"))\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\"><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\" checked><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 100.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 100.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n    else\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\" checked><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\"><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 2540.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 2540.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n  }\n  else\n  {\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n  // media-tracking (if needed)\n  if (driver_data->tracking_supported)\n  {\n    pappl_media_tracking_t tracking;\t// Tracking value\n    static const char * const trackings[] =\n    {\t\t\t\t\t// Tracking strings\n      \"continuous\",\n      \"gap\",\n      \"mark\",\n      \"web\"\n    };\n\n    papplClientHTMLPrintf(client, \"                <select name=\\\"%s-tracking\\\">\", name);\n    for (i = 0, tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS; tracking <= PAPPL_MEDIA_TRACKING_WEB; i ++, tracking *= 2)\n    {\n      if (!(driver_data->tracking_supported & tracking))\n\tcontinue;\n\n      papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n    }\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n  // media-type\n  papplClientHTMLPrintf(client, \"                <select name=\\\"%s-type\\\">\", name);\n  for (i = 0; i < driver_data->num_type; i ++)\n  {\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->type[i], !strcmp(driver_data->type[i], media->type) ? \" selected\" : \"\", localize_keyword(client, \"media-type\", driver_data->type[i], text, sizeof(text)));\n  }\n  papplClientHTMLPrintf(client, \"</select></td></tr>\\n\");\n}\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 903,
    "end_line": 1039,
    "code": " int\t\ti,\t\t\t// Looping vars\n\t\tcur_index = 0,\t\t// Current size index\n\t        sel_index = 0;\t\t// Selected size index...\n  pwg_media_t\t*pwg;\t\t\t// PWG media size info\n  char\t\ttext[256];\t\t// Localized text\n  const char\t*min_size = NULL,\t// Minimum size\n\t\t*max_size = NULL;\t// Maximum size\n\n\n  // media-size\n  papplLocFormatString(papplClientGetLoc(client), text, sizeof(text), \"%s Media\", title);\n  papplClientHTMLPrintf(client, \"              <tr><th>%s:</th><td>\", text);\n  for (i = 0; i < driver_data->num_media && (!min_size || !max_size); i ++)\n  {\n    if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n        min_size = driver_data->media[i];\n      else if (strstr(driver_data->media[i], \"_max_\"))\n        max_size = driver_data->media[i];\n    }\n  }\n  if (min_size && max_size)\n  {\n    papplClientHTMLPrintf(client, \"<select name=\\\"%s-size\\\" onChange=\\\"show_hide_custom('%s');\\\"><option value=\\\"custom\\\">%s</option>\", name, name, papplClientGetLocString(client, \"New Custom Size\"));\n    cur_index ++;\n  }\n  else\n    papplClientHTMLPrintf(client, \"<select name=\\\"%s-size\\\">\", name);\n\n  for (i = 0; i < driver_data->num_media; i ++)\n  {\n    if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n      {\n        min_size = driver_data->media[i];\n        continue;\n      }\n      else if (strstr(driver_data->media[i], \"_max_\"))\n      {\n        max_size = driver_data->media[i];\n        continue;\n      }\n    }\n\n    if (!strcmp(driver_data->media[i], media->size_name))\n      sel_index = cur_index;\n\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->media[i], sel_index == cur_index ? \" selected\" : \"\", localize_keyword(client, \"media\", driver_data->media[i], text, sizeof(text)));\n    cur_index ++;\n  }\n\n  if (min_size && max_size)\n  {\n    int cur_width, min_width, max_width;// Current/min/max width\n    int cur_length, min_length, max_length;\n\t\t\t\t\t// Current/min/max length\n    const char *cur_units;\t\t// Current units\n\n    if ((pwg = pwgMediaForPWG(min_size)) != NULL)\n    {\n      min_width  = pwg->width;\n      min_length = pwg->length;\n    }\n    else\n    {\n      min_width  = 1 * 2540;\n      min_length = 1 * 2540;\n    }\n\n    if ((pwg = pwgMediaForPWG(max_size)) != NULL)\n    {\n      max_width  = pwg->width;\n      max_length = pwg->length;\n    }\n    else\n    {\n      max_width  = 9 * 2540;\n      max_length = 22 * 2540;\n    }\n\n    if ((cur_width = media->size_width) < min_width)\n      cur_width = min_width;\n    else if (cur_width > max_width)\n      cur_width = max_width;\n\n    if ((cur_length = media->size_length) < min_length)\n      cur_length = min_length;\n    else if (cur_length > max_length)\n      cur_length = max_length;\n\n    if ((cur_units = media->size_name + strlen(media->size_name) - 2) < media->size_name)\n      cur_units = \"in\";\n\n    if (!strcmp(cur_units, \"mm\"))\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\"><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\" checked><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 100.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 100.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n    else\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\" checked><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\"><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 2540.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 2540.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n  }\n  else\n  {\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n  // media-tracking (if needed)\n  if (driver_data->tracking_supported)\n  {\n    pappl_media_tracking_t tracking;\t// Tracking value\n    static const char * const trackings[] =\n    {\t\t\t\t\t// Tracking strings\n      \"continuous\",\n      \"gap\",\n      \"mark\",\n      \"web\"\n    };\n\n    papplClientHTMLPrintf(client, \"                <select name=\\\"%s-tracking\\\">\", name);\n    for (i = 0, tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS; tracking <= PAPPL_MEDIA_TRACKING_WEB; i ++, tracking *= 2)\n    {\n      if (!(driver_data->tracking_supported & tracking))\n\tcontinue;\n\n      papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n    }\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n  // media-type\n  papplClientHTMLPrintf(client, \"                <select name=\\\"%s-type\\\">\", name);\n  for (i = 0; i < driver_data->num_type; i ++)\n  {\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->type[i], !strcmp(driver_data->type[i], media->type) ? \" selected\" : \"\", localize_keyword(client, \"media-type\", driver_data->type[i], text, sizeof(text)));\n  }\n  papplClientHTMLPrintf(client, \"</select></td></tr>\\n\");\n}\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "static_const_char_pointer_array",
    "start_line": 903,
    "end_line": 1039,
    "code": " int\t\ti,\t\t\t// Looping vars\n\t\tcur_index = 0,\t\t// Current size index\n\t        sel_index = 0;\t\t// Selected size index...\n  pwg_media_t\t*pwg;\t\t\t// PWG media size info\n  char\t\ttext[256];\t\t// Localized text\n  const char\t*min_size = NULL,\t// Minimum size\n\t\t*max_size = NULL;\t// Maximum size\n\n\n  // media-size\n  papplLocFormatString(papplClientGetLoc(client), text, sizeof(text), \"%s Media\", title);\n  papplClientHTMLPrintf(client, \"              <tr><th>%s:</th><td>\", text);\n  for (i = 0; i < driver_data->num_media && (!min_size || !max_size); i ++)\n  {\n    if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n        min_size = driver_data->media[i];\n      else if (strstr(driver_data->media[i], \"_max_\"))\n        max_size = driver_data->media[i];\n    }\n  }\n  if (min_size && max_size)\n  {\n    papplClientHTMLPrintf(client, \"<select name=\\\"%s-size\\\" onChange=\\\"show_hide_custom('%s');\\\"><option value=\\\"custom\\\">%s</option>\", name, name, papplClientGetLocString(client, \"New Custom Size\"));\n    cur_index ++;\n  }\n  else\n    papplClientHTMLPrintf(client, \"<select name=\\\"%s-size\\\">\", name);\n\n  for (i = 0; i < driver_data->num_media; i ++)\n  {\n    if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n      {\n        min_size = driver_data->media[i];\n        continue;\n      }\n      else if (strstr(driver_data->media[i], \"_max_\"))\n      {\n        max_size = driver_data->media[i];\n        continue;\n      }\n    }\n\n    if (!strcmp(driver_data->media[i], media->size_name))\n      sel_index = cur_index;\n\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->media[i], sel_index == cur_index ? \" selected\" : \"\", localize_keyword(client, \"media\", driver_data->media[i], text, sizeof(text)));\n    cur_index ++;\n  }\n\n  if (min_size && max_size)\n  {\n    int cur_width, min_width, max_width;// Current/min/max width\n    int cur_length, min_length, max_length;\n\t\t\t\t\t// Current/min/max length\n    const char *cur_units;\t\t// Current units\n\n    if ((pwg = pwgMediaForPWG(min_size)) != NULL)\n    {\n      min_width  = pwg->width;\n      min_length = pwg->length;\n    }\n    else\n    {\n      min_width  = 1 * 2540;\n      min_length = 1 * 2540;\n    }\n\n    if ((pwg = pwgMediaForPWG(max_size)) != NULL)\n    {\n      max_width  = pwg->width;\n      max_length = pwg->length;\n    }\n    else\n    {\n      max_width  = 9 * 2540;\n      max_length = 22 * 2540;\n    }\n\n    if ((cur_width = media->size_width) < min_width)\n      cur_width = min_width;\n    else if (cur_width > max_width)\n      cur_width = max_width;\n\n    if ((cur_length = media->size_length) < min_length)\n      cur_length = min_length;\n    else if (cur_length > max_length)\n      cur_length = max_length;\n\n    if ((cur_units = media->size_name + strlen(media->size_name) - 2) < media->size_name)\n      cur_units = \"in\";\n\n    if (!strcmp(cur_units, \"mm\"))\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\"><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\" checked><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 100.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 100.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n    else\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\" checked><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\"><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 2540.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 2540.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n  }\n  else\n  {\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n  // media-tracking (if needed)\n  if (driver_data->tracking_supported)\n  {\n    pappl_media_tracking_t tracking;\t// Tracking value\n    static const char * const trackings[] =\n    {\t\t\t\t\t// Tracking strings\n      \"continuous\",\n      \"gap\",\n      \"mark\",\n      \"web\"\n    };\n\n    papplClientHTMLPrintf(client, \"                <select name=\\\"%s-tracking\\\">\", name);\n    for (i = 0, tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS; tracking <= PAPPL_MEDIA_TRACKING_WEB; i ++, tracking *= 2)\n    {\n      if (!(driver_data->tracking_supported & tracking))\n\tcontinue;\n\n      papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n    }\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n  // media-type\n  papplClientHTMLPrintf(client, \"                <select name=\\\"%s-type\\\">\", name);\n  for (i = 0; i < driver_data->num_type; i ++)\n  {\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->type[i], !strcmp(driver_data->type[i], media->type) ? \" selected\" : \"\", localize_keyword(client, \"media-type\", driver_data->type[i], text, sizeof(text)));\n  }\n  papplClientHTMLPrintf(client, \"</select></td></tr>\\n\");\n}\n",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "global_variable",
    "start_line": 904,
    "end_line": 906,
    "code": "\t\ti,\t\t\t// Looping vars\n\t\tcur_index = 0,\t\t// Current size index\n\t        sel_index = 0;\t\t/",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "global_variable",
    "start_line": 909,
    "end_line": 910,
    "code": "st char\t*min_size = NULL,\t// Minimum size\n\t\t*max_size = NULL;\t//",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 916,
    "end_line": 925,
    "code": " (i = 0; i < driver_data->num_media && (!min_size || !max_size); i ++)\n  {\n    if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n        min_size = driver_data->media[i];\n      else if (strstr(driver_data->media[i], \"_max_\"))\n        max_size = driver_data->media[i];\n    }\n  }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 916,
    "end_line": 925,
    "code": " (i = 0; i < driver_data->num_media && (!min_size || !max_size); i ++)\n  {\n    if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n        min_size = driver_data->media[i];\n      else if (strstr(driver_data->media[i], \"_max_\"))\n        max_size = driver_data->media[i];\n    }\n  }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 917,
    "end_line": 925,
    "code": "   if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n        min_size = driver_data->media[i];\n      else if (strstr(driver_data->media[i], \"_max_\"))\n        max_size = driver_data->media[i];\n    }\n  }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 917,
    "end_line": 925,
    "code": "   if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n        min_size = driver_data->media[i];\n      else if (strstr(driver_data->media[i], \"_max_\"))\n        max_size = driver_data->media[i];\n    }\n  }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 918,
    "end_line": 924,
    "code": "(!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n        min_size = driver_data->media[i];\n      else if (strstr(driver_data->media[i], \"_max_\"))\n        max_size = driver_data->media[i];\n    }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 918,
    "end_line": 924,
    "code": "(!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n        min_size = driver_data->media[i];\n      else if (strstr(driver_data->media[i], \"_max_\"))\n        max_size = driver_data->media[i];\n    }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 919,
    "end_line": 924,
    "code": "     if (strstr(driver_data->media[i], \"_min_\"))\n        min_size = driver_data->media[i];\n      else if (strstr(driver_data->media[i], \"_max_\"))\n        max_size = driver_data->media[i];\n    }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 919,
    "end_line": 924,
    "code": "     if (strstr(driver_data->media[i], \"_min_\"))\n        min_size = driver_data->media[i];\n      else if (strstr(driver_data->media[i], \"_max_\"))\n        max_size = driver_data->media[i];\n    }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 920,
    "end_line": 923,
    "code": "(strstr(driver_data->media[i], \"_min_\"))\n        min_size = driver_data->media[i];\n      else if (strstr(driver_data->media[i], \"_max_\"))\n        max_size = driver_data->media[i];\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 920,
    "end_line": 923,
    "code": "(strstr(driver_data->media[i], \"_min_\"))\n        min_size = driver_data->media[i];\n      else if (strstr(driver_data->media[i], \"_max_\"))\n        max_size = driver_data->media[i];\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 921,
    "end_line": 921,
    "code": "_size = driver_data->media[i];\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 921,
    "end_line": 921,
    "code": "_size = driver_data->media[i];\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 922,
    "end_line": 923,
    "code": "e if (strstr(driver_data->media[i], \"_max_\"))\n        max_size = driver_data->media[i];\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 922,
    "end_line": 923,
    "code": "e if (strstr(driver_data->media[i], \"_max_\"))\n        max_size = driver_data->media[i];\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 922,
    "end_line": 923,
    "code": "(strstr(driver_data->media[i], \"_max_\"))\n        max_size = driver_data->media[i];\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 922,
    "end_line": 923,
    "code": "(strstr(driver_data->media[i], \"_max_\"))\n        max_size = driver_data->media[i];\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 923,
    "end_line": 923,
    "code": "_size = driver_data->media[i];\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 923,
    "end_line": 923,
    "code": "_size = driver_data->media[i];\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 934,
    "end_line": 955,
    "code": " (i = 0; i < driver_data->num_media; i ++)\n  {\n    if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n      {\n        min_size = driver_data->media[i];\n        continue;\n      }\n      else if (strstr(driver_data->media[i], \"_max_\"))\n      {\n        max_size = driver_data->media[i];\n        continue;\n      }\n    }\n\n    if (!strcmp(driver_data->media[i], media->size_name))\n      sel_index = cur_index;\n\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->media[i], sel_index == cur_index ? \" selected\" : \"\", localize_keyword(client, \"media\", driver_data->media[i], text, sizeof(text)));\n    cur_index ++;\n  }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 934,
    "end_line": 955,
    "code": " (i = 0; i < driver_data->num_media; i ++)\n  {\n    if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n      {\n        min_size = driver_data->media[i];\n        continue;\n      }\n      else if (strstr(driver_data->media[i], \"_max_\"))\n      {\n        max_size = driver_data->media[i];\n        continue;\n      }\n    }\n\n    if (!strcmp(driver_data->media[i], media->size_name))\n      sel_index = cur_index;\n\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->media[i], sel_index == cur_index ? \" selected\" : \"\", localize_keyword(client, \"media\", driver_data->media[i], text, sizeof(text)));\n    cur_index ++;\n  }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 935,
    "end_line": 955,
    "code": "   if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n      {\n        min_size = driver_data->media[i];\n        continue;\n      }\n      else if (strstr(driver_data->media[i], \"_max_\"))\n      {\n        max_size = driver_data->media[i];\n        continue;\n      }\n    }\n\n    if (!strcmp(driver_data->media[i], media->size_name))\n      sel_index = cur_index;\n\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->media[i], sel_index == cur_index ? \" selected\" : \"\", localize_keyword(client, \"media\", driver_data->media[i], text, sizeof(text)));\n    cur_index ++;\n  }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 935,
    "end_line": 955,
    "code": "   if (!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n      {\n        min_size = driver_data->media[i];\n        continue;\n      }\n      else if (strstr(driver_data->media[i], \"_max_\"))\n      {\n        max_size = driver_data->media[i];\n        continue;\n      }\n    }\n\n    if (!strcmp(driver_data->media[i], media->size_name))\n      sel_index = cur_index;\n\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->media[i], sel_index == cur_index ? \" selected\" : \"\", localize_keyword(client, \"media\", driver_data->media[i], text, sizeof(text)));\n    cur_index ++;\n  }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 936,
    "end_line": 948,
    "code": "(!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n      {\n        min_size = driver_data->media[i];\n        continue;\n      }\n      else if (strstr(driver_data->media[i], \"_max_\"))\n      {\n        max_size = driver_data->media[i];\n        continue;\n      }\n    }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 936,
    "end_line": 948,
    "code": "(!strncmp(driver_data->media[i], \"custom_\", 7) || !strncmp(driver_data->media[i], \"roll_\", 5))\n    {\n      if (strstr(driver_data->media[i], \"_min_\"))\n      {\n        min_size = driver_data->media[i];\n        continue;\n      }\n      else if (strstr(driver_data->media[i], \"_max_\"))\n      {\n        max_size = driver_data->media[i];\n        continue;\n      }\n    }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 937,
    "end_line": 948,
    "code": "     if (strstr(driver_data->media[i], \"_min_\"))\n      {\n        min_size = driver_data->media[i];\n        continue;\n      }\n      else if (strstr(driver_data->media[i], \"_max_\"))\n      {\n        max_size = driver_data->media[i];\n        continue;\n      }\n    }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 937,
    "end_line": 948,
    "code": "     if (strstr(driver_data->media[i], \"_min_\"))\n      {\n        min_size = driver_data->media[i];\n        continue;\n      }\n      else if (strstr(driver_data->media[i], \"_max_\"))\n      {\n        max_size = driver_data->media[i];\n        continue;\n      }\n    }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 938,
    "end_line": 947,
    "code": "(strstr(driver_data->media[i], \"_min_\"))\n      {\n        min_size = driver_data->media[i];\n        continue;\n      }\n      else if (strstr(driver_data->media[i], \"_max_\"))\n      {\n        max_size = driver_data->media[i];\n        continue;\n      }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 938,
    "end_line": 947,
    "code": "(strstr(driver_data->media[i], \"_min_\"))\n      {\n        min_size = driver_data->media[i];\n        continue;\n      }\n      else if (strstr(driver_data->media[i], \"_max_\"))\n      {\n        max_size = driver_data->media[i];\n        continue;\n      }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 939,
    "end_line": 942,
    "code": "       min_size = driver_data->media[i];\n        continue;\n      }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 940,
    "end_line": 940,
    "code": "_size = driver_data->media[i];\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 940,
    "end_line": 940,
    "code": "_size = driver_data->media[i];\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 943,
    "end_line": 947,
    "code": "e if (strstr(driver_data->media[i], \"_max_\"))\n      {\n        max_size = driver_data->media[i];\n        continue;\n      }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 943,
    "end_line": 947,
    "code": "e if (strstr(driver_data->media[i], \"_max_\"))\n      {\n        max_size = driver_data->media[i];\n        continue;\n      }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 943,
    "end_line": 947,
    "code": "(strstr(driver_data->media[i], \"_max_\"))\n      {\n        max_size = driver_data->media[i];\n        continue;\n      }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 943,
    "end_line": 947,
    "code": "(strstr(driver_data->media[i], \"_max_\"))\n      {\n        max_size = driver_data->media[i];\n        continue;\n      }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 944,
    "end_line": 947,
    "code": "       max_size = driver_data->media[i];\n        continue;\n      }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 945,
    "end_line": 945,
    "code": "_size = driver_data->media[i];\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 945,
    "end_line": 945,
    "code": "_size = driver_data->media[i];\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 950,
    "end_line": 951,
    "code": "(!strcmp(driver_data->media[i], media->size_name))\n      sel_index = cur_index;\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 950,
    "end_line": 951,
    "code": "(!strcmp(driver_data->media[i], media->size_name))\n      sel_index = cur_index;\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 953,
    "end_line": 953,
    "code": "plClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->media[i], sel_index == cur_index ? \" selected\" : \"\", localize_keyword(client, \"media\", driver_data->media[i], text, sizeof(text)));\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 953,
    "end_line": 953,
    "code": "plClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->media[i], sel_index == cur_index ? \" selected\" : \"\", localize_keyword(client, \"media\", driver_data->media[i], text, sizeof(text)));\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 953,
    "end_line": 953,
    "code": "plClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->media[i], sel_index == cur_index ? \" selected\" : \"\", localize_keyword(client, \"media\", driver_data->media[i], text, sizeof(text)));\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 953,
    "end_line": 953,
    "code": "plClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->media[i], sel_index == cur_index ? \" selected\" : \"\", localize_keyword(client, \"media\", driver_data->media[i], text, sizeof(text)));\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 953,
    "end_line": 953,
    "code": "ient, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->media[i], sel_index == cur_index ? \" selected\" : \"\", localize_keyword(client, \"media\", driver_data->media[i], text, sizeof(text)));\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 953,
    "end_line": 953,
    "code": "ient, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->media[i], sel_index == cur_index ? \" selected\" : \"\", localize_keyword(client, \"media\", driver_data->media[i], text, sizeof(text)));\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 957,
    "end_line": 1007,
    "code": "(min_size && max_size)\n  {\n    int cur_width, min_width, max_width;// Current/min/max width\n    int cur_length, min_length, max_length;\n\t\t\t\t\t// Current/min/max length\n    const char *cur_units;\t\t// Current units\n\n    if ((pwg = pwgMediaForPWG(min_size)) != NULL)\n    {\n      min_width  = pwg->width;\n      min_length = pwg->length;\n    }\n    else\n    {\n      min_width  = 1 * 2540;\n      min_length = 1 * 2540;\n    }\n\n    if ((pwg = pwgMediaForPWG(max_size)) != NULL)\n    {\n      max_width  = pwg->width;\n      max_length = pwg->length;\n    }\n    else\n    {\n      max_width  = 9 * 2540;\n      max_length = 22 * 2540;\n    }\n\n    if ((cur_width = media->size_width) < min_width)\n      cur_width = min_width;\n    else if (cur_width > max_width)\n      cur_width = max_width;\n\n    if ((cur_length = media->size_length) < min_length)\n      cur_length = min_length;\n    else if (cur_length > max_length)\n      cur_length = max_length;\n\n    if ((cur_units = media->size_name + strlen(media->size_name) - 2) < media->size_name)\n      cur_units = \"in\";\n\n    if (!strcmp(cur_units, \"mm\"))\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\"><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\" checked><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 100.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 100.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n    else\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\" checked><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\"><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 2540.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 2540.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n  }\n  else\n  {\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 957,
    "end_line": 1007,
    "code": "(min_size && max_size)\n  {\n    int cur_width, min_width, max_width;// Current/min/max width\n    int cur_length, min_length, max_length;\n\t\t\t\t\t// Current/min/max length\n    const char *cur_units;\t\t// Current units\n\n    if ((pwg = pwgMediaForPWG(min_size)) != NULL)\n    {\n      min_width  = pwg->width;\n      min_length = pwg->length;\n    }\n    else\n    {\n      min_width  = 1 * 2540;\n      min_length = 1 * 2540;\n    }\n\n    if ((pwg = pwgMediaForPWG(max_size)) != NULL)\n    {\n      max_width  = pwg->width;\n      max_length = pwg->length;\n    }\n    else\n    {\n      max_width  = 9 * 2540;\n      max_length = 22 * 2540;\n    }\n\n    if ((cur_width = media->size_width) < min_width)\n      cur_width = min_width;\n    else if (cur_width > max_width)\n      cur_width = max_width;\n\n    if ((cur_length = media->size_length) < min_length)\n      cur_length = min_length;\n    else if (cur_length > max_length)\n      cur_length = max_length;\n\n    if ((cur_units = media->size_name + strlen(media->size_name) - 2) < media->size_name)\n      cur_units = \"in\";\n\n    if (!strcmp(cur_units, \"mm\"))\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\"><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\" checked><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 100.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 100.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n    else\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\" checked><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\"><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 2540.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 2540.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n  }\n  else\n  {\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 958,
    "end_line": 1003,
    "code": "   int cur_width, min_width, max_width;// Current/min/max width\n    int cur_length, min_length, max_length;\n\t\t\t\t\t// Current/min/max length\n    const char *cur_units;\t\t// Current units\n\n    if ((pwg = pwgMediaForPWG(min_size)) != NULL)\n    {\n      min_width  = pwg->width;\n      min_length = pwg->length;\n    }\n    else\n    {\n      min_width  = 1 * 2540;\n      min_length = 1 * 2540;\n    }\n\n    if ((pwg = pwgMediaForPWG(max_size)) != NULL)\n    {\n      max_width  = pwg->width;\n      max_length = pwg->length;\n    }\n    else\n    {\n      max_width  = 9 * 2540;\n      max_length = 22 * 2540;\n    }\n\n    if ((cur_width = media->size_width) < min_width)\n      cur_width = min_width;\n    else if (cur_width > max_width)\n      cur_width = max_width;\n\n    if ((cur_length = media->size_length) < min_length)\n      cur_length = min_length;\n    else if (cur_length > max_length)\n      cur_length = max_length;\n\n    if ((cur_units = media->size_name + strlen(media->size_name) - 2) < media->size_name)\n      cur_units = \"in\";\n\n    if (!strcmp(cur_units, \"mm\"))\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\"><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\" checked><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 100.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 100.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n    else\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\" checked><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\"><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 2540.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 2540.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n  }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 958,
    "end_line": 1003,
    "code": "   int cur_width, min_width, max_width;// Current/min/max width\n    int cur_length, min_length, max_length;\n\t\t\t\t\t// Current/min/max length\n    const char *cur_units;\t\t// Current units\n\n    if ((pwg = pwgMediaForPWG(min_size)) != NULL)\n    {\n      min_width  = pwg->width;\n      min_length = pwg->length;\n    }\n    else\n    {\n      min_width  = 1 * 2540;\n      min_length = 1 * 2540;\n    }\n\n    if ((pwg = pwgMediaForPWG(max_size)) != NULL)\n    {\n      max_width  = pwg->width;\n      max_length = pwg->length;\n    }\n    else\n    {\n      max_width  = 9 * 2540;\n      max_length = 22 * 2540;\n    }\n\n    if ((cur_width = media->size_width) < min_width)\n      cur_width = min_width;\n    else if (cur_width > max_width)\n      cur_width = max_width;\n\n    if ((cur_length = media->size_length) < min_length)\n      cur_length = min_length;\n    else if (cur_length > max_length)\n      cur_length = max_length;\n\n    if ((cur_units = media->size_name + strlen(media->size_name) - 2) < media->size_name)\n      cur_units = \"in\";\n\n    if (!strcmp(cur_units, \"mm\"))\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\"><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\" checked><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 100.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 100.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n    else\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\" checked><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\"><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 2540.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 2540.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n  }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 964,
    "end_line": 973,
    "code": "((pwg = pwgMediaForPWG(min_size)) != NULL)\n    {\n      min_width  = pwg->width;\n      min_length = pwg->length;\n    }\n    else\n    {\n      min_width  = 1 * 2540;\n      min_length = 1 * 2540;\n    }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 964,
    "end_line": 973,
    "code": "((pwg = pwgMediaForPWG(min_size)) != NULL)\n    {\n      min_width  = pwg->width;\n      min_length = pwg->length;\n    }\n    else\n    {\n      min_width  = 1 * 2540;\n      min_length = 1 * 2540;\n    }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 965,
    "end_line": 968,
    "code": "     min_width  = pwg->width;\n      min_length = pwg->length;\n    }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 966,
    "end_line": 966,
    "code": "_width  = pwg->width;\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 966,
    "end_line": 966,
    "code": "_width  = pwg->width;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 967,
    "end_line": 967,
    "code": "_length = pwg->length;\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 967,
    "end_line": 967,
    "code": "_length = pwg->length;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 975,
    "end_line": 984,
    "code": "((pwg = pwgMediaForPWG(max_size)) != NULL)\n    {\n      max_width  = pwg->width;\n      max_length = pwg->length;\n    }\n    else\n    {\n      max_width  = 9 * 2540;\n      max_length = 22 * 2540;\n    }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 975,
    "end_line": 984,
    "code": "((pwg = pwgMediaForPWG(max_size)) != NULL)\n    {\n      max_width  = pwg->width;\n      max_length = pwg->length;\n    }\n    else\n    {\n      max_width  = 9 * 2540;\n      max_length = 22 * 2540;\n    }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 976,
    "end_line": 979,
    "code": "     max_width  = pwg->width;\n      max_length = pwg->length;\n    }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 977,
    "end_line": 977,
    "code": "_width  = pwg->width;\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 977,
    "end_line": 977,
    "code": "_width  = pwg->width;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 978,
    "end_line": 978,
    "code": "_length = pwg->length;\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 978,
    "end_line": 978,
    "code": "_length = pwg->length;\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 986,
    "end_line": 989,
    "code": "((cur_width = media->size_width) < min_width)\n      cur_width = min_width;\n    else if (cur_width > max_width)\n      cur_width = max_width;\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 986,
    "end_line": 989,
    "code": "((cur_width = media->size_width) < min_width)\n      cur_width = min_width;\n    else if (cur_width > max_width)\n      cur_width = max_width;\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 991,
    "end_line": 994,
    "code": "((cur_length = media->size_length) < min_length)\n      cur_length = min_length;\n    else if (cur_length > max_length)\n      cur_length = max_length;\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 991,
    "end_line": 994,
    "code": "((cur_length = media->size_length) < min_length)\n      cur_length = min_length;\n    else if (cur_length > max_length)\n      cur_length = max_length;\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 996,
    "end_line": 997,
    "code": "((cur_units = media->size_name + strlen(media->size_name) - 2) < media->size_name)\n      cur_units = \"in\";\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 996,
    "end_line": 997,
    "code": "((cur_units = media->size_name + strlen(media->size_name) - 2) < media->size_name)\n      cur_units = \"in\";\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 996,
    "end_line": 996,
    "code": "ur_units = media->size_name + strlen(media->size_name) - 2) < media->size_name)\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 996,
    "end_line": 996,
    "code": "r_units = media->size_name + strlen(media->size_name) - 2) < media->size_name)\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 996,
    "end_line": 996,
    "code": "r_units = media->size_name + strlen(media->size_name) - 2) < ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 996,
    "end_line": 996,
    "code": "_units = media->size_name + strlen(media->size_name) - 2) <",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 999,
    "end_line": 1002,
    "code": "(!strcmp(cur_units, \"mm\"))\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\"><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\" checked><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 100.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 100.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n    else\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\" checked><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\"><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 2540.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 2540.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 1000,
    "end_line": 1000,
    "code": "plClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\"><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\" checked><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 100.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 100.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 1000,
    "end_line": 1000,
    "code": "plClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\"><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\" checked><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 100.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 100.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 1000,
    "end_line": 1000,
    "code": "ient, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\"><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\" checked><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 100.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 100.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 1000,
    "end_line": 1000,
    "code": "select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\"><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\" checked><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", s",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 1001,
    "end_line": 1002,
    "code": "e\n      papplClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\" checked><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\"><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 2540.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 2540.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 1002,
    "end_line": 1002,
    "code": "plClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\" checked><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\"><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 2540.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 2540.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 1002,
    "end_line": 1002,
    "code": "plClientHTMLPrintf(client, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\" checked><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\"><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 2540.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 2540.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 1002,
    "end_line": 1002,
    "code": "ient, \"</select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\" checked><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\"><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", sel_index == 0 ? \"inline-block\" : \"none\", name, name, min_width / 2540.0, max_width / 100.0, cur_width / 2540.0, papplClientGetLocString(client, \"Width\"), name, min_length / 2540.0, max_length / 100.0, cur_length / 2540.0, papplClientGetLocString(client, \"Height\"), name, name, name, name, name, name);\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 1002,
    "end_line": 1002,
    "code": "select><div style=\\\"display: %s;\\\" id=\\\"%s-custom\\\"><input type=\\\"number\\\" name=\\\"%s-custom-width\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\">x<input type=\\\"number\\\" name=\\\"%s-custom-length\\\" min=\\\"%.2f\\\" max=\\\"%.2f\\\" value=\\\"%.2f\\\" step=\\\".01\\\" placeholder=\\\"%s\\\"><div class=\\\"switch\\\"><input type=\\\"radio\\\" id=\\\"%s-custom-units-in\\\" name=\\\"%s-custom-units\\\" value=\\\"in\\\" checked><label for=\\\"%s-custom-units-in\\\">in</label><input type=\\\"radio\\\" id=\\\"%s-custom-units-mm\\\" name=\\\"%s-custom-units\\\" value=\\\"mm\\\"><label for=\\\"%s-custom-units-mm\\\">mm</label></div></div>\\n\", s",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "anonymous_initializer_block",
    "start_line": 1004,
    "end_line": 1007,
    "code": "e\n  {\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 1010,
    "end_line": 1030,
    "code": "(driver_data->tracking_supported)\n  {\n    pappl_media_tracking_t tracking;\t// Tracking value\n    static const char * const trackings[] =\n    {\t\t\t\t\t// Tracking strings\n      \"continuous\",\n      \"gap\",\n      \"mark\",\n      \"web\"\n    };\n\n    papplClientHTMLPrintf(client, \"                <select name=\\\"%s-tracking\\\">\", name);\n    for (i = 0, tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS; tracking <= PAPPL_MEDIA_TRACKING_WEB; i ++, tracking *= 2)\n    {\n      if (!(driver_data->tracking_supported & tracking))\n\tcontinue;\n\n      papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n    }\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 1010,
    "end_line": 1030,
    "code": "(driver_data->tracking_supported)\n  {\n    pappl_media_tracking_t tracking;\t// Tracking value\n    static const char * const trackings[] =\n    {\t\t\t\t\t// Tracking strings\n      \"continuous\",\n      \"gap\",\n      \"mark\",\n      \"web\"\n    };\n\n    papplClientHTMLPrintf(client, \"                <select name=\\\"%s-tracking\\\">\", name);\n    for (i = 0, tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS; tracking <= PAPPL_MEDIA_TRACKING_WEB; i ++, tracking *= 2)\n    {\n      if (!(driver_data->tracking_supported & tracking))\n\tcontinue;\n\n      papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n    }\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "static_const_char_pointer_array",
    "start_line": 1010,
    "end_line": 1030,
    "code": "(driver_data->tracking_supported)\n  {\n    pappl_media_tracking_t tracking;\t// Tracking value\n    static const char * const trackings[] =\n    {\t\t\t\t\t// Tracking strings\n      \"continuous\",\n      \"gap\",\n      \"mark\",\n      \"web\"\n    };\n\n    papplClientHTMLPrintf(client, \"                <select name=\\\"%s-tracking\\\">\", name);\n    for (i = 0, tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS; tracking <= PAPPL_MEDIA_TRACKING_WEB; i ++, tracking *= 2)\n    {\n      if (!(driver_data->tracking_supported & tracking))\n\tcontinue;\n\n      papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n    }\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 1011,
    "end_line": 1030,
    "code": "   pappl_media_tracking_t tracking;\t// Tracking value\n    static const char * const trackings[] =\n    {\t\t\t\t\t// Tracking strings\n      \"continuous\",\n      \"gap\",\n      \"mark\",\n      \"web\"\n    };\n\n    papplClientHTMLPrintf(client, \"                <select name=\\\"%s-tracking\\\">\", name);\n    for (i = 0, tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS; tracking <= PAPPL_MEDIA_TRACKING_WEB; i ++, tracking *= 2)\n    {\n      if (!(driver_data->tracking_supported & tracking))\n\tcontinue;\n\n      papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n    }\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 1011,
    "end_line": 1030,
    "code": "   pappl_media_tracking_t tracking;\t// Tracking value\n    static const char * const trackings[] =\n    {\t\t\t\t\t// Tracking strings\n      \"continuous\",\n      \"gap\",\n      \"mark\",\n      \"web\"\n    };\n\n    papplClientHTMLPrintf(client, \"                <select name=\\\"%s-tracking\\\">\", name);\n    for (i = 0, tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS; tracking <= PAPPL_MEDIA_TRACKING_WEB; i ++, tracking *= 2)\n    {\n      if (!(driver_data->tracking_supported & tracking))\n\tcontinue;\n\n      papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n    }\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "static_const_char_pointer_array",
    "start_line": 1011,
    "end_line": 1030,
    "code": "   pappl_media_tracking_t tracking;\t// Tracking value\n    static const char * const trackings[] =\n    {\t\t\t\t\t// Tracking strings\n      \"continuous\",\n      \"gap\",\n      \"mark\",\n      \"web\"\n    };\n\n    papplClientHTMLPrintf(client, \"                <select name=\\\"%s-tracking\\\">\", name);\n    for (i = 0, tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS; tracking <= PAPPL_MEDIA_TRACKING_WEB; i ++, tracking *= 2)\n    {\n      if (!(driver_data->tracking_supported & tracking))\n\tcontinue;\n\n      papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n    }\n    papplClientHTMLPuts(client, \"</select>\\n\");\n  }\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "global_variable",
    "start_line": 1013,
    "end_line": 1019,
    "code": "tic const char * const trackings[] =\n    {\t\t\t\t\t// Tracking strings\n      \"continuous\",\n      \"gap\",\n      \"mark\",\n      \"web\"\n    };\n\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 1022,
    "end_line": 1028,
    "code": " (i = 0, tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS; tracking <= PAPPL_MEDIA_TRACKING_WEB; i ++, tracking *= 2)\n    {\n      if (!(driver_data->tracking_supported & tracking))\n\tcontinue;\n\n      papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n    }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 1022,
    "end_line": 1028,
    "code": " (i = 0, tracking = PAPPL_MEDIA_TRACKING_CONTINUOUS; tracking <= PAPPL_MEDIA_TRACKING_WEB; i ++, tracking *= 2)\n    {\n      if (!(driver_data->tracking_supported & tracking))\n\tcontinue;\n\n      papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n    }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 1023,
    "end_line": 1028,
    "code": "     if (!(driver_data->tracking_supported & tracking))\n\tcontinue;\n\n      papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n    }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 1023,
    "end_line": 1028,
    "code": "     if (!(driver_data->tracking_supported & tracking))\n\tcontinue;\n\n      papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n    }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 1027,
    "end_line": 1027,
    "code": "plClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 1027,
    "end_line": 1027,
    "code": "plClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 1027,
    "end_line": 1027,
    "code": "plClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 1027,
    "end_line": 1027,
    "code": "plClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 1027,
    "end_line": 1027,
    "code": "ient, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 1027,
    "end_line": 1027,
    "code": "ient, \"<option value=\\\"%s\\\"%s>%s</option>\", trackings[i], tracking == media->tracking ? \" selected\" : \"\", localize_keyword(client, \"media-tracking\", trackings[i], text, sizeof(text)));\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 1034,
    "end_line": 1037,
    "code": " (i = 0; i < driver_data->num_type; i ++)\n  {\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->type[i], !strcmp(driver_data->type[i], media->type) ? \" selected\" : \"\", localize_keyword(client, \"media-type\", driver_data->type[i], text, sizeof(text)));\n  }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 1034,
    "end_line": 1037,
    "code": " (i = 0; i < driver_data->num_type; i ++)\n  {\n    papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->type[i], !strcmp(driver_data->type[i], media->type) ? \" selected\" : \"\", localize_keyword(client, \"media-type\", driver_data->type[i], text, sizeof(text)));\n  }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 1035,
    "end_line": 1037,
    "code": "   papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->type[i], !strcmp(driver_data->type[i], media->type) ? \" selected\" : \"\", localize_keyword(client, \"media-type\", driver_data->type[i], text, sizeof(text)));\n  }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 1035,
    "end_line": 1037,
    "code": "   papplClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->type[i], !strcmp(driver_data->type[i], media->type) ? \" selected\" : \"\", localize_keyword(client, \"media-type\", driver_data->type[i], text, sizeof(text)));\n  }\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 1036,
    "end_line": 1036,
    "code": "plClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->type[i], !strcmp(driver_data->type[i], media->type) ? \" selected\" : \"\", localize_keyword(client, \"media-type\", driver_data->type[i], text, sizeof(text)));\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 1036,
    "end_line": 1036,
    "code": "plClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->type[i], !strcmp(driver_data->type[i], media->type) ? \" selected\" : \"\", localize_keyword(client, \"media-type\", driver_data->type[i], text, sizeof(text)));\n  ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 1036,
    "end_line": 1036,
    "code": "plClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->type[i], !strcmp(driver_data->type[i], media->type) ? \" selected\" : \"\", localize_keyword(client, \"media-type\", driver_data->type[i], text, sizeof(text)));\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 1036,
    "end_line": 1036,
    "code": "plClientHTMLPrintf(client, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->type[i], !strcmp(driver_data->type[i], media->type) ? \" selected\" : \"\", localize_keyword(client, \"media-type\", driver_data->type[i], text, sizeof(text)));\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 1036,
    "end_line": 1036,
    "code": "ient, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->type[i], !strcmp(driver_data->type[i], media->type) ? \" selected\" : \"\", localize_keyword(client, \"media-type\", driver_data->type[i], text, sizeof(text)));\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  },
  {
    "type": "function_assignment",
    "start_line": 1036,
    "end_line": 1036,
    "code": "ient, \"<option value=\\\"%s\\\"%s>%s</option>\", driver_data->type[i], !strcmp(driver_data->type[i], media->type) ? \" selected\" : \"\", localize_keyword(client, \"media-type\", driver_data->type[i], text, sizeof(text)));\n ",
    "file": "data/codebase/lprint/lprint-common.c"
  }
]