[
  {
    "type": "struct_assignment",
    "start_line": 1,
    "end_line": 573,
    "code": "//\n// Experimental Brother driver for LPrint, a Label Printer Application\n//\n// Copyright \u00a9\u00a02023-2025 by Michael R Sweet.\n//\n// Licensed under Apache License v2.0.  See the file \"LICENSE\" for more\n// information.\n//\n\n#include \"lprint.h\"\n#ifdef LPRINT_EXPERIMENTAL\n\n\n//\n// Local types...\n//\n\ntypedef struct lprint_brother_s\t\t// Brother driver data\n{\n  bool\t\tis_pt_series;\t\t// Is this a PT-series printer?\n  bool\t\tis_ql_800;\t\t// Is this the QL-800 printer?\n  lprint_dither_t dither;\t\t// Dither buffer\n  int\t\tcount;\t\t\t// Output count for print info\n  size_t\talloc_bytes,\t\t// Allocated bytes for output buffer\n\t\tnum_bytes;\t\t// Number of bytes in output buffer\n  unsigned char\t*buffer;\t\t// Output buffer\n} lprint_brother_t;\n\n\n//\n// Local globals...\n//\n\nstatic const char * const lprint_brother_ql_media[] =\n{\t\t\t\t\t// Supported QL-* media sizes\n  \"oe_dk1219-round_0.47x0.47in\",\n  \"oe_dk1204-multi-purpose_0.66x2.1in\",\n  \"oe_dk1203-file-folder_0.66x3.4in\",\n  \"oe_dk1209-small-address_1.1x2.4in\",\n  \"oe_dk1201-address_1.1x3.5in\",\n  \"oe_dk1208-large-address_1.4x3.5in\",\n  \"oe_dk1240-large-multi-purpose_1.9x4in\",\n  \"oe_dk1207-cd-dvd_2.2x2.2in\",\n  \"oe_dk1202-shipping_2.4x3.9in\",\n\n  \"na_index-4x6_4x6in\",\t\t\t\t// DK1241/1247\n\n  \"roll_dk2113-continuous-film_2.4x600in\",\t// Black/Clear\n  \"roll_dk2205-continuous_2.4x1200in\",\t\t// Black on White\n  \"roll_dk2210-continuous_1.1x1200in\",\n  \"roll_dk2211-continuous-film_1.1x600in\",\n  \"roll_dk2212-continuous-film_2.4x600in\",\n  \"roll_dk2214-continuous_0.47x1200in\",\n  \"roll_dk2243-continuous_4x1200in\",\t\t// Black on White\n  \"roll_dk2246-continuous_4.07x1200in\",\t\t// Black on White\n  \"roll_dk2251-continuous_2.4x600in\",\t\t// Black/Red on White\n  \"roll_dk2606-continuous-film_2.4x600in\",\t// Black/Yellow\n  \"roll_dk4205-continuous-removable_2.4x1200in\",// Black on White\n  \"roll_dk4605-continuous-removable_2.4x1200in\",// Black/Yellow on White\n\n  \"roll_max_2.5x3600in\",\n  \"roll_min_0.25x1in\"\n};\n\nstatic const char * const lprint_brother_pt_media[] =\n{\t\t\t\t\t// Supported PT-* media sizes\n  \"oe_thin-1in-tape_0.25x1in\",\n  \"oe_thinner-1in-tape_0.375x1in\",\n  \"oe_medium-1in-tape_0.5x1in\",\n  \"oe_wider-1in-tape_0.75x1in\",\n  \"oe_wide-1in-tape_1x1in\",\n\n  \"oe_thin-2in-tape_0.25x2in\",\n  \"oe_thinner-2in-tape_0.375x2in\",\n  \"oe_medium-2in-tape_0.5x2in\",\n  \"oe_wider-2in-tape_0.75x2in\",\n  \"oe_wide-2in-tape_1x2in\",\n\n  \"oe_thin-3in-tape_0.25x3in\",\n  \"oe_thinner-3in-tape_0.375x3in\",\n  \"oe_medium-3in-tape_0.5x3in\",\n  \"oe_wider-3in-tape_0.75x3in\",\n  \"oe_wide-3in-tape_1x3in\",\n\n  \"roll_max_1x3600in\",\n  \"roll_min_0.25x1in\"\n};\n\n\n//\n// Local functions...\n//\n\nstatic bool\tlprint_brother_get_status(pappl_printer_t *printer, pappl_device_t *device);\nstatic bool\tlprint_brother_printfile(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_brother_rendjob(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_brother_rendpage(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned page);\nstatic bool\tlprint_brother_rstartjob(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_brother_rstartpage(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned page);\nstatic bool\tlprint_brother_rwriteline(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned y, const unsigned char *line);\nstatic bool\tlprint_brother_status(pappl_printer_t *printer);\n\n\n//\n// 'lprintBrother()' - Initialize the Brother driver.\n//\n\nbool\t\t\t\t\t// O - `true` on success, `false` on error\nlprintBrother(\n    pappl_system_t         *system,\t// I - System\n    const char             *driver_name,// I - Driver name\n    const char             *device_uri,\t// I - Device URI\n    const char             *device_id,\t// I - 1284 device ID\n    pappl_pr_driver_data_t *data,\t// I - Pointer to driver data\n    ipp_t                  **attrs,\t// O - Pointer to driver attributes\n    void                   *cbdata)\t// I - Callback data (not used)\n{\n  // Print callbacks...\n  data->printfile_cb  = lprint_brother_printfile;\n  data->rendjob_cb    = lprint_brother_rendjob;\n  data->rendpage_cb   = lprint_brother_rendpage;\n  data->rstartjob_cb  = lprint_brother_rstartjob;\n  data->rstartpage_cb = lprint_brother_rstartpage;\n  data->rwriteline_cb = lprint_brother_rwriteline;\n  data->status_cb     = lprint_brother_status;\n\n  // Vendor-specific format...\n  data->format = LPRINT_BROTHER_PT_CBP_MIMETYPE;\n\n  if (!strncmp(driver_name, \"brother_ql-\", 11))\n  {\n    // QL-series...\n\n    // Set resolution...\n    // TODO: Add support for 300x600dpi mode for QL-570/580N/700/8xx\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 300;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_ql_media) / sizeof(lprint_brother_ql_media[0]));\n    memcpy(data->media, lprint_brother_ql_media, sizeof(lprint_brother_ql_media));\n\n    papplCopyString(data->media_ready[0].size_name, \"roll_dk2205-continuous_2.4x3.9in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"labels\";\n    data->type[1]  = \"continuous\";\n  }\n  else\n  {\n    // PT-series...\n\n    // Set resolution...\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 180;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_pt_media) / sizeof(lprint_brother_pt_media[0]));\n    memcpy(data->media, lprint_brother_pt_media, sizeof(lprint_brother_pt_media));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"continuous\";\n    data->type[1]  = \"continuous-film\";\n    data->type[2]  = \"continuous-removable\";\n  }\n\n  data->num_source = 1;\n  data->source[0]  = \"main-roll\";\n\n  // 5 darkness/density settings\n  data->darkness_configured = 50;\n  data->darkness_supported  = 5;\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_get_status()' - Query the printer status information...\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_get_status(\n    pappl_printer_t *printer,\t\t// I - Printer\n    pappl_device_t  *device)\t\t// I - Device\n{\n  unsigned char\t\tbuffer[32];\t// Status buffer\n  pappl_preason_t\tpreasons;\t// \"printer-state-reasons\" values\n  const char\t\t*media;\t\t// \"media-ready\" value\n\n\n  // Request status...\n  if (!papplDevicePuts(device, \"\\033iS\"))\n    return (false);\n\n  // Read status buffer...\n  if (papplDeviceRead(device, buffer, sizeof(buffer)) < (ssize_t)sizeof(buffer))\n    return (false);\n\n  LPRINT_DEBUG(\"lprint_brother_get_status: Print Head Mark = %02x\\n\", buffer[0]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Size = %02x\\n\", buffer[1]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[2]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Series Code = %02x\\n\", buffer[3]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Model Code = %02x %02x\\n\", buffer[4], buffer[5]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[6]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[7]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Error Info 1 = %02x\\n\", buffer[8]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Error Info 2 = %02x\\n\", buffer[9]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Width = %02x\\n\", buffer[10]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Type = %02x\\n\", buffer[11]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[12]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[13]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[14]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Mode = %02x\\n\", buffer[15]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[16]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Length = %02x\\n\", buffer[17]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Status Type = %02x\\n\", buffer[18]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Phase Type = %02x\\n\", buffer[19]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Phase Number = %02x %02x\\n\", buffer[20], buffer[21]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Notification # = %02x\\n\", buffer[22]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[23]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Tape Color = %02x\\n\", buffer[24]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Text Color = %02x\\n\", buffer[25]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Hardware Info = %02x %02x %02x %02x\\n\", buffer[26], buffer[27], buffer[28], buffer[29]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x %02x\\n\", buffer[30], buffer[31]);\n\n  // Match ready media...\n  if ((media = lprintMediaMatch(printer, 0, 100 * buffer[10], 100 * buffer[17])) != NULL)\n    papplLogPrinter(printer, PAPPL_LOGLEVEL_DEBUG, \"Detected media is '%s'.\", media);\n\n  // Convert error info to \"printer-state-reasons\" bits...\n  preasons = PAPPL_PREASON_NONE;\n  if (buffer[8] & 0x03)\n    preasons |= PAPPL_PREASON_MEDIA_EMPTY;\n  if (buffer[8] & 0xfc)\n    preasons |= PAPPL_PREASON_OTHER;\n  if (buffer[9] & 0x01)\n    preasons |= PAPPL_PREASON_MEDIA_NEEDED;\n  if (buffer[9] & 0x10)\n    preasons |= PAPPL_PREASON_COVER_OPEN;\n  if (buffer[9] & 0x40)\n    preasons |= PAPPL_PREASON_MEDIA_JAM;\n  if (buffer[9] & 0xae)\n    preasons |= PAPPL_PREASON_OTHER;\n\n  papplPrinterSetReasons(printer, preasons, ~preasons);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_printfile()' - Print a file.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_printfile(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  int\t\tfd;\t\t\t// Input file\n  ssize_t\tbytes;\t\t\t// Bytes read/written\n  char\t\tbuffer[65536];\t\t// Read/write buffer\n//  lprint_brother_t\tbrother;\t\t\t// Driver data\n\n\n  // Reset the printer...\n  lprint_brother_rstartjob(job, options, device);\n\n  // Copy the raw file...\n  papplJobSetImpressions(job, 1);\n\n  if ((fd  = open(papplJobGetFilename(job), O_RDONLY)) < 0)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to open print file '%s': %s\", papplJobGetFilename(job), strerror(errno));\n    return (false);\n  }\n\n  while ((bytes = read(fd, buffer, sizeof(buffer))) > 0)\n  {\n    if (papplDeviceWrite(device, buffer, (size_t)bytes) < 0)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to send %d bytes to printer.\", (int)bytes);\n      close(fd);\n      return (false);\n    }\n  }\n  close(fd);\n\n  lprint_brother_rstartjob(job, options, device);\n\n  papplJobSetImpressionsCompleted(job, 1);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rend()' - End a job.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rendjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_brother_t\t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n\n  (void)options;\n\n  papplDevicePuts(device, \"\\032\");\t// Eject the last page\n\n  free(brother->buffer);\n  free(brother);\n  papplJobSetData(job, NULL);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rendpage()' - End a page.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rendpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n  unsigned char\tbuffer[13];\t\t// Print Information command buffer\n\n\n  // Write last line\n  lprint_brother_rwriteline(job, options, device, options->header.cupsHeight, NULL);\n\n  // Send print information...\n  buffer[ 0] = 0x1b;\n  buffer[ 1] = 'i';\n  buffer[ 2] = 'z';\n  buffer[ 3] = !strncmp(options->media.type, \"continuous\", 10) ? 0x04 : 0x0c;\n  buffer[ 4] = 0;\n  buffer[ 5] = options->media.size_width / 100;\n  buffer[ 6] = options->media.size_length / 100;\n#if 1\n  buffer[ 7] = options->header.cupsHeight & 255;\n  buffer[ 8] = (options->header.cupsHeight >> 8) & 255;\n  buffer[ 9] = (options->header.cupsHeight >> 16) & 255;\n  buffer[10] = (options->header.cupsHeight >> 24) & 255;\n#else\n  buffer[ 7] = brother->count & 255;\n  buffer[ 8] = (brother->count >> 8) & 255;\n  buffer[ 9] = (brother->count >> 16) & 255;\n  buffer[10] = (brother->count >> 24) & 255;\n#endif // 1\n  buffer[11] = page == 0 ? 0 : 1;\n  buffer[12] = 0;\n\n  if (!papplDeviceWrite(device, buffer, sizeof(buffer)))\n    return (false);\n\n  // Send label data...\n  if (brother->num_bytes > 0 && !papplDeviceWrite(device, brother->buffer, brother->num_bytes))\n    return (false);\n\n  // Eject/cut\n  papplDevicePrintf(device, \"\\033iM%c\", !strncmp(options->media.type, \"continuous\", 10) ? 64 : 0);\n  papplDeviceFlush(device);\n\n  // Free memory and return...\n  lprintDitherFree(&brother->dither);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rstartjob()' - Start a job.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rstartjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_brother_t *brother = (lprint_brother_t *)calloc(1, sizeof(lprint_brother_t));\n\t\t\t\t\t// Brother driver data\n  const char\t*driver_name = papplPrinterGetDriverName(papplJobGetPrinter(job));\n\t\t\t\t\t// Driver name\n  char\t\tbuffer[400];\t\t// Reset buffer\n  int\t\tdarkness;\t\t// Combined darkness\n\n\n  (void)options;\n\n  // Save driver data...\n  papplJobSetData(job, brother);\n\n  // Reset the printer...\n  memset(buffer, 0, sizeof(buffer));\n  if (driver_name && !strncmp(driver_name, \"brother_pt-\", 11))\n  {\n    // Send short reset sequence for PT-series tape printers\n    papplDeviceWrite(device, buffer, 100);\n    brother->is_pt_series = true;\n  }\n  else\n  {\n    // Send long reset sequence for QL-series label printers\n    papplDeviceWrite(device, buffer, sizeof(buffer));\n\n    brother->is_ql_800 = driver_name && !strcmp(driver_name, \"brother_ql-800\");\n  }\n\n  // Get status information...\n  lprint_brother_get_status(papplJobGetPrinter(job), device);\n//  if (!lprint_brother_get_status(papplJobGetPrinter(job), device))\n//    return (false);\n\n  // Reset and set raster mode...\n  if (!papplDevicePuts(device, \"\\033@\\033ia\\001\"))\n    return (false);\n\n  // print-darkness / printer-darkness-configured\n  if ((darkness = options->print_darkness + options->darkness_configured) < 0)\n    darkness = 0;\n  else if (darkness > 100)\n    darkness = 100;\n\n  return (papplDevicePrintf(device, \"\\033iD%c\", 4 * darkness / 100 + 1));\n}\n\n\n//\n// 'lprint_brother_rstartpage()' - Start a page.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rstartpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_brother_t *brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n\n\n  if (page > 0)\n    papplDevicePuts(device, \"\\014\");\t// Eject the previous page\n\n  if (!lprintDitherAlloc(&brother->dither, job, options, CUPS_CSPACE_K, options->header.HWResolution[0] == 300 ? 1.2 : 1.0))\n    return (false);\n\n  brother->count     = 0;\n  brother->num_bytes = 0;\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rwriteline()' - Write a raster line.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rwriteline(\n    pappl_job_t         *job,\t\t// I - Job\n    pappl_pr_options_t  *options,\t// I - Job options\n    pappl_device_t      *device,\t// I - Output device\n    unsigned            y,\t\t// I - Line number\n    const unsigned char *line)\t\t// I - Line\n{\n  lprint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n  unsigned char\t\t*bufptr;\t// Pointer into page buffer\n\n\n  if (!lprintDitherLine(&brother->dither, y, line))\n    return (true);\n\n  if ((brother->alloc_bytes - brother->num_bytes) < (3 + brother->dither.out_width))\n  {\n    size_t temp_alloc = brother->alloc_bytes + brother->dither.out_width + 4096;\n\t\t\t\t      // New allocated size\n    unsigned char *temp = realloc(brother->buffer, temp_alloc);\n\t\t\t\t      // New buffer\n\n    if (!temp)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate %lu bytes of memory memory.\", (unsigned long)temp_alloc);\n      return (false);\n    }\n\n    brother->alloc_bytes = temp_alloc;\n    brother->buffer      = temp;\n  }\n\n  bufptr = brother->buffer + brother->num_bytes;\n\n  if (brother->is_ql_800 || brother->dither.output[0] || memcmp(brother->dither.output, brother->dither.output + 1, brother->dither.out_width - 1))\n  {\n    // Non-blank line...\n    // TODO: Add PackBits compression support\n    brother->count += 3 + brother->dither.out_width;\n\n    if (brother->is_pt_series)\n    {\n      *bufptr++ = 'G';\n      *bufptr++ = brother->dither.out_width & 255;\n      *bufptr++ = (brother->dither.out_width >> 8) & 255;\n    }\n    else\n    {\n      *bufptr++ = 'g';\n      *bufptr++ = 0;\n      *bufptr++ = brother->dither.out_width;\n    }\n\n    memcpy(bufptr, brother->dither.output, brother->dither.out_width);\n    brother->num_bytes += 3 + brother->dither.out_width;\n  }\n  else\n  {\n    // Blank line\n    brother->count ++;\n\n    *bufptr = 'Z';\n    brother->num_bytes ++;\n  }\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_status()' - Get current printer status.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_status(\n    pappl_printer_t *printer)\t\t// I - Printer\n{\n  (void)printer;\n\n  return (true);\n}\n#endif // LPRINT_EXPERIMENTAL\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 1,
    "end_line": 573,
    "code": "//\n// Experimental Brother driver for LPrint, a Label Printer Application\n//\n// Copyright \u00a9\u00a02023-2025 by Michael R Sweet.\n//\n// Licensed under Apache License v2.0.  See the file \"LICENSE\" for more\n// information.\n//\n\n#include \"lprint.h\"\n#ifdef LPRINT_EXPERIMENTAL\n\n\n//\n// Local types...\n//\n\ntypedef struct lprint_brother_s\t\t// Brother driver data\n{\n  bool\t\tis_pt_series;\t\t// Is this a PT-series printer?\n  bool\t\tis_ql_800;\t\t// Is this the QL-800 printer?\n  lprint_dither_t dither;\t\t// Dither buffer\n  int\t\tcount;\t\t\t// Output count for print info\n  size_t\talloc_bytes,\t\t// Allocated bytes for output buffer\n\t\tnum_bytes;\t\t// Number of bytes in output buffer\n  unsigned char\t*buffer;\t\t// Output buffer\n} lprint_brother_t;\n\n\n//\n// Local globals...\n//\n\nstatic const char * const lprint_brother_ql_media[] =\n{\t\t\t\t\t// Supported QL-* media sizes\n  \"oe_dk1219-round_0.47x0.47in\",\n  \"oe_dk1204-multi-purpose_0.66x2.1in\",\n  \"oe_dk1203-file-folder_0.66x3.4in\",\n  \"oe_dk1209-small-address_1.1x2.4in\",\n  \"oe_dk1201-address_1.1x3.5in\",\n  \"oe_dk1208-large-address_1.4x3.5in\",\n  \"oe_dk1240-large-multi-purpose_1.9x4in\",\n  \"oe_dk1207-cd-dvd_2.2x2.2in\",\n  \"oe_dk1202-shipping_2.4x3.9in\",\n\n  \"na_index-4x6_4x6in\",\t\t\t\t// DK1241/1247\n\n  \"roll_dk2113-continuous-film_2.4x600in\",\t// Black/Clear\n  \"roll_dk2205-continuous_2.4x1200in\",\t\t// Black on White\n  \"roll_dk2210-continuous_1.1x1200in\",\n  \"roll_dk2211-continuous-film_1.1x600in\",\n  \"roll_dk2212-continuous-film_2.4x600in\",\n  \"roll_dk2214-continuous_0.47x1200in\",\n  \"roll_dk2243-continuous_4x1200in\",\t\t// Black on White\n  \"roll_dk2246-continuous_4.07x1200in\",\t\t// Black on White\n  \"roll_dk2251-continuous_2.4x600in\",\t\t// Black/Red on White\n  \"roll_dk2606-continuous-film_2.4x600in\",\t// Black/Yellow\n  \"roll_dk4205-continuous-removable_2.4x1200in\",// Black on White\n  \"roll_dk4605-continuous-removable_2.4x1200in\",// Black/Yellow on White\n\n  \"roll_max_2.5x3600in\",\n  \"roll_min_0.25x1in\"\n};\n\nstatic const char * const lprint_brother_pt_media[] =\n{\t\t\t\t\t// Supported PT-* media sizes\n  \"oe_thin-1in-tape_0.25x1in\",\n  \"oe_thinner-1in-tape_0.375x1in\",\n  \"oe_medium-1in-tape_0.5x1in\",\n  \"oe_wider-1in-tape_0.75x1in\",\n  \"oe_wide-1in-tape_1x1in\",\n\n  \"oe_thin-2in-tape_0.25x2in\",\n  \"oe_thinner-2in-tape_0.375x2in\",\n  \"oe_medium-2in-tape_0.5x2in\",\n  \"oe_wider-2in-tape_0.75x2in\",\n  \"oe_wide-2in-tape_1x2in\",\n\n  \"oe_thin-3in-tape_0.25x3in\",\n  \"oe_thinner-3in-tape_0.375x3in\",\n  \"oe_medium-3in-tape_0.5x3in\",\n  \"oe_wider-3in-tape_0.75x3in\",\n  \"oe_wide-3in-tape_1x3in\",\n\n  \"roll_max_1x3600in\",\n  \"roll_min_0.25x1in\"\n};\n\n\n//\n// Local functions...\n//\n\nstatic bool\tlprint_brother_get_status(pappl_printer_t *printer, pappl_device_t *device);\nstatic bool\tlprint_brother_printfile(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_brother_rendjob(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_brother_rendpage(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned page);\nstatic bool\tlprint_brother_rstartjob(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_brother_rstartpage(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned page);\nstatic bool\tlprint_brother_rwriteline(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned y, const unsigned char *line);\nstatic bool\tlprint_brother_status(pappl_printer_t *printer);\n\n\n//\n// 'lprintBrother()' - Initialize the Brother driver.\n//\n\nbool\t\t\t\t\t// O - `true` on success, `false` on error\nlprintBrother(\n    pappl_system_t         *system,\t// I - System\n    const char             *driver_name,// I - Driver name\n    const char             *device_uri,\t// I - Device URI\n    const char             *device_id,\t// I - 1284 device ID\n    pappl_pr_driver_data_t *data,\t// I - Pointer to driver data\n    ipp_t                  **attrs,\t// O - Pointer to driver attributes\n    void                   *cbdata)\t// I - Callback data (not used)\n{\n  // Print callbacks...\n  data->printfile_cb  = lprint_brother_printfile;\n  data->rendjob_cb    = lprint_brother_rendjob;\n  data->rendpage_cb   = lprint_brother_rendpage;\n  data->rstartjob_cb  = lprint_brother_rstartjob;\n  data->rstartpage_cb = lprint_brother_rstartpage;\n  data->rwriteline_cb = lprint_brother_rwriteline;\n  data->status_cb     = lprint_brother_status;\n\n  // Vendor-specific format...\n  data->format = LPRINT_BROTHER_PT_CBP_MIMETYPE;\n\n  if (!strncmp(driver_name, \"brother_ql-\", 11))\n  {\n    // QL-series...\n\n    // Set resolution...\n    // TODO: Add support for 300x600dpi mode for QL-570/580N/700/8xx\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 300;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_ql_media) / sizeof(lprint_brother_ql_media[0]));\n    memcpy(data->media, lprint_brother_ql_media, sizeof(lprint_brother_ql_media));\n\n    papplCopyString(data->media_ready[0].size_name, \"roll_dk2205-continuous_2.4x3.9in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"labels\";\n    data->type[1]  = \"continuous\";\n  }\n  else\n  {\n    // PT-series...\n\n    // Set resolution...\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 180;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_pt_media) / sizeof(lprint_brother_pt_media[0]));\n    memcpy(data->media, lprint_brother_pt_media, sizeof(lprint_brother_pt_media));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"continuous\";\n    data->type[1]  = \"continuous-film\";\n    data->type[2]  = \"continuous-removable\";\n  }\n\n  data->num_source = 1;\n  data->source[0]  = \"main-roll\";\n\n  // 5 darkness/density settings\n  data->darkness_configured = 50;\n  data->darkness_supported  = 5;\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_get_status()' - Query the printer status information...\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_get_status(\n    pappl_printer_t *printer,\t\t// I - Printer\n    pappl_device_t  *device)\t\t// I - Device\n{\n  unsigned char\t\tbuffer[32];\t// Status buffer\n  pappl_preason_t\tpreasons;\t// \"printer-state-reasons\" values\n  const char\t\t*media;\t\t// \"media-ready\" value\n\n\n  // Request status...\n  if (!papplDevicePuts(device, \"\\033iS\"))\n    return (false);\n\n  // Read status buffer...\n  if (papplDeviceRead(device, buffer, sizeof(buffer)) < (ssize_t)sizeof(buffer))\n    return (false);\n\n  LPRINT_DEBUG(\"lprint_brother_get_status: Print Head Mark = %02x\\n\", buffer[0]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Size = %02x\\n\", buffer[1]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[2]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Series Code = %02x\\n\", buffer[3]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Model Code = %02x %02x\\n\", buffer[4], buffer[5]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[6]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[7]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Error Info 1 = %02x\\n\", buffer[8]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Error Info 2 = %02x\\n\", buffer[9]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Width = %02x\\n\", buffer[10]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Type = %02x\\n\", buffer[11]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[12]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[13]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[14]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Mode = %02x\\n\", buffer[15]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[16]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Length = %02x\\n\", buffer[17]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Status Type = %02x\\n\", buffer[18]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Phase Type = %02x\\n\", buffer[19]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Phase Number = %02x %02x\\n\", buffer[20], buffer[21]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Notification # = %02x\\n\", buffer[22]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[23]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Tape Color = %02x\\n\", buffer[24]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Text Color = %02x\\n\", buffer[25]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Hardware Info = %02x %02x %02x %02x\\n\", buffer[26], buffer[27], buffer[28], buffer[29]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x %02x\\n\", buffer[30], buffer[31]);\n\n  // Match ready media...\n  if ((media = lprintMediaMatch(printer, 0, 100 * buffer[10], 100 * buffer[17])) != NULL)\n    papplLogPrinter(printer, PAPPL_LOGLEVEL_DEBUG, \"Detected media is '%s'.\", media);\n\n  // Convert error info to \"printer-state-reasons\" bits...\n  preasons = PAPPL_PREASON_NONE;\n  if (buffer[8] & 0x03)\n    preasons |= PAPPL_PREASON_MEDIA_EMPTY;\n  if (buffer[8] & 0xfc)\n    preasons |= PAPPL_PREASON_OTHER;\n  if (buffer[9] & 0x01)\n    preasons |= PAPPL_PREASON_MEDIA_NEEDED;\n  if (buffer[9] & 0x10)\n    preasons |= PAPPL_PREASON_COVER_OPEN;\n  if (buffer[9] & 0x40)\n    preasons |= PAPPL_PREASON_MEDIA_JAM;\n  if (buffer[9] & 0xae)\n    preasons |= PAPPL_PREASON_OTHER;\n\n  papplPrinterSetReasons(printer, preasons, ~preasons);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_printfile()' - Print a file.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_printfile(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  int\t\tfd;\t\t\t// Input file\n  ssize_t\tbytes;\t\t\t// Bytes read/written\n  char\t\tbuffer[65536];\t\t// Read/write buffer\n//  lprint_brother_t\tbrother;\t\t\t// Driver data\n\n\n  // Reset the printer...\n  lprint_brother_rstartjob(job, options, device);\n\n  // Copy the raw file...\n  papplJobSetImpressions(job, 1);\n\n  if ((fd  = open(papplJobGetFilename(job), O_RDONLY)) < 0)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to open print file '%s': %s\", papplJobGetFilename(job), strerror(errno));\n    return (false);\n  }\n\n  while ((bytes = read(fd, buffer, sizeof(buffer))) > 0)\n  {\n    if (papplDeviceWrite(device, buffer, (size_t)bytes) < 0)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to send %d bytes to printer.\", (int)bytes);\n      close(fd);\n      return (false);\n    }\n  }\n  close(fd);\n\n  lprint_brother_rstartjob(job, options, device);\n\n  papplJobSetImpressionsCompleted(job, 1);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rend()' - End a job.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rendjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_brother_t\t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n\n  (void)options;\n\n  papplDevicePuts(device, \"\\032\");\t// Eject the last page\n\n  free(brother->buffer);\n  free(brother);\n  papplJobSetData(job, NULL);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rendpage()' - End a page.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rendpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n  unsigned char\tbuffer[13];\t\t// Print Information command buffer\n\n\n  // Write last line\n  lprint_brother_rwriteline(job, options, device, options->header.cupsHeight, NULL);\n\n  // Send print information...\n  buffer[ 0] = 0x1b;\n  buffer[ 1] = 'i';\n  buffer[ 2] = 'z';\n  buffer[ 3] = !strncmp(options->media.type, \"continuous\", 10) ? 0x04 : 0x0c;\n  buffer[ 4] = 0;\n  buffer[ 5] = options->media.size_width / 100;\n  buffer[ 6] = options->media.size_length / 100;\n#if 1\n  buffer[ 7] = options->header.cupsHeight & 255;\n  buffer[ 8] = (options->header.cupsHeight >> 8) & 255;\n  buffer[ 9] = (options->header.cupsHeight >> 16) & 255;\n  buffer[10] = (options->header.cupsHeight >> 24) & 255;\n#else\n  buffer[ 7] = brother->count & 255;\n  buffer[ 8] = (brother->count >> 8) & 255;\n  buffer[ 9] = (brother->count >> 16) & 255;\n  buffer[10] = (brother->count >> 24) & 255;\n#endif // 1\n  buffer[11] = page == 0 ? 0 : 1;\n  buffer[12] = 0;\n\n  if (!papplDeviceWrite(device, buffer, sizeof(buffer)))\n    return (false);\n\n  // Send label data...\n  if (brother->num_bytes > 0 && !papplDeviceWrite(device, brother->buffer, brother->num_bytes))\n    return (false);\n\n  // Eject/cut\n  papplDevicePrintf(device, \"\\033iM%c\", !strncmp(options->media.type, \"continuous\", 10) ? 64 : 0);\n  papplDeviceFlush(device);\n\n  // Free memory and return...\n  lprintDitherFree(&brother->dither);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rstartjob()' - Start a job.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rstartjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_brother_t *brother = (lprint_brother_t *)calloc(1, sizeof(lprint_brother_t));\n\t\t\t\t\t// Brother driver data\n  const char\t*driver_name = papplPrinterGetDriverName(papplJobGetPrinter(job));\n\t\t\t\t\t// Driver name\n  char\t\tbuffer[400];\t\t// Reset buffer\n  int\t\tdarkness;\t\t// Combined darkness\n\n\n  (void)options;\n\n  // Save driver data...\n  papplJobSetData(job, brother);\n\n  // Reset the printer...\n  memset(buffer, 0, sizeof(buffer));\n  if (driver_name && !strncmp(driver_name, \"brother_pt-\", 11))\n  {\n    // Send short reset sequence for PT-series tape printers\n    papplDeviceWrite(device, buffer, 100);\n    brother->is_pt_series = true;\n  }\n  else\n  {\n    // Send long reset sequence for QL-series label printers\n    papplDeviceWrite(device, buffer, sizeof(buffer));\n\n    brother->is_ql_800 = driver_name && !strcmp(driver_name, \"brother_ql-800\");\n  }\n\n  // Get status information...\n  lprint_brother_get_status(papplJobGetPrinter(job), device);\n//  if (!lprint_brother_get_status(papplJobGetPrinter(job), device))\n//    return (false);\n\n  // Reset and set raster mode...\n  if (!papplDevicePuts(device, \"\\033@\\033ia\\001\"))\n    return (false);\n\n  // print-darkness / printer-darkness-configured\n  if ((darkness = options->print_darkness + options->darkness_configured) < 0)\n    darkness = 0;\n  else if (darkness > 100)\n    darkness = 100;\n\n  return (papplDevicePrintf(device, \"\\033iD%c\", 4 * darkness / 100 + 1));\n}\n\n\n//\n// 'lprint_brother_rstartpage()' - Start a page.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rstartpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_brother_t *brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n\n\n  if (page > 0)\n    papplDevicePuts(device, \"\\014\");\t// Eject the previous page\n\n  if (!lprintDitherAlloc(&brother->dither, job, options, CUPS_CSPACE_K, options->header.HWResolution[0] == 300 ? 1.2 : 1.0))\n    return (false);\n\n  brother->count     = 0;\n  brother->num_bytes = 0;\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rwriteline()' - Write a raster line.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rwriteline(\n    pappl_job_t         *job,\t\t// I - Job\n    pappl_pr_options_t  *options,\t// I - Job options\n    pappl_device_t      *device,\t// I - Output device\n    unsigned            y,\t\t// I - Line number\n    const unsigned char *line)\t\t// I - Line\n{\n  lprint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n  unsigned char\t\t*bufptr;\t// Pointer into page buffer\n\n\n  if (!lprintDitherLine(&brother->dither, y, line))\n    return (true);\n\n  if ((brother->alloc_bytes - brother->num_bytes) < (3 + brother->dither.out_width))\n  {\n    size_t temp_alloc = brother->alloc_bytes + brother->dither.out_width + 4096;\n\t\t\t\t      // New allocated size\n    unsigned char *temp = realloc(brother->buffer, temp_alloc);\n\t\t\t\t      // New buffer\n\n    if (!temp)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate %lu bytes of memory memory.\", (unsigned long)temp_alloc);\n      return (false);\n    }\n\n    brother->alloc_bytes = temp_alloc;\n    brother->buffer      = temp;\n  }\n\n  bufptr = brother->buffer + brother->num_bytes;\n\n  if (brother->is_ql_800 || brother->dither.output[0] || memcmp(brother->dither.output, brother->dither.output + 1, brother->dither.out_width - 1))\n  {\n    // Non-blank line...\n    // TODO: Add PackBits compression support\n    brother->count += 3 + brother->dither.out_width;\n\n    if (brother->is_pt_series)\n    {\n      *bufptr++ = 'G';\n      *bufptr++ = brother->dither.out_width & 255;\n      *bufptr++ = (brother->dither.out_width >> 8) & 255;\n    }\n    else\n    {\n      *bufptr++ = 'g';\n      *bufptr++ = 0;\n      *bufptr++ = brother->dither.out_width;\n    }\n\n    memcpy(bufptr, brother->dither.output, brother->dither.out_width);\n    brother->num_bytes += 3 + brother->dither.out_width;\n  }\n  else\n  {\n    // Blank line\n    brother->count ++;\n\n    *bufptr = 'Z';\n    brother->num_bytes ++;\n  }\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_status()' - Get current printer status.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_status(\n    pappl_printer_t *printer)\t\t// I - Printer\n{\n  (void)printer;\n\n  return (true);\n}\n#endif // LPRINT_EXPERIMENTAL\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "static_const_char_pointer_array",
    "start_line": 1,
    "end_line": 573,
    "code": "//\n// Experimental Brother driver for LPrint, a Label Printer Application\n//\n// Copyright \u00a9\u00a02023-2025 by Michael R Sweet.\n//\n// Licensed under Apache License v2.0.  See the file \"LICENSE\" for more\n// information.\n//\n\n#include \"lprint.h\"\n#ifdef LPRINT_EXPERIMENTAL\n\n\n//\n// Local types...\n//\n\ntypedef struct lprint_brother_s\t\t// Brother driver data\n{\n  bool\t\tis_pt_series;\t\t// Is this a PT-series printer?\n  bool\t\tis_ql_800;\t\t// Is this the QL-800 printer?\n  lprint_dither_t dither;\t\t// Dither buffer\n  int\t\tcount;\t\t\t// Output count for print info\n  size_t\talloc_bytes,\t\t// Allocated bytes for output buffer\n\t\tnum_bytes;\t\t// Number of bytes in output buffer\n  unsigned char\t*buffer;\t\t// Output buffer\n} lprint_brother_t;\n\n\n//\n// Local globals...\n//\n\nstatic const char * const lprint_brother_ql_media[] =\n{\t\t\t\t\t// Supported QL-* media sizes\n  \"oe_dk1219-round_0.47x0.47in\",\n  \"oe_dk1204-multi-purpose_0.66x2.1in\",\n  \"oe_dk1203-file-folder_0.66x3.4in\",\n  \"oe_dk1209-small-address_1.1x2.4in\",\n  \"oe_dk1201-address_1.1x3.5in\",\n  \"oe_dk1208-large-address_1.4x3.5in\",\n  \"oe_dk1240-large-multi-purpose_1.9x4in\",\n  \"oe_dk1207-cd-dvd_2.2x2.2in\",\n  \"oe_dk1202-shipping_2.4x3.9in\",\n\n  \"na_index-4x6_4x6in\",\t\t\t\t// DK1241/1247\n\n  \"roll_dk2113-continuous-film_2.4x600in\",\t// Black/Clear\n  \"roll_dk2205-continuous_2.4x1200in\",\t\t// Black on White\n  \"roll_dk2210-continuous_1.1x1200in\",\n  \"roll_dk2211-continuous-film_1.1x600in\",\n  \"roll_dk2212-continuous-film_2.4x600in\",\n  \"roll_dk2214-continuous_0.47x1200in\",\n  \"roll_dk2243-continuous_4x1200in\",\t\t// Black on White\n  \"roll_dk2246-continuous_4.07x1200in\",\t\t// Black on White\n  \"roll_dk2251-continuous_2.4x600in\",\t\t// Black/Red on White\n  \"roll_dk2606-continuous-film_2.4x600in\",\t// Black/Yellow\n  \"roll_dk4205-continuous-removable_2.4x1200in\",// Black on White\n  \"roll_dk4605-continuous-removable_2.4x1200in\",// Black/Yellow on White\n\n  \"roll_max_2.5x3600in\",\n  \"roll_min_0.25x1in\"\n};\n\nstatic const char * const lprint_brother_pt_media[] =\n{\t\t\t\t\t// Supported PT-* media sizes\n  \"oe_thin-1in-tape_0.25x1in\",\n  \"oe_thinner-1in-tape_0.375x1in\",\n  \"oe_medium-1in-tape_0.5x1in\",\n  \"oe_wider-1in-tape_0.75x1in\",\n  \"oe_wide-1in-tape_1x1in\",\n\n  \"oe_thin-2in-tape_0.25x2in\",\n  \"oe_thinner-2in-tape_0.375x2in\",\n  \"oe_medium-2in-tape_0.5x2in\",\n  \"oe_wider-2in-tape_0.75x2in\",\n  \"oe_wide-2in-tape_1x2in\",\n\n  \"oe_thin-3in-tape_0.25x3in\",\n  \"oe_thinner-3in-tape_0.375x3in\",\n  \"oe_medium-3in-tape_0.5x3in\",\n  \"oe_wider-3in-tape_0.75x3in\",\n  \"oe_wide-3in-tape_1x3in\",\n\n  \"roll_max_1x3600in\",\n  \"roll_min_0.25x1in\"\n};\n\n\n//\n// Local functions...\n//\n\nstatic bool\tlprint_brother_get_status(pappl_printer_t *printer, pappl_device_t *device);\nstatic bool\tlprint_brother_printfile(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_brother_rendjob(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_brother_rendpage(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned page);\nstatic bool\tlprint_brother_rstartjob(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_brother_rstartpage(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned page);\nstatic bool\tlprint_brother_rwriteline(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned y, const unsigned char *line);\nstatic bool\tlprint_brother_status(pappl_printer_t *printer);\n\n\n//\n// 'lprintBrother()' - Initialize the Brother driver.\n//\n\nbool\t\t\t\t\t// O - `true` on success, `false` on error\nlprintBrother(\n    pappl_system_t         *system,\t// I - System\n    const char             *driver_name,// I - Driver name\n    const char             *device_uri,\t// I - Device URI\n    const char             *device_id,\t// I - 1284 device ID\n    pappl_pr_driver_data_t *data,\t// I - Pointer to driver data\n    ipp_t                  **attrs,\t// O - Pointer to driver attributes\n    void                   *cbdata)\t// I - Callback data (not used)\n{\n  // Print callbacks...\n  data->printfile_cb  = lprint_brother_printfile;\n  data->rendjob_cb    = lprint_brother_rendjob;\n  data->rendpage_cb   = lprint_brother_rendpage;\n  data->rstartjob_cb  = lprint_brother_rstartjob;\n  data->rstartpage_cb = lprint_brother_rstartpage;\n  data->rwriteline_cb = lprint_brother_rwriteline;\n  data->status_cb     = lprint_brother_status;\n\n  // Vendor-specific format...\n  data->format = LPRINT_BROTHER_PT_CBP_MIMETYPE;\n\n  if (!strncmp(driver_name, \"brother_ql-\", 11))\n  {\n    // QL-series...\n\n    // Set resolution...\n    // TODO: Add support for 300x600dpi mode for QL-570/580N/700/8xx\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 300;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_ql_media) / sizeof(lprint_brother_ql_media[0]));\n    memcpy(data->media, lprint_brother_ql_media, sizeof(lprint_brother_ql_media));\n\n    papplCopyString(data->media_ready[0].size_name, \"roll_dk2205-continuous_2.4x3.9in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"labels\";\n    data->type[1]  = \"continuous\";\n  }\n  else\n  {\n    // PT-series...\n\n    // Set resolution...\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 180;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_pt_media) / sizeof(lprint_brother_pt_media[0]));\n    memcpy(data->media, lprint_brother_pt_media, sizeof(lprint_brother_pt_media));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"continuous\";\n    data->type[1]  = \"continuous-film\";\n    data->type[2]  = \"continuous-removable\";\n  }\n\n  data->num_source = 1;\n  data->source[0]  = \"main-roll\";\n\n  // 5 darkness/density settings\n  data->darkness_configured = 50;\n  data->darkness_supported  = 5;\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_get_status()' - Query the printer status information...\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_get_status(\n    pappl_printer_t *printer,\t\t// I - Printer\n    pappl_device_t  *device)\t\t// I - Device\n{\n  unsigned char\t\tbuffer[32];\t// Status buffer\n  pappl_preason_t\tpreasons;\t// \"printer-state-reasons\" values\n  const char\t\t*media;\t\t// \"media-ready\" value\n\n\n  // Request status...\n  if (!papplDevicePuts(device, \"\\033iS\"))\n    return (false);\n\n  // Read status buffer...\n  if (papplDeviceRead(device, buffer, sizeof(buffer)) < (ssize_t)sizeof(buffer))\n    return (false);\n\n  LPRINT_DEBUG(\"lprint_brother_get_status: Print Head Mark = %02x\\n\", buffer[0]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Size = %02x\\n\", buffer[1]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[2]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Series Code = %02x\\n\", buffer[3]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Model Code = %02x %02x\\n\", buffer[4], buffer[5]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[6]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[7]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Error Info 1 = %02x\\n\", buffer[8]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Error Info 2 = %02x\\n\", buffer[9]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Width = %02x\\n\", buffer[10]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Type = %02x\\n\", buffer[11]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[12]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[13]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[14]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Mode = %02x\\n\", buffer[15]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[16]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Length = %02x\\n\", buffer[17]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Status Type = %02x\\n\", buffer[18]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Phase Type = %02x\\n\", buffer[19]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Phase Number = %02x %02x\\n\", buffer[20], buffer[21]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Notification # = %02x\\n\", buffer[22]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[23]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Tape Color = %02x\\n\", buffer[24]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Text Color = %02x\\n\", buffer[25]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Hardware Info = %02x %02x %02x %02x\\n\", buffer[26], buffer[27], buffer[28], buffer[29]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x %02x\\n\", buffer[30], buffer[31]);\n\n  // Match ready media...\n  if ((media = lprintMediaMatch(printer, 0, 100 * buffer[10], 100 * buffer[17])) != NULL)\n    papplLogPrinter(printer, PAPPL_LOGLEVEL_DEBUG, \"Detected media is '%s'.\", media);\n\n  // Convert error info to \"printer-state-reasons\" bits...\n  preasons = PAPPL_PREASON_NONE;\n  if (buffer[8] & 0x03)\n    preasons |= PAPPL_PREASON_MEDIA_EMPTY;\n  if (buffer[8] & 0xfc)\n    preasons |= PAPPL_PREASON_OTHER;\n  if (buffer[9] & 0x01)\n    preasons |= PAPPL_PREASON_MEDIA_NEEDED;\n  if (buffer[9] & 0x10)\n    preasons |= PAPPL_PREASON_COVER_OPEN;\n  if (buffer[9] & 0x40)\n    preasons |= PAPPL_PREASON_MEDIA_JAM;\n  if (buffer[9] & 0xae)\n    preasons |= PAPPL_PREASON_OTHER;\n\n  papplPrinterSetReasons(printer, preasons, ~preasons);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_printfile()' - Print a file.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_printfile(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  int\t\tfd;\t\t\t// Input file\n  ssize_t\tbytes;\t\t\t// Bytes read/written\n  char\t\tbuffer[65536];\t\t// Read/write buffer\n//  lprint_brother_t\tbrother;\t\t\t// Driver data\n\n\n  // Reset the printer...\n  lprint_brother_rstartjob(job, options, device);\n\n  // Copy the raw file...\n  papplJobSetImpressions(job, 1);\n\n  if ((fd  = open(papplJobGetFilename(job), O_RDONLY)) < 0)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to open print file '%s': %s\", papplJobGetFilename(job), strerror(errno));\n    return (false);\n  }\n\n  while ((bytes = read(fd, buffer, sizeof(buffer))) > 0)\n  {\n    if (papplDeviceWrite(device, buffer, (size_t)bytes) < 0)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to send %d bytes to printer.\", (int)bytes);\n      close(fd);\n      return (false);\n    }\n  }\n  close(fd);\n\n  lprint_brother_rstartjob(job, options, device);\n\n  papplJobSetImpressionsCompleted(job, 1);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rend()' - End a job.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rendjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_brother_t\t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n\n  (void)options;\n\n  papplDevicePuts(device, \"\\032\");\t// Eject the last page\n\n  free(brother->buffer);\n  free(brother);\n  papplJobSetData(job, NULL);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rendpage()' - End a page.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rendpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n  unsigned char\tbuffer[13];\t\t// Print Information command buffer\n\n\n  // Write last line\n  lprint_brother_rwriteline(job, options, device, options->header.cupsHeight, NULL);\n\n  // Send print information...\n  buffer[ 0] = 0x1b;\n  buffer[ 1] = 'i';\n  buffer[ 2] = 'z';\n  buffer[ 3] = !strncmp(options->media.type, \"continuous\", 10) ? 0x04 : 0x0c;\n  buffer[ 4] = 0;\n  buffer[ 5] = options->media.size_width / 100;\n  buffer[ 6] = options->media.size_length / 100;\n#if 1\n  buffer[ 7] = options->header.cupsHeight & 255;\n  buffer[ 8] = (options->header.cupsHeight >> 8) & 255;\n  buffer[ 9] = (options->header.cupsHeight >> 16) & 255;\n  buffer[10] = (options->header.cupsHeight >> 24) & 255;\n#else\n  buffer[ 7] = brother->count & 255;\n  buffer[ 8] = (brother->count >> 8) & 255;\n  buffer[ 9] = (brother->count >> 16) & 255;\n  buffer[10] = (brother->count >> 24) & 255;\n#endif // 1\n  buffer[11] = page == 0 ? 0 : 1;\n  buffer[12] = 0;\n\n  if (!papplDeviceWrite(device, buffer, sizeof(buffer)))\n    return (false);\n\n  // Send label data...\n  if (brother->num_bytes > 0 && !papplDeviceWrite(device, brother->buffer, brother->num_bytes))\n    return (false);\n\n  // Eject/cut\n  papplDevicePrintf(device, \"\\033iM%c\", !strncmp(options->media.type, \"continuous\", 10) ? 64 : 0);\n  papplDeviceFlush(device);\n\n  // Free memory and return...\n  lprintDitherFree(&brother->dither);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rstartjob()' - Start a job.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rstartjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_brother_t *brother = (lprint_brother_t *)calloc(1, sizeof(lprint_brother_t));\n\t\t\t\t\t// Brother driver data\n  const char\t*driver_name = papplPrinterGetDriverName(papplJobGetPrinter(job));\n\t\t\t\t\t// Driver name\n  char\t\tbuffer[400];\t\t// Reset buffer\n  int\t\tdarkness;\t\t// Combined darkness\n\n\n  (void)options;\n\n  // Save driver data...\n  papplJobSetData(job, brother);\n\n  // Reset the printer...\n  memset(buffer, 0, sizeof(buffer));\n  if (driver_name && !strncmp(driver_name, \"brother_pt-\", 11))\n  {\n    // Send short reset sequence for PT-series tape printers\n    papplDeviceWrite(device, buffer, 100);\n    brother->is_pt_series = true;\n  }\n  else\n  {\n    // Send long reset sequence for QL-series label printers\n    papplDeviceWrite(device, buffer, sizeof(buffer));\n\n    brother->is_ql_800 = driver_name && !strcmp(driver_name, \"brother_ql-800\");\n  }\n\n  // Get status information...\n  lprint_brother_get_status(papplJobGetPrinter(job), device);\n//  if (!lprint_brother_get_status(papplJobGetPrinter(job), device))\n//    return (false);\n\n  // Reset and set raster mode...\n  if (!papplDevicePuts(device, \"\\033@\\033ia\\001\"))\n    return (false);\n\n  // print-darkness / printer-darkness-configured\n  if ((darkness = options->print_darkness + options->darkness_configured) < 0)\n    darkness = 0;\n  else if (darkness > 100)\n    darkness = 100;\n\n  return (papplDevicePrintf(device, \"\\033iD%c\", 4 * darkness / 100 + 1));\n}\n\n\n//\n// 'lprint_brother_rstartpage()' - Start a page.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rstartpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_brother_t *brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n\n\n  if (page > 0)\n    papplDevicePuts(device, \"\\014\");\t// Eject the previous page\n\n  if (!lprintDitherAlloc(&brother->dither, job, options, CUPS_CSPACE_K, options->header.HWResolution[0] == 300 ? 1.2 : 1.0))\n    return (false);\n\n  brother->count     = 0;\n  brother->num_bytes = 0;\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rwriteline()' - Write a raster line.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rwriteline(\n    pappl_job_t         *job,\t\t// I - Job\n    pappl_pr_options_t  *options,\t// I - Job options\n    pappl_device_t      *device,\t// I - Output device\n    unsigned            y,\t\t// I - Line number\n    const unsigned char *line)\t\t// I - Line\n{\n  lprint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n  unsigned char\t\t*bufptr;\t// Pointer into page buffer\n\n\n  if (!lprintDitherLine(&brother->dither, y, line))\n    return (true);\n\n  if ((brother->alloc_bytes - brother->num_bytes) < (3 + brother->dither.out_width))\n  {\n    size_t temp_alloc = brother->alloc_bytes + brother->dither.out_width + 4096;\n\t\t\t\t      // New allocated size\n    unsigned char *temp = realloc(brother->buffer, temp_alloc);\n\t\t\t\t      // New buffer\n\n    if (!temp)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate %lu bytes of memory memory.\", (unsigned long)temp_alloc);\n      return (false);\n    }\n\n    brother->alloc_bytes = temp_alloc;\n    brother->buffer      = temp;\n  }\n\n  bufptr = brother->buffer + brother->num_bytes;\n\n  if (brother->is_ql_800 || brother->dither.output[0] || memcmp(brother->dither.output, brother->dither.output + 1, brother->dither.out_width - 1))\n  {\n    // Non-blank line...\n    // TODO: Add PackBits compression support\n    brother->count += 3 + brother->dither.out_width;\n\n    if (brother->is_pt_series)\n    {\n      *bufptr++ = 'G';\n      *bufptr++ = brother->dither.out_width & 255;\n      *bufptr++ = (brother->dither.out_width >> 8) & 255;\n    }\n    else\n    {\n      *bufptr++ = 'g';\n      *bufptr++ = 0;\n      *bufptr++ = brother->dither.out_width;\n    }\n\n    memcpy(bufptr, brother->dither.output, brother->dither.out_width);\n    brother->num_bytes += 3 + brother->dither.out_width;\n  }\n  else\n  {\n    // Blank line\n    brother->count ++;\n\n    *bufptr = 'Z';\n    brother->num_bytes ++;\n  }\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_status()' - Get current printer status.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_status(\n    pappl_printer_t *printer)\t\t// I - Printer\n{\n  (void)printer;\n\n  return (true);\n}\n#endif // LPRINT_EXPERIMENTAL\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "include",
    "start_line": 10,
    "end_line": 11,
    "code": "nclude \"lprint.h\"\n#i",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "preprocessor",
    "start_line": 11,
    "end_line": 572,
    "code": "fdef LPRINT_EXPERIMENTAL\n\n\n//\n// Local types...\n//\n\ntypedef struct lprint_brother_s\t\t// Brother driver data\n{\n  bool\t\tis_pt_series;\t\t// Is this a PT-series printer?\n  bool\t\tis_ql_800;\t\t// Is this the QL-800 printer?\n  lprint_dither_t dither;\t\t// Dither buffer\n  int\t\tcount;\t\t\t// Output count for print info\n  size_t\talloc_bytes,\t\t// Allocated bytes for output buffer\n\t\tnum_bytes;\t\t// Number of bytes in output buffer\n  unsigned char\t*buffer;\t\t// Output buffer\n} lprint_brother_t;\n\n\n//\n// Local globals...\n//\n\nstatic const char * const lprint_brother_ql_media[] =\n{\t\t\t\t\t// Supported QL-* media sizes\n  \"oe_dk1219-round_0.47x0.47in\",\n  \"oe_dk1204-multi-purpose_0.66x2.1in\",\n  \"oe_dk1203-file-folder_0.66x3.4in\",\n  \"oe_dk1209-small-address_1.1x2.4in\",\n  \"oe_dk1201-address_1.1x3.5in\",\n  \"oe_dk1208-large-address_1.4x3.5in\",\n  \"oe_dk1240-large-multi-purpose_1.9x4in\",\n  \"oe_dk1207-cd-dvd_2.2x2.2in\",\n  \"oe_dk1202-shipping_2.4x3.9in\",\n\n  \"na_index-4x6_4x6in\",\t\t\t\t// DK1241/1247\n\n  \"roll_dk2113-continuous-film_2.4x600in\",\t// Black/Clear\n  \"roll_dk2205-continuous_2.4x1200in\",\t\t// Black on White\n  \"roll_dk2210-continuous_1.1x1200in\",\n  \"roll_dk2211-continuous-film_1.1x600in\",\n  \"roll_dk2212-continuous-film_2.4x600in\",\n  \"roll_dk2214-continuous_0.47x1200in\",\n  \"roll_dk2243-continuous_4x1200in\",\t\t// Black on White\n  \"roll_dk2246-continuous_4.07x1200in\",\t\t// Black on White\n  \"roll_dk2251-continuous_2.4x600in\",\t\t// Black/Red on White\n  \"roll_dk2606-continuous-film_2.4x600in\",\t// Black/Yellow\n  \"roll_dk4205-continuous-removable_2.4x1200in\",// Black on White\n  \"roll_dk4605-continuous-removable_2.4x1200in\",// Black/Yellow on White\n\n  \"roll_max_2.5x3600in\",\n  \"roll_min_0.25x1in\"\n};\n\nstatic const char * const lprint_brother_pt_media[] =\n{\t\t\t\t\t// Supported PT-* media sizes\n  \"oe_thin-1in-tape_0.25x1in\",\n  \"oe_thinner-1in-tape_0.375x1in\",\n  \"oe_medium-1in-tape_0.5x1in\",\n  \"oe_wider-1in-tape_0.75x1in\",\n  \"oe_wide-1in-tape_1x1in\",\n\n  \"oe_thin-2in-tape_0.25x2in\",\n  \"oe_thinner-2in-tape_0.375x2in\",\n  \"oe_medium-2in-tape_0.5x2in\",\n  \"oe_wider-2in-tape_0.75x2in\",\n  \"oe_wide-2in-tape_1x2in\",\n\n  \"oe_thin-3in-tape_0.25x3in\",\n  \"oe_thinner-3in-tape_0.375x3in\",\n  \"oe_medium-3in-tape_0.5x3in\",\n  \"oe_wider-3in-tape_0.75x3in\",\n  \"oe_wide-3in-tape_1x3in\",\n\n  \"roll_max_1x3600in\",\n  \"roll_min_0.25x1in\"\n};\n\n\n//\n// Local functions...\n//\n\nstatic bool\tlprint_brother_get_status(pappl_printer_t *printer, pappl_device_t *device);\nstatic bool\tlprint_brother_printfile(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_brother_rendjob(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_brother_rendpage(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned page);\nstatic bool\tlprint_brother_rstartjob(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_brother_rstartpage(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned page);\nstatic bool\tlprint_brother_rwriteline(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned y, const unsigned char *line);\nstatic bool\tlprint_brother_status(pappl_printer_t *printer);\n\n\n//\n// 'lprintBrother()' - Initialize the Brother driver.\n//\n\nbool\t\t\t\t\t// O - `true` on success, `false` on error\nlprintBrother(\n    pappl_system_t         *system,\t// I - System\n    const char             *driver_name,// I - Driver name\n    const char             *device_uri,\t// I - Device URI\n    const char             *device_id,\t// I - 1284 device ID\n    pappl_pr_driver_data_t *data,\t// I - Pointer to driver data\n    ipp_t                  **attrs,\t// O - Pointer to driver attributes\n    void                   *cbdata)\t// I - Callback data (not used)\n{\n  // Print callbacks...\n  data->printfile_cb  = lprint_brother_printfile;\n  data->rendjob_cb    = lprint_brother_rendjob;\n  data->rendpage_cb   = lprint_brother_rendpage;\n  data->rstartjob_cb  = lprint_brother_rstartjob;\n  data->rstartpage_cb = lprint_brother_rstartpage;\n  data->rwriteline_cb = lprint_brother_rwriteline;\n  data->status_cb     = lprint_brother_status;\n\n  // Vendor-specific format...\n  data->format = LPRINT_BROTHER_PT_CBP_MIMETYPE;\n\n  if (!strncmp(driver_name, \"brother_ql-\", 11))\n  {\n    // QL-series...\n\n    // Set resolution...\n    // TODO: Add support for 300x600dpi mode for QL-570/580N/700/8xx\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 300;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_ql_media) / sizeof(lprint_brother_ql_media[0]));\n    memcpy(data->media, lprint_brother_ql_media, sizeof(lprint_brother_ql_media));\n\n    papplCopyString(data->media_ready[0].size_name, \"roll_dk2205-continuous_2.4x3.9in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"labels\";\n    data->type[1]  = \"continuous\";\n  }\n  else\n  {\n    // PT-series...\n\n    // Set resolution...\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 180;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_pt_media) / sizeof(lprint_brother_pt_media[0]));\n    memcpy(data->media, lprint_brother_pt_media, sizeof(lprint_brother_pt_media));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"continuous\";\n    data->type[1]  = \"continuous-film\";\n    data->type[2]  = \"continuous-removable\";\n  }\n\n  data->num_source = 1;\n  data->source[0]  = \"main-roll\";\n\n  // 5 darkness/density settings\n  data->darkness_configured = 50;\n  data->darkness_supported  = 5;\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_get_status()' - Query the printer status information...\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_get_status(\n    pappl_printer_t *printer,\t\t// I - Printer\n    pappl_device_t  *device)\t\t// I - Device\n{\n  unsigned char\t\tbuffer[32];\t// Status buffer\n  pappl_preason_t\tpreasons;\t// \"printer-state-reasons\" values\n  const char\t\t*media;\t\t// \"media-ready\" value\n\n\n  // Request status...\n  if (!papplDevicePuts(device, \"\\033iS\"))\n    return (false);\n\n  // Read status buffer...\n  if (papplDeviceRead(device, buffer, sizeof(buffer)) < (ssize_t)sizeof(buffer))\n    return (false);\n\n  LPRINT_DEBUG(\"lprint_brother_get_status: Print Head Mark = %02x\\n\", buffer[0]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Size = %02x\\n\", buffer[1]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[2]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Series Code = %02x\\n\", buffer[3]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Model Code = %02x %02x\\n\", buffer[4], buffer[5]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[6]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[7]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Error Info 1 = %02x\\n\", buffer[8]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Error Info 2 = %02x\\n\", buffer[9]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Width = %02x\\n\", buffer[10]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Type = %02x\\n\", buffer[11]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[12]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[13]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[14]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Mode = %02x\\n\", buffer[15]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[16]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Length = %02x\\n\", buffer[17]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Status Type = %02x\\n\", buffer[18]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Phase Type = %02x\\n\", buffer[19]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Phase Number = %02x %02x\\n\", buffer[20], buffer[21]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Notification # = %02x\\n\", buffer[22]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[23]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Tape Color = %02x\\n\", buffer[24]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Text Color = %02x\\n\", buffer[25]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Hardware Info = %02x %02x %02x %02x\\n\", buffer[26], buffer[27], buffer[28], buffer[29]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x %02x\\n\", buffer[30], buffer[31]);\n\n  // Match ready media...\n  if ((media = lprintMediaMatch(printer, 0, 100 * buffer[10], 100 * buffer[17])) != NULL)\n    papplLogPrinter(printer, PAPPL_LOGLEVEL_DEBUG, \"Detected media is '%s'.\", media);\n\n  // Convert error info to \"printer-state-reasons\" bits...\n  preasons = PAPPL_PREASON_NONE;\n  if (buffer[8] & 0x03)\n    preasons |= PAPPL_PREASON_MEDIA_EMPTY;\n  if (buffer[8] & 0xfc)\n    preasons |= PAPPL_PREASON_OTHER;\n  if (buffer[9] & 0x01)\n    preasons |= PAPPL_PREASON_MEDIA_NEEDED;\n  if (buffer[9] & 0x10)\n    preasons |= PAPPL_PREASON_COVER_OPEN;\n  if (buffer[9] & 0x40)\n    preasons |= PAPPL_PREASON_MEDIA_JAM;\n  if (buffer[9] & 0xae)\n    preasons |= PAPPL_PREASON_OTHER;\n\n  papplPrinterSetReasons(printer, preasons, ~preasons);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_printfile()' - Print a file.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_printfile(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  int\t\tfd;\t\t\t// Input file\n  ssize_t\tbytes;\t\t\t// Bytes read/written\n  char\t\tbuffer[65536];\t\t// Read/write buffer\n//  lprint_brother_t\tbrother;\t\t\t// Driver data\n\n\n  // Reset the printer...\n  lprint_brother_rstartjob(job, options, device);\n\n  // Copy the raw file...\n  papplJobSetImpressions(job, 1);\n\n  if ((fd  = open(papplJobGetFilename(job), O_RDONLY)) < 0)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to open print file '%s': %s\", papplJobGetFilename(job), strerror(errno));\n    return (false);\n  }\n\n  while ((bytes = read(fd, buffer, sizeof(buffer))) > 0)\n  {\n    if (papplDeviceWrite(device, buffer, (size_t)bytes) < 0)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to send %d bytes to printer.\", (int)bytes);\n      close(fd);\n      return (false);\n    }\n  }\n  close(fd);\n\n  lprint_brother_rstartjob(job, options, device);\n\n  papplJobSetImpressionsCompleted(job, 1);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rend()' - End a job.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rendjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_brother_t\t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n\n  (void)options;\n\n  papplDevicePuts(device, \"\\032\");\t// Eject the last page\n\n  free(brother->buffer);\n  free(brother);\n  papplJobSetData(job, NULL);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rendpage()' - End a page.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rendpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n  unsigned char\tbuffer[13];\t\t// Print Information command buffer\n\n\n  // Write last line\n  lprint_brother_rwriteline(job, options, device, options->header.cupsHeight, NULL);\n\n  // Send print information...\n  buffer[ 0] = 0x1b;\n  buffer[ 1] = 'i';\n  buffer[ 2] = 'z';\n  buffer[ 3] = !strncmp(options->media.type, \"continuous\", 10) ? 0x04 : 0x0c;\n  buffer[ 4] = 0;\n  buffer[ 5] = options->media.size_width / 100;\n  buffer[ 6] = options->media.size_length / 100;\n#if 1\n  buffer[ 7] = options->header.cupsHeight & 255;\n  buffer[ 8] = (options->header.cupsHeight >> 8) & 255;\n  buffer[ 9] = (options->header.cupsHeight >> 16) & 255;\n  buffer[10] = (options->header.cupsHeight >> 24) & 255;\n#else\n  buffer[ 7] = brother->count & 255;\n  buffer[ 8] = (brother->count >> 8) & 255;\n  buffer[ 9] = (brother->count >> 16) & 255;\n  buffer[10] = (brother->count >> 24) & 255;\n#endif // 1\n  buffer[11] = page == 0 ? 0 : 1;\n  buffer[12] = 0;\n\n  if (!papplDeviceWrite(device, buffer, sizeof(buffer)))\n    return (false);\n\n  // Send label data...\n  if (brother->num_bytes > 0 && !papplDeviceWrite(device, brother->buffer, brother->num_bytes))\n    return (false);\n\n  // Eject/cut\n  papplDevicePrintf(device, \"\\033iM%c\", !strncmp(options->media.type, \"continuous\", 10) ? 64 : 0);\n  papplDeviceFlush(device);\n\n  // Free memory and return...\n  lprintDitherFree(&brother->dither);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rstartjob()' - Start a job.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rstartjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_brother_t *brother = (lprint_brother_t *)calloc(1, sizeof(lprint_brother_t));\n\t\t\t\t\t// Brother driver data\n  const char\t*driver_name = papplPrinterGetDriverName(papplJobGetPrinter(job));\n\t\t\t\t\t// Driver name\n  char\t\tbuffer[400];\t\t// Reset buffer\n  int\t\tdarkness;\t\t// Combined darkness\n\n\n  (void)options;\n\n  // Save driver data...\n  papplJobSetData(job, brother);\n\n  // Reset the printer...\n  memset(buffer, 0, sizeof(buffer));\n  if (driver_name && !strncmp(driver_name, \"brother_pt-\", 11))\n  {\n    // Send short reset sequence for PT-series tape printers\n    papplDeviceWrite(device, buffer, 100);\n    brother->is_pt_series = true;\n  }\n  else\n  {\n    // Send long reset sequence for QL-series label printers\n    papplDeviceWrite(device, buffer, sizeof(buffer));\n\n    brother->is_ql_800 = driver_name && !strcmp(driver_name, \"brother_ql-800\");\n  }\n\n  // Get status information...\n  lprint_brother_get_status(papplJobGetPrinter(job), device);\n//  if (!lprint_brother_get_status(papplJobGetPrinter(job), device))\n//    return (false);\n\n  // Reset and set raster mode...\n  if (!papplDevicePuts(device, \"\\033@\\033ia\\001\"))\n    return (false);\n\n  // print-darkness / printer-darkness-configured\n  if ((darkness = options->print_darkness + options->darkness_configured) < 0)\n    darkness = 0;\n  else if (darkness > 100)\n    darkness = 100;\n\n  return (papplDevicePrintf(device, \"\\033iD%c\", 4 * darkness / 100 + 1));\n}\n\n\n//\n// 'lprint_brother_rstartpage()' - Start a page.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rstartpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_brother_t *brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n\n\n  if (page > 0)\n    papplDevicePuts(device, \"\\014\");\t// Eject the previous page\n\n  if (!lprintDitherAlloc(&brother->dither, job, options, CUPS_CSPACE_K, options->header.HWResolution[0] == 300 ? 1.2 : 1.0))\n    return (false);\n\n  brother->count     = 0;\n  brother->num_bytes = 0;\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rwriteline()' - Write a raster line.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rwriteline(\n    pappl_job_t         *job,\t\t// I - Job\n    pappl_pr_options_t  *options,\t// I - Job options\n    pappl_device_t      *device,\t// I - Output device\n    unsigned            y,\t\t// I - Line number\n    const unsigned char *line)\t\t// I - Line\n{\n  lprint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n  unsigned char\t\t*bufptr;\t// Pointer into page buffer\n\n\n  if (!lprintDitherLine(&brother->dither, y, line))\n    return (true);\n\n  if ((brother->alloc_bytes - brother->num_bytes) < (3 + brother->dither.out_width))\n  {\n    size_t temp_alloc = brother->alloc_bytes + brother->dither.out_width + 4096;\n\t\t\t\t      // New allocated size\n    unsigned char *temp = realloc(brother->buffer, temp_alloc);\n\t\t\t\t      // New buffer\n\n    if (!temp)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate %lu bytes of memory memory.\", (unsigned long)temp_alloc);\n      return (false);\n    }\n\n    brother->alloc_bytes = temp_alloc;\n    brother->buffer      = temp;\n  }\n\n  bufptr = brother->buffer + brother->num_bytes;\n\n  if (brother->is_ql_800 || brother->dither.output[0] || memcmp(brother->dither.output, brother->dither.output + 1, brother->dither.out_width - 1))\n  {\n    // Non-blank line...\n    // TODO: Add PackBits compression support\n    brother->count += 3 + brother->dither.out_width;\n\n    if (brother->is_pt_series)\n    {\n      *bufptr++ = 'G';\n      *bufptr++ = brother->dither.out_width & 255;\n      *bufptr++ = (brother->dither.out_width >> 8) & 255;\n    }\n    else\n    {\n      *bufptr++ = 'g';\n      *bufptr++ = 0;\n      *bufptr++ = brother->dither.out_width;\n    }\n\n    memcpy(bufptr, brother->dither.output, brother->dither.out_width);\n    brother->num_bytes += 3 + brother->dither.out_width;\n  }\n  else\n  {\n    // Blank line\n    brother->count ++;\n\n    *bufptr = 'Z';\n    brother->num_bytes ++;\n  }\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_status()' - Get current printer status.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_status(\n    pappl_printer_t *printer)\t\t// I - Printer\n{\n  (void)printer;\n\n  return (true);\n}\n#endif /",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 11,
    "end_line": 572,
    "code": "fdef LPRINT_EXPERIMENTAL\n\n\n//\n// Local types...\n//\n\ntypedef struct lprint_brother_s\t\t// Brother driver data\n{\n  bool\t\tis_pt_series;\t\t// Is this a PT-series printer?\n  bool\t\tis_ql_800;\t\t// Is this the QL-800 printer?\n  lprint_dither_t dither;\t\t// Dither buffer\n  int\t\tcount;\t\t\t// Output count for print info\n  size_t\talloc_bytes,\t\t// Allocated bytes for output buffer\n\t\tnum_bytes;\t\t// Number of bytes in output buffer\n  unsigned char\t*buffer;\t\t// Output buffer\n} lprint_brother_t;\n\n\n//\n// Local globals...\n//\n\nstatic const char * const lprint_brother_ql_media[] =\n{\t\t\t\t\t// Supported QL-* media sizes\n  \"oe_dk1219-round_0.47x0.47in\",\n  \"oe_dk1204-multi-purpose_0.66x2.1in\",\n  \"oe_dk1203-file-folder_0.66x3.4in\",\n  \"oe_dk1209-small-address_1.1x2.4in\",\n  \"oe_dk1201-address_1.1x3.5in\",\n  \"oe_dk1208-large-address_1.4x3.5in\",\n  \"oe_dk1240-large-multi-purpose_1.9x4in\",\n  \"oe_dk1207-cd-dvd_2.2x2.2in\",\n  \"oe_dk1202-shipping_2.4x3.9in\",\n\n  \"na_index-4x6_4x6in\",\t\t\t\t// DK1241/1247\n\n  \"roll_dk2113-continuous-film_2.4x600in\",\t// Black/Clear\n  \"roll_dk2205-continuous_2.4x1200in\",\t\t// Black on White\n  \"roll_dk2210-continuous_1.1x1200in\",\n  \"roll_dk2211-continuous-film_1.1x600in\",\n  \"roll_dk2212-continuous-film_2.4x600in\",\n  \"roll_dk2214-continuous_0.47x1200in\",\n  \"roll_dk2243-continuous_4x1200in\",\t\t// Black on White\n  \"roll_dk2246-continuous_4.07x1200in\",\t\t// Black on White\n  \"roll_dk2251-continuous_2.4x600in\",\t\t// Black/Red on White\n  \"roll_dk2606-continuous-film_2.4x600in\",\t// Black/Yellow\n  \"roll_dk4205-continuous-removable_2.4x1200in\",// Black on White\n  \"roll_dk4605-continuous-removable_2.4x1200in\",// Black/Yellow on White\n\n  \"roll_max_2.5x3600in\",\n  \"roll_min_0.25x1in\"\n};\n\nstatic const char * const lprint_brother_pt_media[] =\n{\t\t\t\t\t// Supported PT-* media sizes\n  \"oe_thin-1in-tape_0.25x1in\",\n  \"oe_thinner-1in-tape_0.375x1in\",\n  \"oe_medium-1in-tape_0.5x1in\",\n  \"oe_wider-1in-tape_0.75x1in\",\n  \"oe_wide-1in-tape_1x1in\",\n\n  \"oe_thin-2in-tape_0.25x2in\",\n  \"oe_thinner-2in-tape_0.375x2in\",\n  \"oe_medium-2in-tape_0.5x2in\",\n  \"oe_wider-2in-tape_0.75x2in\",\n  \"oe_wide-2in-tape_1x2in\",\n\n  \"oe_thin-3in-tape_0.25x3in\",\n  \"oe_thinner-3in-tape_0.375x3in\",\n  \"oe_medium-3in-tape_0.5x3in\",\n  \"oe_wider-3in-tape_0.75x3in\",\n  \"oe_wide-3in-tape_1x3in\",\n\n  \"roll_max_1x3600in\",\n  \"roll_min_0.25x1in\"\n};\n\n\n//\n// Local functions...\n//\n\nstatic bool\tlprint_brother_get_status(pappl_printer_t *printer, pappl_device_t *device);\nstatic bool\tlprint_brother_printfile(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_brother_rendjob(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_brother_rendpage(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned page);\nstatic bool\tlprint_brother_rstartjob(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_brother_rstartpage(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned page);\nstatic bool\tlprint_brother_rwriteline(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned y, const unsigned char *line);\nstatic bool\tlprint_brother_status(pappl_printer_t *printer);\n\n\n//\n// 'lprintBrother()' - Initialize the Brother driver.\n//\n\nbool\t\t\t\t\t// O - `true` on success, `false` on error\nlprintBrother(\n    pappl_system_t         *system,\t// I - System\n    const char             *driver_name,// I - Driver name\n    const char             *device_uri,\t// I - Device URI\n    const char             *device_id,\t// I - 1284 device ID\n    pappl_pr_driver_data_t *data,\t// I - Pointer to driver data\n    ipp_t                  **attrs,\t// O - Pointer to driver attributes\n    void                   *cbdata)\t// I - Callback data (not used)\n{\n  // Print callbacks...\n  data->printfile_cb  = lprint_brother_printfile;\n  data->rendjob_cb    = lprint_brother_rendjob;\n  data->rendpage_cb   = lprint_brother_rendpage;\n  data->rstartjob_cb  = lprint_brother_rstartjob;\n  data->rstartpage_cb = lprint_brother_rstartpage;\n  data->rwriteline_cb = lprint_brother_rwriteline;\n  data->status_cb     = lprint_brother_status;\n\n  // Vendor-specific format...\n  data->format = LPRINT_BROTHER_PT_CBP_MIMETYPE;\n\n  if (!strncmp(driver_name, \"brother_ql-\", 11))\n  {\n    // QL-series...\n\n    // Set resolution...\n    // TODO: Add support for 300x600dpi mode for QL-570/580N/700/8xx\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 300;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_ql_media) / sizeof(lprint_brother_ql_media[0]));\n    memcpy(data->media, lprint_brother_ql_media, sizeof(lprint_brother_ql_media));\n\n    papplCopyString(data->media_ready[0].size_name, \"roll_dk2205-continuous_2.4x3.9in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"labels\";\n    data->type[1]  = \"continuous\";\n  }\n  else\n  {\n    // PT-series...\n\n    // Set resolution...\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 180;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_pt_media) / sizeof(lprint_brother_pt_media[0]));\n    memcpy(data->media, lprint_brother_pt_media, sizeof(lprint_brother_pt_media));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"continuous\";\n    data->type[1]  = \"continuous-film\";\n    data->type[2]  = \"continuous-removable\";\n  }\n\n  data->num_source = 1;\n  data->source[0]  = \"main-roll\";\n\n  // 5 darkness/density settings\n  data->darkness_configured = 50;\n  data->darkness_supported  = 5;\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_get_status()' - Query the printer status information...\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_get_status(\n    pappl_printer_t *printer,\t\t// I - Printer\n    pappl_device_t  *device)\t\t// I - Device\n{\n  unsigned char\t\tbuffer[32];\t// Status buffer\n  pappl_preason_t\tpreasons;\t// \"printer-state-reasons\" values\n  const char\t\t*media;\t\t// \"media-ready\" value\n\n\n  // Request status...\n  if (!papplDevicePuts(device, \"\\033iS\"))\n    return (false);\n\n  // Read status buffer...\n  if (papplDeviceRead(device, buffer, sizeof(buffer)) < (ssize_t)sizeof(buffer))\n    return (false);\n\n  LPRINT_DEBUG(\"lprint_brother_get_status: Print Head Mark = %02x\\n\", buffer[0]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Size = %02x\\n\", buffer[1]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[2]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Series Code = %02x\\n\", buffer[3]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Model Code = %02x %02x\\n\", buffer[4], buffer[5]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[6]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[7]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Error Info 1 = %02x\\n\", buffer[8]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Error Info 2 = %02x\\n\", buffer[9]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Width = %02x\\n\", buffer[10]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Type = %02x\\n\", buffer[11]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[12]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[13]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[14]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Mode = %02x\\n\", buffer[15]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[16]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Length = %02x\\n\", buffer[17]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Status Type = %02x\\n\", buffer[18]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Phase Type = %02x\\n\", buffer[19]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Phase Number = %02x %02x\\n\", buffer[20], buffer[21]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Notification # = %02x\\n\", buffer[22]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[23]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Tape Color = %02x\\n\", buffer[24]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Text Color = %02x\\n\", buffer[25]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Hardware Info = %02x %02x %02x %02x\\n\", buffer[26], buffer[27], buffer[28], buffer[29]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x %02x\\n\", buffer[30], buffer[31]);\n\n  // Match ready media...\n  if ((media = lprintMediaMatch(printer, 0, 100 * buffer[10], 100 * buffer[17])) != NULL)\n    papplLogPrinter(printer, PAPPL_LOGLEVEL_DEBUG, \"Detected media is '%s'.\", media);\n\n  // Convert error info to \"printer-state-reasons\" bits...\n  preasons = PAPPL_PREASON_NONE;\n  if (buffer[8] & 0x03)\n    preasons |= PAPPL_PREASON_MEDIA_EMPTY;\n  if (buffer[8] & 0xfc)\n    preasons |= PAPPL_PREASON_OTHER;\n  if (buffer[9] & 0x01)\n    preasons |= PAPPL_PREASON_MEDIA_NEEDED;\n  if (buffer[9] & 0x10)\n    preasons |= PAPPL_PREASON_COVER_OPEN;\n  if (buffer[9] & 0x40)\n    preasons |= PAPPL_PREASON_MEDIA_JAM;\n  if (buffer[9] & 0xae)\n    preasons |= PAPPL_PREASON_OTHER;\n\n  papplPrinterSetReasons(printer, preasons, ~preasons);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_printfile()' - Print a file.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_printfile(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  int\t\tfd;\t\t\t// Input file\n  ssize_t\tbytes;\t\t\t// Bytes read/written\n  char\t\tbuffer[65536];\t\t// Read/write buffer\n//  lprint_brother_t\tbrother;\t\t\t// Driver data\n\n\n  // Reset the printer...\n  lprint_brother_rstartjob(job, options, device);\n\n  // Copy the raw file...\n  papplJobSetImpressions(job, 1);\n\n  if ((fd  = open(papplJobGetFilename(job), O_RDONLY)) < 0)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to open print file '%s': %s\", papplJobGetFilename(job), strerror(errno));\n    return (false);\n  }\n\n  while ((bytes = read(fd, buffer, sizeof(buffer))) > 0)\n  {\n    if (papplDeviceWrite(device, buffer, (size_t)bytes) < 0)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to send %d bytes to printer.\", (int)bytes);\n      close(fd);\n      return (false);\n    }\n  }\n  close(fd);\n\n  lprint_brother_rstartjob(job, options, device);\n\n  papplJobSetImpressionsCompleted(job, 1);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rend()' - End a job.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rendjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_brother_t\t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n\n  (void)options;\n\n  papplDevicePuts(device, \"\\032\");\t// Eject the last page\n\n  free(brother->buffer);\n  free(brother);\n  papplJobSetData(job, NULL);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rendpage()' - End a page.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rendpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n  unsigned char\tbuffer[13];\t\t// Print Information command buffer\n\n\n  // Write last line\n  lprint_brother_rwriteline(job, options, device, options->header.cupsHeight, NULL);\n\n  // Send print information...\n  buffer[ 0] = 0x1b;\n  buffer[ 1] = 'i';\n  buffer[ 2] = 'z';\n  buffer[ 3] = !strncmp(options->media.type, \"continuous\", 10) ? 0x04 : 0x0c;\n  buffer[ 4] = 0;\n  buffer[ 5] = options->media.size_width / 100;\n  buffer[ 6] = options->media.size_length / 100;\n#if 1\n  buffer[ 7] = options->header.cupsHeight & 255;\n  buffer[ 8] = (options->header.cupsHeight >> 8) & 255;\n  buffer[ 9] = (options->header.cupsHeight >> 16) & 255;\n  buffer[10] = (options->header.cupsHeight >> 24) & 255;\n#else\n  buffer[ 7] = brother->count & 255;\n  buffer[ 8] = (brother->count >> 8) & 255;\n  buffer[ 9] = (brother->count >> 16) & 255;\n  buffer[10] = (brother->count >> 24) & 255;\n#endif // 1\n  buffer[11] = page == 0 ? 0 : 1;\n  buffer[12] = 0;\n\n  if (!papplDeviceWrite(device, buffer, sizeof(buffer)))\n    return (false);\n\n  // Send label data...\n  if (brother->num_bytes > 0 && !papplDeviceWrite(device, brother->buffer, brother->num_bytes))\n    return (false);\n\n  // Eject/cut\n  papplDevicePrintf(device, \"\\033iM%c\", !strncmp(options->media.type, \"continuous\", 10) ? 64 : 0);\n  papplDeviceFlush(device);\n\n  // Free memory and return...\n  lprintDitherFree(&brother->dither);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rstartjob()' - Start a job.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rstartjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_brother_t *brother = (lprint_brother_t *)calloc(1, sizeof(lprint_brother_t));\n\t\t\t\t\t// Brother driver data\n  const char\t*driver_name = papplPrinterGetDriverName(papplJobGetPrinter(job));\n\t\t\t\t\t// Driver name\n  char\t\tbuffer[400];\t\t// Reset buffer\n  int\t\tdarkness;\t\t// Combined darkness\n\n\n  (void)options;\n\n  // Save driver data...\n  papplJobSetData(job, brother);\n\n  // Reset the printer...\n  memset(buffer, 0, sizeof(buffer));\n  if (driver_name && !strncmp(driver_name, \"brother_pt-\", 11))\n  {\n    // Send short reset sequence for PT-series tape printers\n    papplDeviceWrite(device, buffer, 100);\n    brother->is_pt_series = true;\n  }\n  else\n  {\n    // Send long reset sequence for QL-series label printers\n    papplDeviceWrite(device, buffer, sizeof(buffer));\n\n    brother->is_ql_800 = driver_name && !strcmp(driver_name, \"brother_ql-800\");\n  }\n\n  // Get status information...\n  lprint_brother_get_status(papplJobGetPrinter(job), device);\n//  if (!lprint_brother_get_status(papplJobGetPrinter(job), device))\n//    return (false);\n\n  // Reset and set raster mode...\n  if (!papplDevicePuts(device, \"\\033@\\033ia\\001\"))\n    return (false);\n\n  // print-darkness / printer-darkness-configured\n  if ((darkness = options->print_darkness + options->darkness_configured) < 0)\n    darkness = 0;\n  else if (darkness > 100)\n    darkness = 100;\n\n  return (papplDevicePrintf(device, \"\\033iD%c\", 4 * darkness / 100 + 1));\n}\n\n\n//\n// 'lprint_brother_rstartpage()' - Start a page.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rstartpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_brother_t *brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n\n\n  if (page > 0)\n    papplDevicePuts(device, \"\\014\");\t// Eject the previous page\n\n  if (!lprintDitherAlloc(&brother->dither, job, options, CUPS_CSPACE_K, options->header.HWResolution[0] == 300 ? 1.2 : 1.0))\n    return (false);\n\n  brother->count     = 0;\n  brother->num_bytes = 0;\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rwriteline()' - Write a raster line.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rwriteline(\n    pappl_job_t         *job,\t\t// I - Job\n    pappl_pr_options_t  *options,\t// I - Job options\n    pappl_device_t      *device,\t// I - Output device\n    unsigned            y,\t\t// I - Line number\n    const unsigned char *line)\t\t// I - Line\n{\n  lprint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n  unsigned char\t\t*bufptr;\t// Pointer into page buffer\n\n\n  if (!lprintDitherLine(&brother->dither, y, line))\n    return (true);\n\n  if ((brother->alloc_bytes - brother->num_bytes) < (3 + brother->dither.out_width))\n  {\n    size_t temp_alloc = brother->alloc_bytes + brother->dither.out_width + 4096;\n\t\t\t\t      // New allocated size\n    unsigned char *temp = realloc(brother->buffer, temp_alloc);\n\t\t\t\t      // New buffer\n\n    if (!temp)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate %lu bytes of memory memory.\", (unsigned long)temp_alloc);\n      return (false);\n    }\n\n    brother->alloc_bytes = temp_alloc;\n    brother->buffer      = temp;\n  }\n\n  bufptr = brother->buffer + brother->num_bytes;\n\n  if (brother->is_ql_800 || brother->dither.output[0] || memcmp(brother->dither.output, brother->dither.output + 1, brother->dither.out_width - 1))\n  {\n    // Non-blank line...\n    // TODO: Add PackBits compression support\n    brother->count += 3 + brother->dither.out_width;\n\n    if (brother->is_pt_series)\n    {\n      *bufptr++ = 'G';\n      *bufptr++ = brother->dither.out_width & 255;\n      *bufptr++ = (brother->dither.out_width >> 8) & 255;\n    }\n    else\n    {\n      *bufptr++ = 'g';\n      *bufptr++ = 0;\n      *bufptr++ = brother->dither.out_width;\n    }\n\n    memcpy(bufptr, brother->dither.output, brother->dither.out_width);\n    brother->num_bytes += 3 + brother->dither.out_width;\n  }\n  else\n  {\n    // Blank line\n    brother->count ++;\n\n    *bufptr = 'Z';\n    brother->num_bytes ++;\n  }\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_status()' - Get current printer status.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_status(\n    pappl_printer_t *printer)\t\t// I - Printer\n{\n  (void)printer;\n\n  return (true);\n}\n#endif /",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 11,
    "end_line": 572,
    "code": "fdef LPRINT_EXPERIMENTAL\n\n\n//\n// Local types...\n//\n\ntypedef struct lprint_brother_s\t\t// Brother driver data\n{\n  bool\t\tis_pt_series;\t\t// Is this a PT-series printer?\n  bool\t\tis_ql_800;\t\t// Is this the QL-800 printer?\n  lprint_dither_t dither;\t\t// Dither buffer\n  int\t\tcount;\t\t\t// Output count for print info\n  size_t\talloc_bytes,\t\t// Allocated bytes for output buffer\n\t\tnum_bytes;\t\t// Number of bytes in output buffer\n  unsigned char\t*buffer;\t\t// Output buffer\n} lprint_brother_t;\n\n\n//\n// Local globals...\n//\n\nstatic const char * const lprint_brother_ql_media[] =\n{\t\t\t\t\t// Supported QL-* media sizes\n  \"oe_dk1219-round_0.47x0.47in\",\n  \"oe_dk1204-multi-purpose_0.66x2.1in\",\n  \"oe_dk1203-file-folder_0.66x3.4in\",\n  \"oe_dk1209-small-address_1.1x2.4in\",\n  \"oe_dk1201-address_1.1x3.5in\",\n  \"oe_dk1208-large-address_1.4x3.5in\",\n  \"oe_dk1240-large-multi-purpose_1.9x4in\",\n  \"oe_dk1207-cd-dvd_2.2x2.2in\",\n  \"oe_dk1202-shipping_2.4x3.9in\",\n\n  \"na_index-4x6_4x6in\",\t\t\t\t// DK1241/1247\n\n  \"roll_dk2113-continuous-film_2.4x600in\",\t// Black/Clear\n  \"roll_dk2205-continuous_2.4x1200in\",\t\t// Black on White\n  \"roll_dk2210-continuous_1.1x1200in\",\n  \"roll_dk2211-continuous-film_1.1x600in\",\n  \"roll_dk2212-continuous-film_2.4x600in\",\n  \"roll_dk2214-continuous_0.47x1200in\",\n  \"roll_dk2243-continuous_4x1200in\",\t\t// Black on White\n  \"roll_dk2246-continuous_4.07x1200in\",\t\t// Black on White\n  \"roll_dk2251-continuous_2.4x600in\",\t\t// Black/Red on White\n  \"roll_dk2606-continuous-film_2.4x600in\",\t// Black/Yellow\n  \"roll_dk4205-continuous-removable_2.4x1200in\",// Black on White\n  \"roll_dk4605-continuous-removable_2.4x1200in\",// Black/Yellow on White\n\n  \"roll_max_2.5x3600in\",\n  \"roll_min_0.25x1in\"\n};\n\nstatic const char * const lprint_brother_pt_media[] =\n{\t\t\t\t\t// Supported PT-* media sizes\n  \"oe_thin-1in-tape_0.25x1in\",\n  \"oe_thinner-1in-tape_0.375x1in\",\n  \"oe_medium-1in-tape_0.5x1in\",\n  \"oe_wider-1in-tape_0.75x1in\",\n  \"oe_wide-1in-tape_1x1in\",\n\n  \"oe_thin-2in-tape_0.25x2in\",\n  \"oe_thinner-2in-tape_0.375x2in\",\n  \"oe_medium-2in-tape_0.5x2in\",\n  \"oe_wider-2in-tape_0.75x2in\",\n  \"oe_wide-2in-tape_1x2in\",\n\n  \"oe_thin-3in-tape_0.25x3in\",\n  \"oe_thinner-3in-tape_0.375x3in\",\n  \"oe_medium-3in-tape_0.5x3in\",\n  \"oe_wider-3in-tape_0.75x3in\",\n  \"oe_wide-3in-tape_1x3in\",\n\n  \"roll_max_1x3600in\",\n  \"roll_min_0.25x1in\"\n};\n\n\n//\n// Local functions...\n//\n\nstatic bool\tlprint_brother_get_status(pappl_printer_t *printer, pappl_device_t *device);\nstatic bool\tlprint_brother_printfile(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_brother_rendjob(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_brother_rendpage(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned page);\nstatic bool\tlprint_brother_rstartjob(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_brother_rstartpage(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned page);\nstatic bool\tlprint_brother_rwriteline(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned y, const unsigned char *line);\nstatic bool\tlprint_brother_status(pappl_printer_t *printer);\n\n\n//\n// 'lprintBrother()' - Initialize the Brother driver.\n//\n\nbool\t\t\t\t\t// O - `true` on success, `false` on error\nlprintBrother(\n    pappl_system_t         *system,\t// I - System\n    const char             *driver_name,// I - Driver name\n    const char             *device_uri,\t// I - Device URI\n    const char             *device_id,\t// I - 1284 device ID\n    pappl_pr_driver_data_t *data,\t// I - Pointer to driver data\n    ipp_t                  **attrs,\t// O - Pointer to driver attributes\n    void                   *cbdata)\t// I - Callback data (not used)\n{\n  // Print callbacks...\n  data->printfile_cb  = lprint_brother_printfile;\n  data->rendjob_cb    = lprint_brother_rendjob;\n  data->rendpage_cb   = lprint_brother_rendpage;\n  data->rstartjob_cb  = lprint_brother_rstartjob;\n  data->rstartpage_cb = lprint_brother_rstartpage;\n  data->rwriteline_cb = lprint_brother_rwriteline;\n  data->status_cb     = lprint_brother_status;\n\n  // Vendor-specific format...\n  data->format = LPRINT_BROTHER_PT_CBP_MIMETYPE;\n\n  if (!strncmp(driver_name, \"brother_ql-\", 11))\n  {\n    // QL-series...\n\n    // Set resolution...\n    // TODO: Add support for 300x600dpi mode for QL-570/580N/700/8xx\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 300;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_ql_media) / sizeof(lprint_brother_ql_media[0]));\n    memcpy(data->media, lprint_brother_ql_media, sizeof(lprint_brother_ql_media));\n\n    papplCopyString(data->media_ready[0].size_name, \"roll_dk2205-continuous_2.4x3.9in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"labels\";\n    data->type[1]  = \"continuous\";\n  }\n  else\n  {\n    // PT-series...\n\n    // Set resolution...\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 180;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_pt_media) / sizeof(lprint_brother_pt_media[0]));\n    memcpy(data->media, lprint_brother_pt_media, sizeof(lprint_brother_pt_media));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"continuous\";\n    data->type[1]  = \"continuous-film\";\n    data->type[2]  = \"continuous-removable\";\n  }\n\n  data->num_source = 1;\n  data->source[0]  = \"main-roll\";\n\n  // 5 darkness/density settings\n  data->darkness_configured = 50;\n  data->darkness_supported  = 5;\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_get_status()' - Query the printer status information...\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_get_status(\n    pappl_printer_t *printer,\t\t// I - Printer\n    pappl_device_t  *device)\t\t// I - Device\n{\n  unsigned char\t\tbuffer[32];\t// Status buffer\n  pappl_preason_t\tpreasons;\t// \"printer-state-reasons\" values\n  const char\t\t*media;\t\t// \"media-ready\" value\n\n\n  // Request status...\n  if (!papplDevicePuts(device, \"\\033iS\"))\n    return (false);\n\n  // Read status buffer...\n  if (papplDeviceRead(device, buffer, sizeof(buffer)) < (ssize_t)sizeof(buffer))\n    return (false);\n\n  LPRINT_DEBUG(\"lprint_brother_get_status: Print Head Mark = %02x\\n\", buffer[0]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Size = %02x\\n\", buffer[1]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[2]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Series Code = %02x\\n\", buffer[3]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Model Code = %02x %02x\\n\", buffer[4], buffer[5]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[6]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[7]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Error Info 1 = %02x\\n\", buffer[8]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Error Info 2 = %02x\\n\", buffer[9]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Width = %02x\\n\", buffer[10]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Type = %02x\\n\", buffer[11]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[12]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[13]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[14]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Mode = %02x\\n\", buffer[15]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[16]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Length = %02x\\n\", buffer[17]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Status Type = %02x\\n\", buffer[18]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Phase Type = %02x\\n\", buffer[19]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Phase Number = %02x %02x\\n\", buffer[20], buffer[21]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Notification # = %02x\\n\", buffer[22]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[23]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Tape Color = %02x\\n\", buffer[24]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Text Color = %02x\\n\", buffer[25]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Hardware Info = %02x %02x %02x %02x\\n\", buffer[26], buffer[27], buffer[28], buffer[29]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x %02x\\n\", buffer[30], buffer[31]);\n\n  // Match ready media...\n  if ((media = lprintMediaMatch(printer, 0, 100 * buffer[10], 100 * buffer[17])) != NULL)\n    papplLogPrinter(printer, PAPPL_LOGLEVEL_DEBUG, \"Detected media is '%s'.\", media);\n\n  // Convert error info to \"printer-state-reasons\" bits...\n  preasons = PAPPL_PREASON_NONE;\n  if (buffer[8] & 0x03)\n    preasons |= PAPPL_PREASON_MEDIA_EMPTY;\n  if (buffer[8] & 0xfc)\n    preasons |= PAPPL_PREASON_OTHER;\n  if (buffer[9] & 0x01)\n    preasons |= PAPPL_PREASON_MEDIA_NEEDED;\n  if (buffer[9] & 0x10)\n    preasons |= PAPPL_PREASON_COVER_OPEN;\n  if (buffer[9] & 0x40)\n    preasons |= PAPPL_PREASON_MEDIA_JAM;\n  if (buffer[9] & 0xae)\n    preasons |= PAPPL_PREASON_OTHER;\n\n  papplPrinterSetReasons(printer, preasons, ~preasons);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_printfile()' - Print a file.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_printfile(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  int\t\tfd;\t\t\t// Input file\n  ssize_t\tbytes;\t\t\t// Bytes read/written\n  char\t\tbuffer[65536];\t\t// Read/write buffer\n//  lprint_brother_t\tbrother;\t\t\t// Driver data\n\n\n  // Reset the printer...\n  lprint_brother_rstartjob(job, options, device);\n\n  // Copy the raw file...\n  papplJobSetImpressions(job, 1);\n\n  if ((fd  = open(papplJobGetFilename(job), O_RDONLY)) < 0)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to open print file '%s': %s\", papplJobGetFilename(job), strerror(errno));\n    return (false);\n  }\n\n  while ((bytes = read(fd, buffer, sizeof(buffer))) > 0)\n  {\n    if (papplDeviceWrite(device, buffer, (size_t)bytes) < 0)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to send %d bytes to printer.\", (int)bytes);\n      close(fd);\n      return (false);\n    }\n  }\n  close(fd);\n\n  lprint_brother_rstartjob(job, options, device);\n\n  papplJobSetImpressionsCompleted(job, 1);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rend()' - End a job.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rendjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_brother_t\t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n\n  (void)options;\n\n  papplDevicePuts(device, \"\\032\");\t// Eject the last page\n\n  free(brother->buffer);\n  free(brother);\n  papplJobSetData(job, NULL);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rendpage()' - End a page.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rendpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n  unsigned char\tbuffer[13];\t\t// Print Information command buffer\n\n\n  // Write last line\n  lprint_brother_rwriteline(job, options, device, options->header.cupsHeight, NULL);\n\n  // Send print information...\n  buffer[ 0] = 0x1b;\n  buffer[ 1] = 'i';\n  buffer[ 2] = 'z';\n  buffer[ 3] = !strncmp(options->media.type, \"continuous\", 10) ? 0x04 : 0x0c;\n  buffer[ 4] = 0;\n  buffer[ 5] = options->media.size_width / 100;\n  buffer[ 6] = options->media.size_length / 100;\n#if 1\n  buffer[ 7] = options->header.cupsHeight & 255;\n  buffer[ 8] = (options->header.cupsHeight >> 8) & 255;\n  buffer[ 9] = (options->header.cupsHeight >> 16) & 255;\n  buffer[10] = (options->header.cupsHeight >> 24) & 255;\n#else\n  buffer[ 7] = brother->count & 255;\n  buffer[ 8] = (brother->count >> 8) & 255;\n  buffer[ 9] = (brother->count >> 16) & 255;\n  buffer[10] = (brother->count >> 24) & 255;\n#endif // 1\n  buffer[11] = page == 0 ? 0 : 1;\n  buffer[12] = 0;\n\n  if (!papplDeviceWrite(device, buffer, sizeof(buffer)))\n    return (false);\n\n  // Send label data...\n  if (brother->num_bytes > 0 && !papplDeviceWrite(device, brother->buffer, brother->num_bytes))\n    return (false);\n\n  // Eject/cut\n  papplDevicePrintf(device, \"\\033iM%c\", !strncmp(options->media.type, \"continuous\", 10) ? 64 : 0);\n  papplDeviceFlush(device);\n\n  // Free memory and return...\n  lprintDitherFree(&brother->dither);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rstartjob()' - Start a job.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rstartjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_brother_t *brother = (lprint_brother_t *)calloc(1, sizeof(lprint_brother_t));\n\t\t\t\t\t// Brother driver data\n  const char\t*driver_name = papplPrinterGetDriverName(papplJobGetPrinter(job));\n\t\t\t\t\t// Driver name\n  char\t\tbuffer[400];\t\t// Reset buffer\n  int\t\tdarkness;\t\t// Combined darkness\n\n\n  (void)options;\n\n  // Save driver data...\n  papplJobSetData(job, brother);\n\n  // Reset the printer...\n  memset(buffer, 0, sizeof(buffer));\n  if (driver_name && !strncmp(driver_name, \"brother_pt-\", 11))\n  {\n    // Send short reset sequence for PT-series tape printers\n    papplDeviceWrite(device, buffer, 100);\n    brother->is_pt_series = true;\n  }\n  else\n  {\n    // Send long reset sequence for QL-series label printers\n    papplDeviceWrite(device, buffer, sizeof(buffer));\n\n    brother->is_ql_800 = driver_name && !strcmp(driver_name, \"brother_ql-800\");\n  }\n\n  // Get status information...\n  lprint_brother_get_status(papplJobGetPrinter(job), device);\n//  if (!lprint_brother_get_status(papplJobGetPrinter(job), device))\n//    return (false);\n\n  // Reset and set raster mode...\n  if (!papplDevicePuts(device, \"\\033@\\033ia\\001\"))\n    return (false);\n\n  // print-darkness / printer-darkness-configured\n  if ((darkness = options->print_darkness + options->darkness_configured) < 0)\n    darkness = 0;\n  else if (darkness > 100)\n    darkness = 100;\n\n  return (papplDevicePrintf(device, \"\\033iD%c\", 4 * darkness / 100 + 1));\n}\n\n\n//\n// 'lprint_brother_rstartpage()' - Start a page.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rstartpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_brother_t *brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n\n\n  if (page > 0)\n    papplDevicePuts(device, \"\\014\");\t// Eject the previous page\n\n  if (!lprintDitherAlloc(&brother->dither, job, options, CUPS_CSPACE_K, options->header.HWResolution[0] == 300 ? 1.2 : 1.0))\n    return (false);\n\n  brother->count     = 0;\n  brother->num_bytes = 0;\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rwriteline()' - Write a raster line.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rwriteline(\n    pappl_job_t         *job,\t\t// I - Job\n    pappl_pr_options_t  *options,\t// I - Job options\n    pappl_device_t      *device,\t// I - Output device\n    unsigned            y,\t\t// I - Line number\n    const unsigned char *line)\t\t// I - Line\n{\n  lprint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n  unsigned char\t\t*bufptr;\t// Pointer into page buffer\n\n\n  if (!lprintDitherLine(&brother->dither, y, line))\n    return (true);\n\n  if ((brother->alloc_bytes - brother->num_bytes) < (3 + brother->dither.out_width))\n  {\n    size_t temp_alloc = brother->alloc_bytes + brother->dither.out_width + 4096;\n\t\t\t\t      // New allocated size\n    unsigned char *temp = realloc(brother->buffer, temp_alloc);\n\t\t\t\t      // New buffer\n\n    if (!temp)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate %lu bytes of memory memory.\", (unsigned long)temp_alloc);\n      return (false);\n    }\n\n    brother->alloc_bytes = temp_alloc;\n    brother->buffer      = temp;\n  }\n\n  bufptr = brother->buffer + brother->num_bytes;\n\n  if (brother->is_ql_800 || brother->dither.output[0] || memcmp(brother->dither.output, brother->dither.output + 1, brother->dither.out_width - 1))\n  {\n    // Non-blank line...\n    // TODO: Add PackBits compression support\n    brother->count += 3 + brother->dither.out_width;\n\n    if (brother->is_pt_series)\n    {\n      *bufptr++ = 'G';\n      *bufptr++ = brother->dither.out_width & 255;\n      *bufptr++ = (brother->dither.out_width >> 8) & 255;\n    }\n    else\n    {\n      *bufptr++ = 'g';\n      *bufptr++ = 0;\n      *bufptr++ = brother->dither.out_width;\n    }\n\n    memcpy(bufptr, brother->dither.output, brother->dither.out_width);\n    brother->num_bytes += 3 + brother->dither.out_width;\n  }\n  else\n  {\n    // Blank line\n    brother->count ++;\n\n    *bufptr = 'Z';\n    brother->num_bytes ++;\n  }\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_status()' - Get current printer status.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_status(\n    pappl_printer_t *printer)\t\t// I - Printer\n{\n  (void)printer;\n\n  return (true);\n}\n#endif /",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "static_const_char_pointer_array",
    "start_line": 11,
    "end_line": 572,
    "code": "fdef LPRINT_EXPERIMENTAL\n\n\n//\n// Local types...\n//\n\ntypedef struct lprint_brother_s\t\t// Brother driver data\n{\n  bool\t\tis_pt_series;\t\t// Is this a PT-series printer?\n  bool\t\tis_ql_800;\t\t// Is this the QL-800 printer?\n  lprint_dither_t dither;\t\t// Dither buffer\n  int\t\tcount;\t\t\t// Output count for print info\n  size_t\talloc_bytes,\t\t// Allocated bytes for output buffer\n\t\tnum_bytes;\t\t// Number of bytes in output buffer\n  unsigned char\t*buffer;\t\t// Output buffer\n} lprint_brother_t;\n\n\n//\n// Local globals...\n//\n\nstatic const char * const lprint_brother_ql_media[] =\n{\t\t\t\t\t// Supported QL-* media sizes\n  \"oe_dk1219-round_0.47x0.47in\",\n  \"oe_dk1204-multi-purpose_0.66x2.1in\",\n  \"oe_dk1203-file-folder_0.66x3.4in\",\n  \"oe_dk1209-small-address_1.1x2.4in\",\n  \"oe_dk1201-address_1.1x3.5in\",\n  \"oe_dk1208-large-address_1.4x3.5in\",\n  \"oe_dk1240-large-multi-purpose_1.9x4in\",\n  \"oe_dk1207-cd-dvd_2.2x2.2in\",\n  \"oe_dk1202-shipping_2.4x3.9in\",\n\n  \"na_index-4x6_4x6in\",\t\t\t\t// DK1241/1247\n\n  \"roll_dk2113-continuous-film_2.4x600in\",\t// Black/Clear\n  \"roll_dk2205-continuous_2.4x1200in\",\t\t// Black on White\n  \"roll_dk2210-continuous_1.1x1200in\",\n  \"roll_dk2211-continuous-film_1.1x600in\",\n  \"roll_dk2212-continuous-film_2.4x600in\",\n  \"roll_dk2214-continuous_0.47x1200in\",\n  \"roll_dk2243-continuous_4x1200in\",\t\t// Black on White\n  \"roll_dk2246-continuous_4.07x1200in\",\t\t// Black on White\n  \"roll_dk2251-continuous_2.4x600in\",\t\t// Black/Red on White\n  \"roll_dk2606-continuous-film_2.4x600in\",\t// Black/Yellow\n  \"roll_dk4205-continuous-removable_2.4x1200in\",// Black on White\n  \"roll_dk4605-continuous-removable_2.4x1200in\",// Black/Yellow on White\n\n  \"roll_max_2.5x3600in\",\n  \"roll_min_0.25x1in\"\n};\n\nstatic const char * const lprint_brother_pt_media[] =\n{\t\t\t\t\t// Supported PT-* media sizes\n  \"oe_thin-1in-tape_0.25x1in\",\n  \"oe_thinner-1in-tape_0.375x1in\",\n  \"oe_medium-1in-tape_0.5x1in\",\n  \"oe_wider-1in-tape_0.75x1in\",\n  \"oe_wide-1in-tape_1x1in\",\n\n  \"oe_thin-2in-tape_0.25x2in\",\n  \"oe_thinner-2in-tape_0.375x2in\",\n  \"oe_medium-2in-tape_0.5x2in\",\n  \"oe_wider-2in-tape_0.75x2in\",\n  \"oe_wide-2in-tape_1x2in\",\n\n  \"oe_thin-3in-tape_0.25x3in\",\n  \"oe_thinner-3in-tape_0.375x3in\",\n  \"oe_medium-3in-tape_0.5x3in\",\n  \"oe_wider-3in-tape_0.75x3in\",\n  \"oe_wide-3in-tape_1x3in\",\n\n  \"roll_max_1x3600in\",\n  \"roll_min_0.25x1in\"\n};\n\n\n//\n// Local functions...\n//\n\nstatic bool\tlprint_brother_get_status(pappl_printer_t *printer, pappl_device_t *device);\nstatic bool\tlprint_brother_printfile(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_brother_rendjob(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_brother_rendpage(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned page);\nstatic bool\tlprint_brother_rstartjob(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_brother_rstartpage(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned page);\nstatic bool\tlprint_brother_rwriteline(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned y, const unsigned char *line);\nstatic bool\tlprint_brother_status(pappl_printer_t *printer);\n\n\n//\n// 'lprintBrother()' - Initialize the Brother driver.\n//\n\nbool\t\t\t\t\t// O - `true` on success, `false` on error\nlprintBrother(\n    pappl_system_t         *system,\t// I - System\n    const char             *driver_name,// I - Driver name\n    const char             *device_uri,\t// I - Device URI\n    const char             *device_id,\t// I - 1284 device ID\n    pappl_pr_driver_data_t *data,\t// I - Pointer to driver data\n    ipp_t                  **attrs,\t// O - Pointer to driver attributes\n    void                   *cbdata)\t// I - Callback data (not used)\n{\n  // Print callbacks...\n  data->printfile_cb  = lprint_brother_printfile;\n  data->rendjob_cb    = lprint_brother_rendjob;\n  data->rendpage_cb   = lprint_brother_rendpage;\n  data->rstartjob_cb  = lprint_brother_rstartjob;\n  data->rstartpage_cb = lprint_brother_rstartpage;\n  data->rwriteline_cb = lprint_brother_rwriteline;\n  data->status_cb     = lprint_brother_status;\n\n  // Vendor-specific format...\n  data->format = LPRINT_BROTHER_PT_CBP_MIMETYPE;\n\n  if (!strncmp(driver_name, \"brother_ql-\", 11))\n  {\n    // QL-series...\n\n    // Set resolution...\n    // TODO: Add support for 300x600dpi mode for QL-570/580N/700/8xx\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 300;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_ql_media) / sizeof(lprint_brother_ql_media[0]));\n    memcpy(data->media, lprint_brother_ql_media, sizeof(lprint_brother_ql_media));\n\n    papplCopyString(data->media_ready[0].size_name, \"roll_dk2205-continuous_2.4x3.9in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"labels\";\n    data->type[1]  = \"continuous\";\n  }\n  else\n  {\n    // PT-series...\n\n    // Set resolution...\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 180;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_pt_media) / sizeof(lprint_brother_pt_media[0]));\n    memcpy(data->media, lprint_brother_pt_media, sizeof(lprint_brother_pt_media));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"continuous\";\n    data->type[1]  = \"continuous-film\";\n    data->type[2]  = \"continuous-removable\";\n  }\n\n  data->num_source = 1;\n  data->source[0]  = \"main-roll\";\n\n  // 5 darkness/density settings\n  data->darkness_configured = 50;\n  data->darkness_supported  = 5;\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_get_status()' - Query the printer status information...\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_get_status(\n    pappl_printer_t *printer,\t\t// I - Printer\n    pappl_device_t  *device)\t\t// I - Device\n{\n  unsigned char\t\tbuffer[32];\t// Status buffer\n  pappl_preason_t\tpreasons;\t// \"printer-state-reasons\" values\n  const char\t\t*media;\t\t// \"media-ready\" value\n\n\n  // Request status...\n  if (!papplDevicePuts(device, \"\\033iS\"))\n    return (false);\n\n  // Read status buffer...\n  if (papplDeviceRead(device, buffer, sizeof(buffer)) < (ssize_t)sizeof(buffer))\n    return (false);\n\n  LPRINT_DEBUG(\"lprint_brother_get_status: Print Head Mark = %02x\\n\", buffer[0]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Size = %02x\\n\", buffer[1]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[2]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Series Code = %02x\\n\", buffer[3]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Model Code = %02x %02x\\n\", buffer[4], buffer[5]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[6]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[7]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Error Info 1 = %02x\\n\", buffer[8]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Error Info 2 = %02x\\n\", buffer[9]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Width = %02x\\n\", buffer[10]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Type = %02x\\n\", buffer[11]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[12]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[13]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[14]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Mode = %02x\\n\", buffer[15]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[16]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Length = %02x\\n\", buffer[17]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Status Type = %02x\\n\", buffer[18]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Phase Type = %02x\\n\", buffer[19]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Phase Number = %02x %02x\\n\", buffer[20], buffer[21]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Notification # = %02x\\n\", buffer[22]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[23]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Tape Color = %02x\\n\", buffer[24]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Text Color = %02x\\n\", buffer[25]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Hardware Info = %02x %02x %02x %02x\\n\", buffer[26], buffer[27], buffer[28], buffer[29]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x %02x\\n\", buffer[30], buffer[31]);\n\n  // Match ready media...\n  if ((media = lprintMediaMatch(printer, 0, 100 * buffer[10], 100 * buffer[17])) != NULL)\n    papplLogPrinter(printer, PAPPL_LOGLEVEL_DEBUG, \"Detected media is '%s'.\", media);\n\n  // Convert error info to \"printer-state-reasons\" bits...\n  preasons = PAPPL_PREASON_NONE;\n  if (buffer[8] & 0x03)\n    preasons |= PAPPL_PREASON_MEDIA_EMPTY;\n  if (buffer[8] & 0xfc)\n    preasons |= PAPPL_PREASON_OTHER;\n  if (buffer[9] & 0x01)\n    preasons |= PAPPL_PREASON_MEDIA_NEEDED;\n  if (buffer[9] & 0x10)\n    preasons |= PAPPL_PREASON_COVER_OPEN;\n  if (buffer[9] & 0x40)\n    preasons |= PAPPL_PREASON_MEDIA_JAM;\n  if (buffer[9] & 0xae)\n    preasons |= PAPPL_PREASON_OTHER;\n\n  papplPrinterSetReasons(printer, preasons, ~preasons);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_printfile()' - Print a file.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_printfile(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  int\t\tfd;\t\t\t// Input file\n  ssize_t\tbytes;\t\t\t// Bytes read/written\n  char\t\tbuffer[65536];\t\t// Read/write buffer\n//  lprint_brother_t\tbrother;\t\t\t// Driver data\n\n\n  // Reset the printer...\n  lprint_brother_rstartjob(job, options, device);\n\n  // Copy the raw file...\n  papplJobSetImpressions(job, 1);\n\n  if ((fd  = open(papplJobGetFilename(job), O_RDONLY)) < 0)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to open print file '%s': %s\", papplJobGetFilename(job), strerror(errno));\n    return (false);\n  }\n\n  while ((bytes = read(fd, buffer, sizeof(buffer))) > 0)\n  {\n    if (papplDeviceWrite(device, buffer, (size_t)bytes) < 0)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to send %d bytes to printer.\", (int)bytes);\n      close(fd);\n      return (false);\n    }\n  }\n  close(fd);\n\n  lprint_brother_rstartjob(job, options, device);\n\n  papplJobSetImpressionsCompleted(job, 1);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rend()' - End a job.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rendjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_brother_t\t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n\n  (void)options;\n\n  papplDevicePuts(device, \"\\032\");\t// Eject the last page\n\n  free(brother->buffer);\n  free(brother);\n  papplJobSetData(job, NULL);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rendpage()' - End a page.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rendpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n  unsigned char\tbuffer[13];\t\t// Print Information command buffer\n\n\n  // Write last line\n  lprint_brother_rwriteline(job, options, device, options->header.cupsHeight, NULL);\n\n  // Send print information...\n  buffer[ 0] = 0x1b;\n  buffer[ 1] = 'i';\n  buffer[ 2] = 'z';\n  buffer[ 3] = !strncmp(options->media.type, \"continuous\", 10) ? 0x04 : 0x0c;\n  buffer[ 4] = 0;\n  buffer[ 5] = options->media.size_width / 100;\n  buffer[ 6] = options->media.size_length / 100;\n#if 1\n  buffer[ 7] = options->header.cupsHeight & 255;\n  buffer[ 8] = (options->header.cupsHeight >> 8) & 255;\n  buffer[ 9] = (options->header.cupsHeight >> 16) & 255;\n  buffer[10] = (options->header.cupsHeight >> 24) & 255;\n#else\n  buffer[ 7] = brother->count & 255;\n  buffer[ 8] = (brother->count >> 8) & 255;\n  buffer[ 9] = (brother->count >> 16) & 255;\n  buffer[10] = (brother->count >> 24) & 255;\n#endif // 1\n  buffer[11] = page == 0 ? 0 : 1;\n  buffer[12] = 0;\n\n  if (!papplDeviceWrite(device, buffer, sizeof(buffer)))\n    return (false);\n\n  // Send label data...\n  if (brother->num_bytes > 0 && !papplDeviceWrite(device, brother->buffer, brother->num_bytes))\n    return (false);\n\n  // Eject/cut\n  papplDevicePrintf(device, \"\\033iM%c\", !strncmp(options->media.type, \"continuous\", 10) ? 64 : 0);\n  papplDeviceFlush(device);\n\n  // Free memory and return...\n  lprintDitherFree(&brother->dither);\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rstartjob()' - Start a job.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rstartjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_brother_t *brother = (lprint_brother_t *)calloc(1, sizeof(lprint_brother_t));\n\t\t\t\t\t// Brother driver data\n  const char\t*driver_name = papplPrinterGetDriverName(papplJobGetPrinter(job));\n\t\t\t\t\t// Driver name\n  char\t\tbuffer[400];\t\t// Reset buffer\n  int\t\tdarkness;\t\t// Combined darkness\n\n\n  (void)options;\n\n  // Save driver data...\n  papplJobSetData(job, brother);\n\n  // Reset the printer...\n  memset(buffer, 0, sizeof(buffer));\n  if (driver_name && !strncmp(driver_name, \"brother_pt-\", 11))\n  {\n    // Send short reset sequence for PT-series tape printers\n    papplDeviceWrite(device, buffer, 100);\n    brother->is_pt_series = true;\n  }\n  else\n  {\n    // Send long reset sequence for QL-series label printers\n    papplDeviceWrite(device, buffer, sizeof(buffer));\n\n    brother->is_ql_800 = driver_name && !strcmp(driver_name, \"brother_ql-800\");\n  }\n\n  // Get status information...\n  lprint_brother_get_status(papplJobGetPrinter(job), device);\n//  if (!lprint_brother_get_status(papplJobGetPrinter(job), device))\n//    return (false);\n\n  // Reset and set raster mode...\n  if (!papplDevicePuts(device, \"\\033@\\033ia\\001\"))\n    return (false);\n\n  // print-darkness / printer-darkness-configured\n  if ((darkness = options->print_darkness + options->darkness_configured) < 0)\n    darkness = 0;\n  else if (darkness > 100)\n    darkness = 100;\n\n  return (papplDevicePrintf(device, \"\\033iD%c\", 4 * darkness / 100 + 1));\n}\n\n\n//\n// 'lprint_brother_rstartpage()' - Start a page.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rstartpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_brother_t *brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n\n\n  if (page > 0)\n    papplDevicePuts(device, \"\\014\");\t// Eject the previous page\n\n  if (!lprintDitherAlloc(&brother->dither, job, options, CUPS_CSPACE_K, options->header.HWResolution[0] == 300 ? 1.2 : 1.0))\n    return (false);\n\n  brother->count     = 0;\n  brother->num_bytes = 0;\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_rwriteline()' - Write a raster line.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rwriteline(\n    pappl_job_t         *job,\t\t// I - Job\n    pappl_pr_options_t  *options,\t// I - Job options\n    pappl_device_t      *device,\t// I - Output device\n    unsigned            y,\t\t// I - Line number\n    const unsigned char *line)\t\t// I - Line\n{\n  lprint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n  unsigned char\t\t*bufptr;\t// Pointer into page buffer\n\n\n  if (!lprintDitherLine(&brother->dither, y, line))\n    return (true);\n\n  if ((brother->alloc_bytes - brother->num_bytes) < (3 + brother->dither.out_width))\n  {\n    size_t temp_alloc = brother->alloc_bytes + brother->dither.out_width + 4096;\n\t\t\t\t      // New allocated size\n    unsigned char *temp = realloc(brother->buffer, temp_alloc);\n\t\t\t\t      // New buffer\n\n    if (!temp)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate %lu bytes of memory memory.\", (unsigned long)temp_alloc);\n      return (false);\n    }\n\n    brother->alloc_bytes = temp_alloc;\n    brother->buffer      = temp;\n  }\n\n  bufptr = brother->buffer + brother->num_bytes;\n\n  if (brother->is_ql_800 || brother->dither.output[0] || memcmp(brother->dither.output, brother->dither.output + 1, brother->dither.out_width - 1))\n  {\n    // Non-blank line...\n    // TODO: Add PackBits compression support\n    brother->count += 3 + brother->dither.out_width;\n\n    if (brother->is_pt_series)\n    {\n      *bufptr++ = 'G';\n      *bufptr++ = brother->dither.out_width & 255;\n      *bufptr++ = (brother->dither.out_width >> 8) & 255;\n    }\n    else\n    {\n      *bufptr++ = 'g';\n      *bufptr++ = 0;\n      *bufptr++ = brother->dither.out_width;\n    }\n\n    memcpy(bufptr, brother->dither.output, brother->dither.out_width);\n    brother->num_bytes += 3 + brother->dither.out_width;\n  }\n  else\n  {\n    // Blank line\n    brother->count ++;\n\n    *bufptr = 'Z';\n    brother->num_bytes ++;\n  }\n\n  return (true);\n}\n\n\n//\n// 'lprint_brother_status()' - Get current printer status.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_status(\n    pappl_printer_t *printer)\t\t// I - Printer\n{\n  (void)printer;\n\n  return (true);\n}\n#endif /",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "typedef",
    "start_line": 18,
    "end_line": 27,
    "code": "pedef struct lprint_brother_s\t\t// Brother driver data\n{\n  bool\t\tis_pt_series;\t\t// Is this a PT-series printer?\n  bool\t\tis_ql_800;\t\t// Is this the QL-800 printer?\n  lprint_dither_t dither;\t\t// Dither buffer\n  int\t\tcount;\t\t\t// Output count for print info\n  size_t\talloc_bytes,\t\t// Allocated bytes for output buffer\n\t\tnum_bytes;\t\t// Number of bytes in output buffer\n  unsigned char\t*buffer;\t\t// Output buffer\n} lprint_brother_t;\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct",
    "name": "lprint_brother_s",
    "hierarchy": "lprint_brother_s",
    "start_line": 18,
    "end_line": 27,
    "code": "ruct lprint_brother_s\t\t// Brother driver data\n{\n  bool\t\tis_pt_series;\t\t// Is this a PT-series printer?\n  bool\t\tis_ql_800;\t\t// Is this the QL-800 printer?\n  lprint_dither_t dither;\t\t// Dither buffer\n  int\t\tcount;\t\t\t// Output count for print info\n  size_t\talloc_bytes,\t\t// Allocated bytes for output buffer\n\t\tnum_bytes;\t\t// Number of bytes in output buffer\n  unsigned char\t*buffer;\t\t// Output buffer\n} l",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "global_variable",
    "start_line": 34,
    "end_line": 63,
    "code": "atic const char * const lprint_brother_ql_media[] =\n{\t\t\t\t\t// Supported QL-* media sizes\n  \"oe_dk1219-round_0.47x0.47in\",\n  \"oe_dk1204-multi-purpose_0.66x2.1in\",\n  \"oe_dk1203-file-folder_0.66x3.4in\",\n  \"oe_dk1209-small-address_1.1x2.4in\",\n  \"oe_dk1201-address_1.1x3.5in\",\n  \"oe_dk1208-large-address_1.4x3.5in\",\n  \"oe_dk1240-large-multi-purpose_1.9x4in\",\n  \"oe_dk1207-cd-dvd_2.2x2.2in\",\n  \"oe_dk1202-shipping_2.4x3.9in\",\n\n  \"na_index-4x6_4x6in\",\t\t\t\t// DK1241/1247\n\n  \"roll_dk2113-continuous-film_2.4x600in\",\t// Black/Clear\n  \"roll_dk2205-continuous_2.4x1200in\",\t\t// Black on White\n  \"roll_dk2210-continuous_1.1x1200in\",\n  \"roll_dk2211-continuous-film_1.1x600in\",\n  \"roll_dk2212-continuous-film_2.4x600in\",\n  \"roll_dk2214-continuous_0.47x1200in\",\n  \"roll_dk2243-continuous_4x1200in\",\t\t// Black on White\n  \"roll_dk2246-continuous_4.07x1200in\",\t\t// Black on White\n  \"roll_dk2251-continuous_2.4x600in\",\t\t// Black/Red on White\n  \"roll_dk2606-continuous-film_2.4x600in\",\t// Black/Yellow\n  \"roll_dk4205-continuous-removable_2.4x1200in\",// Black on White\n  \"roll_dk4605-continuous-removable_2.4x1200in\",// Black/Yellow on White\n\n  \"roll_max_2.5x3600in\",\n  \"roll_min_0.25x1in\"\n};\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 34,
    "end_line": 63,
    "code": "atic const char * const lprint_brother_ql_media[] =\n{\t\t\t\t\t// Supported QL-* media sizes\n  \"oe_dk1219-round_0.47x0.47in\",\n  \"oe_dk1204-multi-purpose_0.66x2.1in\",\n  \"oe_dk1203-file-folder_0.66x3.4in\",\n  \"oe_dk1209-small-address_1.1x2.4in\",\n  \"oe_dk1201-address_1.1x3.5in\",\n  \"oe_dk1208-large-address_1.4x3.5in\",\n  \"oe_dk1240-large-multi-purpose_1.9x4in\",\n  \"oe_dk1207-cd-dvd_2.2x2.2in\",\n  \"oe_dk1202-shipping_2.4x3.9in\",\n\n  \"na_index-4x6_4x6in\",\t\t\t\t// DK1241/1247\n\n  \"roll_dk2113-continuous-film_2.4x600in\",\t// Black/Clear\n  \"roll_dk2205-continuous_2.4x1200in\",\t\t// Black on White\n  \"roll_dk2210-continuous_1.1x1200in\",\n  \"roll_dk2211-continuous-film_1.1x600in\",\n  \"roll_dk2212-continuous-film_2.4x600in\",\n  \"roll_dk2214-continuous_0.47x1200in\",\n  \"roll_dk2243-continuous_4x1200in\",\t\t// Black on White\n  \"roll_dk2246-continuous_4.07x1200in\",\t\t// Black on White\n  \"roll_dk2251-continuous_2.4x600in\",\t\t// Black/Red on White\n  \"roll_dk2606-continuous-film_2.4x600in\",\t// Black/Yellow\n  \"roll_dk4205-continuous-removable_2.4x1200in\",// Black on White\n  \"roll_dk4605-continuous-removable_2.4x1200in\",// Black/Yellow on White\n\n  \"roll_max_2.5x3600in\",\n  \"roll_min_0.25x1in\"\n};\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 34,
    "end_line": 63,
    "code": "const lprint_brother_ql_media[] =\n{\t\t\t\t\t// Supported QL-* media sizes\n  \"oe_dk1219-round_0.47x0.47in\",\n  \"oe_dk1204-multi-purpose_0.66x2.1in\",\n  \"oe_dk1203-file-folder_0.66x3.4in\",\n  \"oe_dk1209-small-address_1.1x2.4in\",\n  \"oe_dk1201-address_1.1x3.5in\",\n  \"oe_dk1208-large-address_1.4x3.5in\",\n  \"oe_dk1240-large-multi-purpose_1.9x4in\",\n  \"oe_dk1207-cd-dvd_2.2x2.2in\",\n  \"oe_dk1202-shipping_2.4x3.9in\",\n\n  \"na_index-4x6_4x6in\",\t\t\t\t// DK1241/1247\n\n  \"roll_dk2113-continuous-film_2.4x600in\",\t// Black/Clear\n  \"roll_dk2205-continuous_2.4x1200in\",\t\t// Black on White\n  \"roll_dk2210-continuous_1.1x1200in\",\n  \"roll_dk2211-continuous-film_1.1x600in\",\n  \"roll_dk2212-continuous-film_2.4x600in\",\n  \"roll_dk2214-continuous_0.47x1200in\",\n  \"roll_dk2243-continuous_4x1200in\",\t\t// Black on White\n  \"roll_dk2246-continuous_4.07x1200in\",\t\t// Black on White\n  \"roll_dk2251-continuous_2.4x600in\",\t\t// Black/Red on White\n  \"roll_dk2606-continuous-film_2.4x600in\",\t// Black/Yellow\n  \"roll_dk4205-continuous-removable_2.4x1200in\",// Black on White\n  \"roll_dk4605-continuous-removable_2.4x1200in\",// Black/Yellow on White\n\n  \"roll_max_2.5x3600in\",\n  \"roll_min_0.25x1in\"\n};\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "global_variable",
    "start_line": 65,
    "end_line": 87,
    "code": "atic const char * const lprint_brother_pt_media[] =\n{\t\t\t\t\t// Supported PT-* media sizes\n  \"oe_thin-1in-tape_0.25x1in\",\n  \"oe_thinner-1in-tape_0.375x1in\",\n  \"oe_medium-1in-tape_0.5x1in\",\n  \"oe_wider-1in-tape_0.75x1in\",\n  \"oe_wide-1in-tape_1x1in\",\n\n  \"oe_thin-2in-tape_0.25x2in\",\n  \"oe_thinner-2in-tape_0.375x2in\",\n  \"oe_medium-2in-tape_0.5x2in\",\n  \"oe_wider-2in-tape_0.75x2in\",\n  \"oe_wide-2in-tape_1x2in\",\n\n  \"oe_thin-3in-tape_0.25x3in\",\n  \"oe_thinner-3in-tape_0.375x3in\",\n  \"oe_medium-3in-tape_0.5x3in\",\n  \"oe_wider-3in-tape_0.75x3in\",\n  \"oe_wide-3in-tape_1x3in\",\n\n  \"roll_max_1x3600in\",\n  \"roll_min_0.25x1in\"\n};\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 65,
    "end_line": 87,
    "code": "atic const char * const lprint_brother_pt_media[] =\n{\t\t\t\t\t// Supported PT-* media sizes\n  \"oe_thin-1in-tape_0.25x1in\",\n  \"oe_thinner-1in-tape_0.375x1in\",\n  \"oe_medium-1in-tape_0.5x1in\",\n  \"oe_wider-1in-tape_0.75x1in\",\n  \"oe_wide-1in-tape_1x1in\",\n\n  \"oe_thin-2in-tape_0.25x2in\",\n  \"oe_thinner-2in-tape_0.375x2in\",\n  \"oe_medium-2in-tape_0.5x2in\",\n  \"oe_wider-2in-tape_0.75x2in\",\n  \"oe_wide-2in-tape_1x2in\",\n\n  \"oe_thin-3in-tape_0.25x3in\",\n  \"oe_thinner-3in-tape_0.375x3in\",\n  \"oe_medium-3in-tape_0.5x3in\",\n  \"oe_wider-3in-tape_0.75x3in\",\n  \"oe_wide-3in-tape_1x3in\",\n\n  \"roll_max_1x3600in\",\n  \"roll_min_0.25x1in\"\n};\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 65,
    "end_line": 87,
    "code": "const lprint_brother_pt_media[] =\n{\t\t\t\t\t// Supported PT-* media sizes\n  \"oe_thin-1in-tape_0.25x1in\",\n  \"oe_thinner-1in-tape_0.375x1in\",\n  \"oe_medium-1in-tape_0.5x1in\",\n  \"oe_wider-1in-tape_0.75x1in\",\n  \"oe_wide-1in-tape_1x1in\",\n\n  \"oe_thin-2in-tape_0.25x2in\",\n  \"oe_thinner-2in-tape_0.375x2in\",\n  \"oe_medium-2in-tape_0.5x2in\",\n  \"oe_wider-2in-tape_0.75x2in\",\n  \"oe_wide-2in-tape_1x2in\",\n\n  \"oe_thin-3in-tape_0.25x3in\",\n  \"oe_thinner-3in-tape_0.375x3in\",\n  \"oe_medium-3in-tape_0.5x3in\",\n  \"oe_wider-3in-tape_0.75x3in\",\n  \"oe_wide-3in-tape_1x3in\",\n\n  \"roll_max_1x3600in\",\n  \"roll_min_0.25x1in\"\n};\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function",
    "start_line": 108,
    "end_line": 192,
    "name": "lprintBrother",
    "parent": null,
    "hierarchy": "lprintBrother",
    "code": "ol\t\t\t\t\t// O - `true` on success, `false` on error\nlprintBrother(\n    pappl_system_t         *system,\t// I - System\n    const char             *driver_name,// I - Driver name\n    const char             *device_uri,\t// I - Device URI\n    const char             *device_id,\t// I - 1284 device ID\n    pappl_pr_driver_data_t *data,\t// I - Pointer to driver data\n    ipp_t                  **attrs,\t// O - Pointer to driver attributes\n    void                   *cbdata)\t// I - Callback data (not used)\n{\n  // Print callbacks...\n  data->printfile_cb  = lprint_brother_printfile;\n  data->rendjob_cb    = lprint_brother_rendjob;\n  data->rendpage_cb   = lprint_brother_rendpage;\n  data->rstartjob_cb  = lprint_brother_rstartjob;\n  data->rstartpage_cb = lprint_brother_rstartpage;\n  data->rwriteline_cb = lprint_brother_rwriteline;\n  data->status_cb     = lprint_brother_status;\n\n  // Vendor-specific format...\n  data->format = LPRINT_BROTHER_PT_CBP_MIMETYPE;\n\n  if (!strncmp(driver_name, \"brother_ql-\", 11))\n  {\n    // QL-series...\n\n    // Set resolution...\n    // TODO: Add support for 300x600dpi mode for QL-570/580N/700/8xx\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 300;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_ql_media) / sizeof(lprint_brother_ql_media[0]));\n    memcpy(data->media, lprint_brother_ql_media, sizeof(lprint_brother_ql_media));\n\n    papplCopyString(data->media_ready[0].size_name, \"roll_dk2205-continuous_2.4x3.9in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"labels\";\n    data->type[1]  = \"continuous\";\n  }\n  else\n  {\n    // PT-series...\n\n    // Set resolution...\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 180;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_pt_media) / sizeof(lprint_brother_pt_media[0]));\n    memcpy(data->media, lprint_brother_pt_media, sizeof(lprint_brother_pt_media));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"continuous\";\n    data->type[1]  = \"continuous-film\";\n    data->type[2]  = \"continuous-removable\";\n  }\n\n  data->num_source = 1;\n  data->source[0]  = \"main-roll\";\n\n  // 5 darkness/density settings\n  data->darkness_configured = 50;\n  data->darkness_supported  = 5;\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 108,
    "end_line": 192,
    "code": "ol\t\t\t\t\t// O - `true` on success, `false` on error\nlprintBrother(\n    pappl_system_t         *system,\t// I - System\n    const char             *driver_name,// I - Driver name\n    const char             *device_uri,\t// I - Device URI\n    const char             *device_id,\t// I - 1284 device ID\n    pappl_pr_driver_data_t *data,\t// I - Pointer to driver data\n    ipp_t                  **attrs,\t// O - Pointer to driver attributes\n    void                   *cbdata)\t// I - Callback data (not used)\n{\n  // Print callbacks...\n  data->printfile_cb  = lprint_brother_printfile;\n  data->rendjob_cb    = lprint_brother_rendjob;\n  data->rendpage_cb   = lprint_brother_rendpage;\n  data->rstartjob_cb  = lprint_brother_rstartjob;\n  data->rstartpage_cb = lprint_brother_rstartpage;\n  data->rwriteline_cb = lprint_brother_rwriteline;\n  data->status_cb     = lprint_brother_status;\n\n  // Vendor-specific format...\n  data->format = LPRINT_BROTHER_PT_CBP_MIMETYPE;\n\n  if (!strncmp(driver_name, \"brother_ql-\", 11))\n  {\n    // QL-series...\n\n    // Set resolution...\n    // TODO: Add support for 300x600dpi mode for QL-570/580N/700/8xx\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 300;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_ql_media) / sizeof(lprint_brother_ql_media[0]));\n    memcpy(data->media, lprint_brother_ql_media, sizeof(lprint_brother_ql_media));\n\n    papplCopyString(data->media_ready[0].size_name, \"roll_dk2205-continuous_2.4x3.9in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"labels\";\n    data->type[1]  = \"continuous\";\n  }\n  else\n  {\n    // PT-series...\n\n    // Set resolution...\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 180;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_pt_media) / sizeof(lprint_brother_pt_media[0]));\n    memcpy(data->media, lprint_brother_pt_media, sizeof(lprint_brother_pt_media));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"continuous\";\n    data->type[1]  = \"continuous-film\";\n    data->type[2]  = \"continuous-removable\";\n  }\n\n  data->num_source = 1;\n  data->source[0]  = \"main-roll\";\n\n  // 5 darkness/density settings\n  data->darkness_configured = 50;\n  data->darkness_supported  = 5;\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 108,
    "end_line": 192,
    "code": "ol\t\t\t\t\t// O - `true` on success, `false` on error\nlprintBrother(\n    pappl_system_t         *system,\t// I - System\n    const char             *driver_name,// I - Driver name\n    const char             *device_uri,\t// I - Device URI\n    const char             *device_id,\t// I - 1284 device ID\n    pappl_pr_driver_data_t *data,\t// I - Pointer to driver data\n    ipp_t                  **attrs,\t// O - Pointer to driver attributes\n    void                   *cbdata)\t// I - Callback data (not used)\n{\n  // Print callbacks...\n  data->printfile_cb  = lprint_brother_printfile;\n  data->rendjob_cb    = lprint_brother_rendjob;\n  data->rendpage_cb   = lprint_brother_rendpage;\n  data->rstartjob_cb  = lprint_brother_rstartjob;\n  data->rstartpage_cb = lprint_brother_rstartpage;\n  data->rwriteline_cb = lprint_brother_rwriteline;\n  data->status_cb     = lprint_brother_status;\n\n  // Vendor-specific format...\n  data->format = LPRINT_BROTHER_PT_CBP_MIMETYPE;\n\n  if (!strncmp(driver_name, \"brother_ql-\", 11))\n  {\n    // QL-series...\n\n    // Set resolution...\n    // TODO: Add support for 300x600dpi mode for QL-570/580N/700/8xx\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 300;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_ql_media) / sizeof(lprint_brother_ql_media[0]));\n    memcpy(data->media, lprint_brother_ql_media, sizeof(lprint_brother_ql_media));\n\n    papplCopyString(data->media_ready[0].size_name, \"roll_dk2205-continuous_2.4x3.9in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"labels\";\n    data->type[1]  = \"continuous\";\n  }\n  else\n  {\n    // PT-series...\n\n    // Set resolution...\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 180;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_pt_media) / sizeof(lprint_brother_pt_media[0]));\n    memcpy(data->media, lprint_brother_pt_media, sizeof(lprint_brother_pt_media));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"continuous\";\n    data->type[1]  = \"continuous-film\";\n    data->type[2]  = \"continuous-removable\";\n  }\n\n  data->num_source = 1;\n  data->source[0]  = \"main-roll\";\n\n  // 5 darkness/density settings\n  data->darkness_configured = 50;\n  data->darkness_supported  = 5;\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 117,
    "end_line": 192,
    "code": "  // Print callbacks...\n  data->printfile_cb  = lprint_brother_printfile;\n  data->rendjob_cb    = lprint_brother_rendjob;\n  data->rendpage_cb   = lprint_brother_rendpage;\n  data->rstartjob_cb  = lprint_brother_rstartjob;\n  data->rstartpage_cb = lprint_brother_rstartpage;\n  data->rwriteline_cb = lprint_brother_rwriteline;\n  data->status_cb     = lprint_brother_status;\n\n  // Vendor-specific format...\n  data->format = LPRINT_BROTHER_PT_CBP_MIMETYPE;\n\n  if (!strncmp(driver_name, \"brother_ql-\", 11))\n  {\n    // QL-series...\n\n    // Set resolution...\n    // TODO: Add support for 300x600dpi mode for QL-570/580N/700/8xx\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 300;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_ql_media) / sizeof(lprint_brother_ql_media[0]));\n    memcpy(data->media, lprint_brother_ql_media, sizeof(lprint_brother_ql_media));\n\n    papplCopyString(data->media_ready[0].size_name, \"roll_dk2205-continuous_2.4x3.9in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"labels\";\n    data->type[1]  = \"continuous\";\n  }\n  else\n  {\n    // PT-series...\n\n    // Set resolution...\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 180;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_pt_media) / sizeof(lprint_brother_pt_media[0]));\n    memcpy(data->media, lprint_brother_pt_media, sizeof(lprint_brother_pt_media));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"continuous\";\n    data->type[1]  = \"continuous-film\";\n    data->type[2]  = \"continuous-removable\";\n  }\n\n  data->num_source = 1;\n  data->source[0]  = \"main-roll\";\n\n  // 5 darkness/density settings\n  data->darkness_configured = 50;\n  data->darkness_supported  = 5;\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 117,
    "end_line": 192,
    "code": "  // Print callbacks...\n  data->printfile_cb  = lprint_brother_printfile;\n  data->rendjob_cb    = lprint_brother_rendjob;\n  data->rendpage_cb   = lprint_brother_rendpage;\n  data->rstartjob_cb  = lprint_brother_rstartjob;\n  data->rstartpage_cb = lprint_brother_rstartpage;\n  data->rwriteline_cb = lprint_brother_rwriteline;\n  data->status_cb     = lprint_brother_status;\n\n  // Vendor-specific format...\n  data->format = LPRINT_BROTHER_PT_CBP_MIMETYPE;\n\n  if (!strncmp(driver_name, \"brother_ql-\", 11))\n  {\n    // QL-series...\n\n    // Set resolution...\n    // TODO: Add support for 300x600dpi mode for QL-570/580N/700/8xx\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 300;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_ql_media) / sizeof(lprint_brother_ql_media[0]));\n    memcpy(data->media, lprint_brother_ql_media, sizeof(lprint_brother_ql_media));\n\n    papplCopyString(data->media_ready[0].size_name, \"roll_dk2205-continuous_2.4x3.9in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"labels\";\n    data->type[1]  = \"continuous\";\n  }\n  else\n  {\n    // PT-series...\n\n    // Set resolution...\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 180;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_pt_media) / sizeof(lprint_brother_pt_media[0]));\n    memcpy(data->media, lprint_brother_pt_media, sizeof(lprint_brother_pt_media));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"continuous\";\n    data->type[1]  = \"continuous-film\";\n    data->type[2]  = \"continuous-removable\";\n  }\n\n  data->num_source = 1;\n  data->source[0]  = \"main-roll\";\n\n  // 5 darkness/density settings\n  data->darkness_configured = 50;\n  data->darkness_supported  = 5;\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 119,
    "end_line": 119,
    "code": "ta->printfile_cb  = lprint_brother_printfile;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 119,
    "end_line": 119,
    "code": "ta->printfile_cb  = lprint_brother_printfile;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 120,
    "end_line": 120,
    "code": "ta->rendjob_cb    = lprint_brother_rendjob;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 120,
    "end_line": 120,
    "code": "ta->rendjob_cb    = lprint_brother_rendjob;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 121,
    "end_line": 121,
    "code": "ta->rendpage_cb   = lprint_brother_rendpage;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 121,
    "end_line": 121,
    "code": "ta->rendpage_cb   = lprint_brother_rendpage;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 122,
    "end_line": 122,
    "code": "ta->rstartjob_cb  = lprint_brother_rstartjob;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 122,
    "end_line": 122,
    "code": "ta->rstartjob_cb  = lprint_brother_rstartjob;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 123,
    "end_line": 123,
    "code": "ta->rstartpage_cb = lprint_brother_rstartpage;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 123,
    "end_line": 123,
    "code": "ta->rstartpage_cb = lprint_brother_rstartpage;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 124,
    "end_line": 124,
    "code": "ta->rwriteline_cb = lprint_brother_rwriteline;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 124,
    "end_line": 124,
    "code": "ta->rwriteline_cb = lprint_brother_rwriteline;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 125,
    "end_line": 125,
    "code": "ta->status_cb     = lprint_brother_status;\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 125,
    "end_line": 125,
    "code": "ta->status_cb     = lprint_brother_status;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 128,
    "end_line": 128,
    "code": "ta->format = LPRINT_BROTHER_PT_CBP_MIMETYPE;\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 128,
    "end_line": 128,
    "code": "ta->format = LPRINT_BROTHER_PT_CBP_MIMETYPE;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 130,
    "end_line": 182,
    "code": " (!strncmp(driver_name, \"brother_ql-\", 11))\n  {\n    // QL-series...\n\n    // Set resolution...\n    // TODO: Add support for 300x600dpi mode for QL-570/580N/700/8xx\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 300;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_ql_media) / sizeof(lprint_brother_ql_media[0]));\n    memcpy(data->media, lprint_brother_ql_media, sizeof(lprint_brother_ql_media));\n\n    papplCopyString(data->media_ready[0].size_name, \"roll_dk2205-continuous_2.4x3.9in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"labels\";\n    data->type[1]  = \"continuous\";\n  }\n  else\n  {\n    // PT-series...\n\n    // Set resolution...\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 180;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_pt_media) / sizeof(lprint_brother_pt_media[0]));\n    memcpy(data->media, lprint_brother_pt_media, sizeof(lprint_brother_pt_media));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"continuous\";\n    data->type[1]  = \"continuous-film\";\n    data->type[2]  = \"continuous-removable\";\n  }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 130,
    "end_line": 182,
    "code": " (!strncmp(driver_name, \"brother_ql-\", 11))\n  {\n    // QL-series...\n\n    // Set resolution...\n    // TODO: Add support for 300x600dpi mode for QL-570/580N/700/8xx\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 300;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_ql_media) / sizeof(lprint_brother_ql_media[0]));\n    memcpy(data->media, lprint_brother_ql_media, sizeof(lprint_brother_ql_media));\n\n    papplCopyString(data->media_ready[0].size_name, \"roll_dk2205-continuous_2.4x3.9in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"labels\";\n    data->type[1]  = \"continuous\";\n  }\n  else\n  {\n    // PT-series...\n\n    // Set resolution...\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 180;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_pt_media) / sizeof(lprint_brother_pt_media[0]));\n    memcpy(data->media, lprint_brother_pt_media, sizeof(lprint_brother_pt_media));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"continuous\";\n    data->type[1]  = \"continuous-film\";\n    data->type[2]  = \"continuous-removable\";\n  }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 131,
    "end_line": 154,
    "code": "    // QL-series...\n\n    // Set resolution...\n    // TODO: Add support for 300x600dpi mode for QL-570/580N/700/8xx\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 300;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_ql_media) / sizeof(lprint_brother_ql_media[0]));\n    memcpy(data->media, lprint_brother_ql_media, sizeof(lprint_brother_ql_media));\n\n    papplCopyString(data->media_ready[0].size_name, \"roll_dk2205-continuous_2.4x3.9in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"labels\";\n    data->type[1]  = \"continuous\";\n  }\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 131,
    "end_line": 154,
    "code": "    // QL-series...\n\n    // Set resolution...\n    // TODO: Add support for 300x600dpi mode for QL-570/580N/700/8xx\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 300;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_ql_media) / sizeof(lprint_brother_ql_media[0]));\n    memcpy(data->media, lprint_brother_ql_media, sizeof(lprint_brother_ql_media));\n\n    papplCopyString(data->media_ready[0].size_name, \"roll_dk2205-continuous_2.4x3.9in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"labels\";\n    data->type[1]  = \"continuous\";\n  }\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 136,
    "end_line": 136,
    "code": "ta->num_resolution  = 1;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 136,
    "end_line": 136,
    "code": "ta->num_resolution  = 1;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 137,
    "end_line": 137,
    "code": "ta->x_resolution[0] = data->y_resolution[0] = 300;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 137,
    "end_line": 137,
    "code": "ta->x_resolution[0] = data->y_resolution[0] = 300;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 137,
    "end_line": 137,
    "code": "ta->y_resolution[0] = 300;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 138,
    "end_line": 138,
    "code": "ta->x_default       = data->y_default = data->x_resolution[0];\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 138,
    "end_line": 138,
    "code": "ta->x_default       = data->y_default = data->x_resolution[0];\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 138,
    "end_line": 138,
    "code": "ta->y_default = data->x_resolution[0];\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 141,
    "end_line": 141,
    "code": "ta->left_right = 1;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 141,
    "end_line": 141,
    "code": "ta->left_right = 1;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 142,
    "end_line": 142,
    "code": "ta->bottom_top = 1;\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 142,
    "end_line": 142,
    "code": "ta->bottom_top = 1;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 145,
    "end_line": 145,
    "code": "ta->num_media = (int)(sizeof(lprint_brother_ql_media) / sizeof(lprint_brother_ql_media[0]));\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 145,
    "end_line": 145,
    "code": "ta->num_media = (int)(sizeof(lprint_brother_ql_media) / sizeof(lprint_brother_ql_media[0]));\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 145,
    "end_line": 145,
    "code": "ta->num_media = (int)(sizeof(lprint_brother_ql_media) / sizeof(lprint_brother_ql_media[0]));\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 145,
    "end_line": 145,
    "code": "ta->num_media = (int)(sizeof(lprint_brother_ql_media) / sizeof(lprint_brother_ql_media[0]));\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 151,
    "end_line": 151,
    "code": "ta->num_type = 2;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 151,
    "end_line": 151,
    "code": "ta->num_type = 2;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 152,
    "end_line": 152,
    "code": "ta->type[0]  = \"labels\";\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 152,
    "end_line": 152,
    "code": "ta->type[0]  = \"labels\";\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 153,
    "end_line": 153,
    "code": "ta->type[1]  = \"continuous\";\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 153,
    "end_line": 153,
    "code": "ta->type[1]  = \"continuous\";\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 155,
    "end_line": 182,
    "code": "se\n  {\n    // PT-series...\n\n    // Set resolution...\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 180;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_pt_media) / sizeof(lprint_brother_pt_media[0]));\n    memcpy(data->media, lprint_brother_pt_media, sizeof(lprint_brother_pt_media));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"continuous\";\n    data->type[1]  = \"continuous-film\";\n    data->type[2]  = \"continuous-removable\";\n  }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 155,
    "end_line": 182,
    "code": "se\n  {\n    // PT-series...\n\n    // Set resolution...\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 180;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_pt_media) / sizeof(lprint_brother_pt_media[0]));\n    memcpy(data->media, lprint_brother_pt_media, sizeof(lprint_brother_pt_media));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"continuous\";\n    data->type[1]  = \"continuous-film\";\n    data->type[2]  = \"continuous-removable\";\n  }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 156,
    "end_line": 182,
    "code": "    // PT-series...\n\n    // Set resolution...\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 180;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_pt_media) / sizeof(lprint_brother_pt_media[0]));\n    memcpy(data->media, lprint_brother_pt_media, sizeof(lprint_brother_pt_media));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"continuous\";\n    data->type[1]  = \"continuous-film\";\n    data->type[2]  = \"continuous-removable\";\n  }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 156,
    "end_line": 182,
    "code": "    // PT-series...\n\n    // Set resolution...\n    data->num_resolution  = 1;\n    data->x_resolution[0] = data->y_resolution[0] = 180;\n    data->x_default       = data->y_default = data->x_resolution[0];\n\n    // Basically borderless...\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    // Supported media...\n    data->num_media = (int)(sizeof(lprint_brother_pt_media) / sizeof(lprint_brother_pt_media[0]));\n    memcpy(data->media, lprint_brother_pt_media, sizeof(lprint_brother_pt_media));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n    papplCopyString(data->media_ready[0].type, \"continuous\", sizeof(data->media_ready[0].type));\n\n    data->num_type = 2;\n    data->type[0]  = \"continuous\";\n    data->type[1]  = \"continuous-film\";\n    data->type[2]  = \"continuous-removable\";\n  }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 160,
    "end_line": 160,
    "code": "ta->num_resolution  = 1;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 160,
    "end_line": 160,
    "code": "ta->num_resolution  = 1;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 161,
    "end_line": 161,
    "code": "ta->x_resolution[0] = data->y_resolution[0] = 180;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 161,
    "end_line": 161,
    "code": "ta->x_resolution[0] = data->y_resolution[0] = 180;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 161,
    "end_line": 161,
    "code": "ta->y_resolution[0] = 180;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 162,
    "end_line": 162,
    "code": "ta->x_default       = data->y_default = data->x_resolution[0];\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 162,
    "end_line": 162,
    "code": "ta->x_default       = data->y_default = data->x_resolution[0];\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 162,
    "end_line": 162,
    "code": "ta->y_default = data->x_resolution[0];\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 165,
    "end_line": 165,
    "code": "ta->left_right = 1;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 165,
    "end_line": 165,
    "code": "ta->left_right = 1;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 166,
    "end_line": 166,
    "code": "ta->bottom_top = 1;\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 166,
    "end_line": 166,
    "code": "ta->bottom_top = 1;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 169,
    "end_line": 169,
    "code": "ta->num_media = (int)(sizeof(lprint_brother_pt_media) / sizeof(lprint_brother_pt_media[0]));\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 169,
    "end_line": 169,
    "code": "ta->num_media = (int)(sizeof(lprint_brother_pt_media) / sizeof(lprint_brother_pt_media[0]));\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 169,
    "end_line": 169,
    "code": "ta->num_media = (int)(sizeof(lprint_brother_pt_media) / sizeof(lprint_brother_pt_media[0]));\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 169,
    "end_line": 169,
    "code": "ta->num_media = (int)(sizeof(lprint_brother_pt_media) / sizeof(lprint_brother_pt_media[0]));\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 172,
    "end_line": 172,
    "code": "ta->num_source = 1;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 172,
    "end_line": 172,
    "code": "ta->num_source = 1;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 173,
    "end_line": 173,
    "code": "ta->source[0]  = \"main-roll\";\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 173,
    "end_line": 173,
    "code": "ta->source[0]  = \"main-roll\";\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 178,
    "end_line": 178,
    "code": "ta->num_type = 2;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 178,
    "end_line": 178,
    "code": "ta->num_type = 2;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 179,
    "end_line": 179,
    "code": "ta->type[0]  = \"continuous\";\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 179,
    "end_line": 179,
    "code": "ta->type[0]  = \"continuous\";\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 180,
    "end_line": 180,
    "code": "ta->type[1]  = \"continuous-film\";\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 180,
    "end_line": 180,
    "code": "ta->type[1]  = \"continuous-film\";\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 181,
    "end_line": 181,
    "code": "ta->type[2]  = \"continuous-removable\";\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 181,
    "end_line": 181,
    "code": "ta->type[2]  = \"continuous-removable\";\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 184,
    "end_line": 184,
    "code": "ta->num_source = 1;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 184,
    "end_line": 184,
    "code": "ta->num_source = 1;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 185,
    "end_line": 185,
    "code": "ta->source[0]  = \"main-roll\";\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 185,
    "end_line": 185,
    "code": "ta->source[0]  = \"main-roll\";\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 188,
    "end_line": 188,
    "code": "ta->darkness_configured = 50;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 188,
    "end_line": 188,
    "code": "ta->darkness_configured = 50;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 189,
    "end_line": 189,
    "code": "ta->darkness_supported  = 5;\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 189,
    "end_line": 189,
    "code": "ta->darkness_supported  = 5;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function",
    "start_line": 199,
    "end_line": 266,
    "name": "lprint_brother_get_status",
    "parent": null,
    "hierarchy": "lprint_brother_get_status",
    "code": "atic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_get_status(\n    pappl_printer_t *printer,\t\t// I - Printer\n    pappl_device_t  *device)\t\t// I - Device\n{\n  unsigned char\t\tbuffer[32];\t// Status buffer\n  pappl_preason_t\tpreasons;\t// \"printer-state-reasons\" values\n  const char\t\t*media;\t\t// \"media-ready\" value\n\n\n  // Request status...\n  if (!papplDevicePuts(device, \"\\033iS\"))\n    return (false);\n\n  // Read status buffer...\n  if (papplDeviceRead(device, buffer, sizeof(buffer)) < (ssize_t)sizeof(buffer))\n    return (false);\n\n  LPRINT_DEBUG(\"lprint_brother_get_status: Print Head Mark = %02x\\n\", buffer[0]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Size = %02x\\n\", buffer[1]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[2]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Series Code = %02x\\n\", buffer[3]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Model Code = %02x %02x\\n\", buffer[4], buffer[5]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[6]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[7]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Error Info 1 = %02x\\n\", buffer[8]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Error Info 2 = %02x\\n\", buffer[9]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Width = %02x\\n\", buffer[10]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Type = %02x\\n\", buffer[11]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[12]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[13]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[14]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Mode = %02x\\n\", buffer[15]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[16]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Length = %02x\\n\", buffer[17]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Status Type = %02x\\n\", buffer[18]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Phase Type = %02x\\n\", buffer[19]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Phase Number = %02x %02x\\n\", buffer[20], buffer[21]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Notification # = %02x\\n\", buffer[22]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[23]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Tape Color = %02x\\n\", buffer[24]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Text Color = %02x\\n\", buffer[25]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Hardware Info = %02x %02x %02x %02x\\n\", buffer[26], buffer[27], buffer[28], buffer[29]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x %02x\\n\", buffer[30], buffer[31]);\n\n  // Match ready media...\n  if ((media = lprintMediaMatch(printer, 0, 100 * buffer[10], 100 * buffer[17])) != NULL)\n    papplLogPrinter(printer, PAPPL_LOGLEVEL_DEBUG, \"Detected media is '%s'.\", media);\n\n  // Convert error info to \"printer-state-reasons\" bits...\n  preasons = PAPPL_PREASON_NONE;\n  if (buffer[8] & 0x03)\n    preasons |= PAPPL_PREASON_MEDIA_EMPTY;\n  if (buffer[8] & 0xfc)\n    preasons |= PAPPL_PREASON_OTHER;\n  if (buffer[9] & 0x01)\n    preasons |= PAPPL_PREASON_MEDIA_NEEDED;\n  if (buffer[9] & 0x10)\n    preasons |= PAPPL_PREASON_COVER_OPEN;\n  if (buffer[9] & 0x40)\n    preasons |= PAPPL_PREASON_MEDIA_JAM;\n  if (buffer[9] & 0xae)\n    preasons |= PAPPL_PREASON_OTHER;\n\n  papplPrinterSetReasons(printer, preasons, ~preasons);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 199,
    "end_line": 266,
    "code": "atic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_get_status(\n    pappl_printer_t *printer,\t\t// I - Printer\n    pappl_device_t  *device)\t\t// I - Device\n{\n  unsigned char\t\tbuffer[32];\t// Status buffer\n  pappl_preason_t\tpreasons;\t// \"printer-state-reasons\" values\n  const char\t\t*media;\t\t// \"media-ready\" value\n\n\n  // Request status...\n  if (!papplDevicePuts(device, \"\\033iS\"))\n    return (false);\n\n  // Read status buffer...\n  if (papplDeviceRead(device, buffer, sizeof(buffer)) < (ssize_t)sizeof(buffer))\n    return (false);\n\n  LPRINT_DEBUG(\"lprint_brother_get_status: Print Head Mark = %02x\\n\", buffer[0]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Size = %02x\\n\", buffer[1]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[2]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Series Code = %02x\\n\", buffer[3]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Model Code = %02x %02x\\n\", buffer[4], buffer[5]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[6]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[7]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Error Info 1 = %02x\\n\", buffer[8]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Error Info 2 = %02x\\n\", buffer[9]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Width = %02x\\n\", buffer[10]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Type = %02x\\n\", buffer[11]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[12]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[13]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[14]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Mode = %02x\\n\", buffer[15]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[16]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Length = %02x\\n\", buffer[17]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Status Type = %02x\\n\", buffer[18]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Phase Type = %02x\\n\", buffer[19]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Phase Number = %02x %02x\\n\", buffer[20], buffer[21]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Notification # = %02x\\n\", buffer[22]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[23]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Tape Color = %02x\\n\", buffer[24]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Text Color = %02x\\n\", buffer[25]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Hardware Info = %02x %02x %02x %02x\\n\", buffer[26], buffer[27], buffer[28], buffer[29]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x %02x\\n\", buffer[30], buffer[31]);\n\n  // Match ready media...\n  if ((media = lprintMediaMatch(printer, 0, 100 * buffer[10], 100 * buffer[17])) != NULL)\n    papplLogPrinter(printer, PAPPL_LOGLEVEL_DEBUG, \"Detected media is '%s'.\", media);\n\n  // Convert error info to \"printer-state-reasons\" bits...\n  preasons = PAPPL_PREASON_NONE;\n  if (buffer[8] & 0x03)\n    preasons |= PAPPL_PREASON_MEDIA_EMPTY;\n  if (buffer[8] & 0xfc)\n    preasons |= PAPPL_PREASON_OTHER;\n  if (buffer[9] & 0x01)\n    preasons |= PAPPL_PREASON_MEDIA_NEEDED;\n  if (buffer[9] & 0x10)\n    preasons |= PAPPL_PREASON_COVER_OPEN;\n  if (buffer[9] & 0x40)\n    preasons |= PAPPL_PREASON_MEDIA_JAM;\n  if (buffer[9] & 0xae)\n    preasons |= PAPPL_PREASON_OTHER;\n\n  papplPrinterSetReasons(printer, preasons, ~preasons);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 203,
    "end_line": 266,
    "code": "  unsigned char\t\tbuffer[32];\t// Status buffer\n  pappl_preason_t\tpreasons;\t// \"printer-state-reasons\" values\n  const char\t\t*media;\t\t// \"media-ready\" value\n\n\n  // Request status...\n  if (!papplDevicePuts(device, \"\\033iS\"))\n    return (false);\n\n  // Read status buffer...\n  if (papplDeviceRead(device, buffer, sizeof(buffer)) < (ssize_t)sizeof(buffer))\n    return (false);\n\n  LPRINT_DEBUG(\"lprint_brother_get_status: Print Head Mark = %02x\\n\", buffer[0]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Size = %02x\\n\", buffer[1]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[2]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Series Code = %02x\\n\", buffer[3]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Model Code = %02x %02x\\n\", buffer[4], buffer[5]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[6]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[7]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Error Info 1 = %02x\\n\", buffer[8]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Error Info 2 = %02x\\n\", buffer[9]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Width = %02x\\n\", buffer[10]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Type = %02x\\n\", buffer[11]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[12]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[13]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[14]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Mode = %02x\\n\", buffer[15]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[16]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Media Length = %02x\\n\", buffer[17]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Status Type = %02x\\n\", buffer[18]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Phase Type = %02x\\n\", buffer[19]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Phase Number = %02x %02x\\n\", buffer[20], buffer[21]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Notification # = %02x\\n\", buffer[22]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x\\n\", buffer[23]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Tape Color = %02x\\n\", buffer[24]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Text Color = %02x\\n\", buffer[25]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Hardware Info = %02x %02x %02x %02x\\n\", buffer[26], buffer[27], buffer[28], buffer[29]);\n  LPRINT_DEBUG(\"lprint_brother_get_status: Reserved = %02x %02x\\n\", buffer[30], buffer[31]);\n\n  // Match ready media...\n  if ((media = lprintMediaMatch(printer, 0, 100 * buffer[10], 100 * buffer[17])) != NULL)\n    papplLogPrinter(printer, PAPPL_LOGLEVEL_DEBUG, \"Detected media is '%s'.\", media);\n\n  // Convert error info to \"printer-state-reasons\" bits...\n  preasons = PAPPL_PREASON_NONE;\n  if (buffer[8] & 0x03)\n    preasons |= PAPPL_PREASON_MEDIA_EMPTY;\n  if (buffer[8] & 0xfc)\n    preasons |= PAPPL_PREASON_OTHER;\n  if (buffer[9] & 0x01)\n    preasons |= PAPPL_PREASON_MEDIA_NEEDED;\n  if (buffer[9] & 0x10)\n    preasons |= PAPPL_PREASON_COVER_OPEN;\n  if (buffer[9] & 0x40)\n    preasons |= PAPPL_PREASON_MEDIA_JAM;\n  if (buffer[9] & 0xae)\n    preasons |= PAPPL_PREASON_OTHER;\n\n  papplPrinterSetReasons(printer, preasons, ~preasons);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 245,
    "end_line": 246,
    "code": " ((media = lprintMediaMatch(printer, 0, 100 * buffer[10], 100 * buffer[17])) != NULL)\n    papplLogPrinter(printer, PAPPL_LOGLEVEL_DEBUG, \"Detected media is '%s'.\", media);\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function",
    "start_line": 273,
    "end_line": 313,
    "name": "lprint_brother_printfile",
    "parent": null,
    "hierarchy": "lprint_brother_printfile",
    "code": "atic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_printfile(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  int\t\tfd;\t\t\t// Input file\n  ssize_t\tbytes;\t\t\t// Bytes read/written\n  char\t\tbuffer[65536];\t\t// Read/write buffer\n//  lprint_brother_t\tbrother;\t\t\t// Driver data\n\n\n  // Reset the printer...\n  lprint_brother_rstartjob(job, options, device);\n\n  // Copy the raw file...\n  papplJobSetImpressions(job, 1);\n\n  if ((fd  = open(papplJobGetFilename(job), O_RDONLY)) < 0)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to open print file '%s': %s\", papplJobGetFilename(job), strerror(errno));\n    return (false);\n  }\n\n  while ((bytes = read(fd, buffer, sizeof(buffer))) > 0)\n  {\n    if (papplDeviceWrite(device, buffer, (size_t)bytes) < 0)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to send %d bytes to printer.\", (int)bytes);\n      close(fd);\n      return (false);\n    }\n  }\n  close(fd);\n\n  lprint_brother_rstartjob(job, options, device);\n\n  papplJobSetImpressionsCompleted(job, 1);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 273,
    "end_line": 313,
    "code": "atic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_printfile(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  int\t\tfd;\t\t\t// Input file\n  ssize_t\tbytes;\t\t\t// Bytes read/written\n  char\t\tbuffer[65536];\t\t// Read/write buffer\n//  lprint_brother_t\tbrother;\t\t\t// Driver data\n\n\n  // Reset the printer...\n  lprint_brother_rstartjob(job, options, device);\n\n  // Copy the raw file...\n  papplJobSetImpressions(job, 1);\n\n  if ((fd  = open(papplJobGetFilename(job), O_RDONLY)) < 0)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to open print file '%s': %s\", papplJobGetFilename(job), strerror(errno));\n    return (false);\n  }\n\n  while ((bytes = read(fd, buffer, sizeof(buffer))) > 0)\n  {\n    if (papplDeviceWrite(device, buffer, (size_t)bytes) < 0)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to send %d bytes to printer.\", (int)bytes);\n      close(fd);\n      return (false);\n    }\n  }\n  close(fd);\n\n  lprint_brother_rstartjob(job, options, device);\n\n  papplJobSetImpressionsCompleted(job, 1);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 278,
    "end_line": 313,
    "code": "  int\t\tfd;\t\t\t// Input file\n  ssize_t\tbytes;\t\t\t// Bytes read/written\n  char\t\tbuffer[65536];\t\t// Read/write buffer\n//  lprint_brother_t\tbrother;\t\t\t// Driver data\n\n\n  // Reset the printer...\n  lprint_brother_rstartjob(job, options, device);\n\n  // Copy the raw file...\n  papplJobSetImpressions(job, 1);\n\n  if ((fd  = open(papplJobGetFilename(job), O_RDONLY)) < 0)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to open print file '%s': %s\", papplJobGetFilename(job), strerror(errno));\n    return (false);\n  }\n\n  while ((bytes = read(fd, buffer, sizeof(buffer))) > 0)\n  {\n    if (papplDeviceWrite(device, buffer, (size_t)bytes) < 0)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to send %d bytes to printer.\", (int)bytes);\n      close(fd);\n      return (false);\n    }\n  }\n  close(fd);\n\n  lprint_brother_rstartjob(job, options, device);\n\n  papplJobSetImpressionsCompleted(job, 1);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 297,
    "end_line": 305,
    "code": "ile ((bytes = read(fd, buffer, sizeof(buffer))) > 0)\n  {\n    if (papplDeviceWrite(device, buffer, (size_t)bytes) < 0)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to send %d bytes to printer.\", (int)bytes);\n      close(fd);\n      return (false);\n    }\n  }\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "anonymous_initializer_block",
    "start_line": 298,
    "end_line": 305,
    "code": "    if (papplDeviceWrite(device, buffer, (size_t)bytes) < 0)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to send %d bytes to printer.\", (int)bytes);\n      close(fd);\n      return (false);\n    }\n  }\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "anonymous_initializer_block",
    "start_line": 299,
    "end_line": 304,
    "code": " (papplDeviceWrite(device, buffer, (size_t)bytes) < 0)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to send %d bytes to printer.\", (int)bytes);\n      close(fd);\n      return (false);\n    }\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function",
    "start_line": 320,
    "end_line": 338,
    "name": "lprint_brother_rendjob",
    "parent": null,
    "hierarchy": "lprint_brother_rendjob",
    "code": "atic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rendjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_brother_t\t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n\n  (void)options;\n\n  papplDevicePuts(device, \"\\032\");\t// Eject the last page\n\n  free(brother->buffer);\n  free(brother);\n  papplJobSetData(job, NULL);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 320,
    "end_line": 338,
    "code": "atic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rendjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_brother_t\t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n\n  (void)options;\n\n  papplDevicePuts(device, \"\\032\");\t// Eject the last page\n\n  free(brother->buffer);\n  free(brother);\n  papplJobSetData(job, NULL);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 320,
    "end_line": 338,
    "code": "atic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rendjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_brother_t\t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n\n  (void)options;\n\n  papplDevicePuts(device, \"\\032\");\t// Eject the last page\n\n  free(brother->buffer);\n  free(brother);\n  papplJobSetData(job, NULL);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 325,
    "end_line": 338,
    "code": "  lprint_brother_t\t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n\n  (void)options;\n\n  papplDevicePuts(device, \"\\032\");\t// Eject the last page\n\n  free(brother->buffer);\n  free(brother);\n  papplJobSetData(job, NULL);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 325,
    "end_line": 338,
    "code": "  lprint_brother_t\t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n\n  (void)options;\n\n  papplDevicePuts(device, \"\\032\");\t// Eject the last page\n\n  free(brother->buffer);\n  free(brother);\n  papplJobSetData(job, NULL);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "global_variable",
    "start_line": 326,
    "end_line": 326,
    "code": "rint_brother_t\t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function",
    "start_line": 345,
    "end_line": 397,
    "name": "lprint_brother_rendpage",
    "parent": null,
    "hierarchy": "lprint_brother_rendpage",
    "code": "atic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rendpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n  unsigned char\tbuffer[13];\t\t// Print Information command buffer\n\n\n  // Write last line\n  lprint_brother_rwriteline(job, options, device, options->header.cupsHeight, NULL);\n\n  // Send print information...\n  buffer[ 0] = 0x1b;\n  buffer[ 1] = 'i';\n  buffer[ 2] = 'z';\n  buffer[ 3] = !strncmp(options->media.type, \"continuous\", 10) ? 0x04 : 0x0c;\n  buffer[ 4] = 0;\n  buffer[ 5] = options->media.size_width / 100;\n  buffer[ 6] = options->media.size_length / 100;\n#if 1\n  buffer[ 7] = options->header.cupsHeight & 255;\n  buffer[ 8] = (options->header.cupsHeight >> 8) & 255;\n  buffer[ 9] = (options->header.cupsHeight >> 16) & 255;\n  buffer[10] = (options->header.cupsHeight >> 24) & 255;\n#else\n  buffer[ 7] = brother->count & 255;\n  buffer[ 8] = (brother->count >> 8) & 255;\n  buffer[ 9] = (brother->count >> 16) & 255;\n  buffer[10] = (brother->count >> 24) & 255;\n#endif // 1\n  buffer[11] = page == 0 ? 0 : 1;\n  buffer[12] = 0;\n\n  if (!papplDeviceWrite(device, buffer, sizeof(buffer)))\n    return (false);\n\n  // Send label data...\n  if (brother->num_bytes > 0 && !papplDeviceWrite(device, brother->buffer, brother->num_bytes))\n    return (false);\n\n  // Eject/cut\n  papplDevicePrintf(device, \"\\033iM%c\", !strncmp(options->media.type, \"continuous\", 10) ? 64 : 0);\n  papplDeviceFlush(device);\n\n  // Free memory and return...\n  lprintDitherFree(&brother->dither);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 345,
    "end_line": 397,
    "code": "atic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rendpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n  unsigned char\tbuffer[13];\t\t// Print Information command buffer\n\n\n  // Write last line\n  lprint_brother_rwriteline(job, options, device, options->header.cupsHeight, NULL);\n\n  // Send print information...\n  buffer[ 0] = 0x1b;\n  buffer[ 1] = 'i';\n  buffer[ 2] = 'z';\n  buffer[ 3] = !strncmp(options->media.type, \"continuous\", 10) ? 0x04 : 0x0c;\n  buffer[ 4] = 0;\n  buffer[ 5] = options->media.size_width / 100;\n  buffer[ 6] = options->media.size_length / 100;\n#if 1\n  buffer[ 7] = options->header.cupsHeight & 255;\n  buffer[ 8] = (options->header.cupsHeight >> 8) & 255;\n  buffer[ 9] = (options->header.cupsHeight >> 16) & 255;\n  buffer[10] = (options->header.cupsHeight >> 24) & 255;\n#else\n  buffer[ 7] = brother->count & 255;\n  buffer[ 8] = (brother->count >> 8) & 255;\n  buffer[ 9] = (brother->count >> 16) & 255;\n  buffer[10] = (brother->count >> 24) & 255;\n#endif // 1\n  buffer[11] = page == 0 ? 0 : 1;\n  buffer[12] = 0;\n\n  if (!papplDeviceWrite(device, buffer, sizeof(buffer)))\n    return (false);\n\n  // Send label data...\n  if (brother->num_bytes > 0 && !papplDeviceWrite(device, brother->buffer, brother->num_bytes))\n    return (false);\n\n  // Eject/cut\n  papplDevicePrintf(device, \"\\033iM%c\", !strncmp(options->media.type, \"continuous\", 10) ? 64 : 0);\n  papplDeviceFlush(device);\n\n  // Free memory and return...\n  lprintDitherFree(&brother->dither);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 345,
    "end_line": 397,
    "code": "atic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rendpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n  unsigned char\tbuffer[13];\t\t// Print Information command buffer\n\n\n  // Write last line\n  lprint_brother_rwriteline(job, options, device, options->header.cupsHeight, NULL);\n\n  // Send print information...\n  buffer[ 0] = 0x1b;\n  buffer[ 1] = 'i';\n  buffer[ 2] = 'z';\n  buffer[ 3] = !strncmp(options->media.type, \"continuous\", 10) ? 0x04 : 0x0c;\n  buffer[ 4] = 0;\n  buffer[ 5] = options->media.size_width / 100;\n  buffer[ 6] = options->media.size_length / 100;\n#if 1\n  buffer[ 7] = options->header.cupsHeight & 255;\n  buffer[ 8] = (options->header.cupsHeight >> 8) & 255;\n  buffer[ 9] = (options->header.cupsHeight >> 16) & 255;\n  buffer[10] = (options->header.cupsHeight >> 24) & 255;\n#else\n  buffer[ 7] = brother->count & 255;\n  buffer[ 8] = (brother->count >> 8) & 255;\n  buffer[ 9] = (brother->count >> 16) & 255;\n  buffer[10] = (brother->count >> 24) & 255;\n#endif // 1\n  buffer[11] = page == 0 ? 0 : 1;\n  buffer[12] = 0;\n\n  if (!papplDeviceWrite(device, buffer, sizeof(buffer)))\n    return (false);\n\n  // Send label data...\n  if (brother->num_bytes > 0 && !papplDeviceWrite(device, brother->buffer, brother->num_bytes))\n    return (false);\n\n  // Eject/cut\n  papplDevicePrintf(device, \"\\033iM%c\", !strncmp(options->media.type, \"continuous\", 10) ? 64 : 0);\n  papplDeviceFlush(device);\n\n  // Free memory and return...\n  lprintDitherFree(&brother->dither);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 351,
    "end_line": 397,
    "code": "  lprint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n  unsigned char\tbuffer[13];\t\t// Print Information command buffer\n\n\n  // Write last line\n  lprint_brother_rwriteline(job, options, device, options->header.cupsHeight, NULL);\n\n  // Send print information...\n  buffer[ 0] = 0x1b;\n  buffer[ 1] = 'i';\n  buffer[ 2] = 'z';\n  buffer[ 3] = !strncmp(options->media.type, \"continuous\", 10) ? 0x04 : 0x0c;\n  buffer[ 4] = 0;\n  buffer[ 5] = options->media.size_width / 100;\n  buffer[ 6] = options->media.size_length / 100;\n#if 1\n  buffer[ 7] = options->header.cupsHeight & 255;\n  buffer[ 8] = (options->header.cupsHeight >> 8) & 255;\n  buffer[ 9] = (options->header.cupsHeight >> 16) & 255;\n  buffer[10] = (options->header.cupsHeight >> 24) & 255;\n#else\n  buffer[ 7] = brother->count & 255;\n  buffer[ 8] = (brother->count >> 8) & 255;\n  buffer[ 9] = (brother->count >> 16) & 255;\n  buffer[10] = (brother->count >> 24) & 255;\n#endif // 1\n  buffer[11] = page == 0 ? 0 : 1;\n  buffer[12] = 0;\n\n  if (!papplDeviceWrite(device, buffer, sizeof(buffer)))\n    return (false);\n\n  // Send label data...\n  if (brother->num_bytes > 0 && !papplDeviceWrite(device, brother->buffer, brother->num_bytes))\n    return (false);\n\n  // Eject/cut\n  papplDevicePrintf(device, \"\\033iM%c\", !strncmp(options->media.type, \"continuous\", 10) ? 64 : 0);\n  papplDeviceFlush(device);\n\n  // Free memory and return...\n  lprintDitherFree(&brother->dither);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 351,
    "end_line": 397,
    "code": "  lprint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n  unsigned char\tbuffer[13];\t\t// Print Information command buffer\n\n\n  // Write last line\n  lprint_brother_rwriteline(job, options, device, options->header.cupsHeight, NULL);\n\n  // Send print information...\n  buffer[ 0] = 0x1b;\n  buffer[ 1] = 'i';\n  buffer[ 2] = 'z';\n  buffer[ 3] = !strncmp(options->media.type, \"continuous\", 10) ? 0x04 : 0x0c;\n  buffer[ 4] = 0;\n  buffer[ 5] = options->media.size_width / 100;\n  buffer[ 6] = options->media.size_length / 100;\n#if 1\n  buffer[ 7] = options->header.cupsHeight & 255;\n  buffer[ 8] = (options->header.cupsHeight >> 8) & 255;\n  buffer[ 9] = (options->header.cupsHeight >> 16) & 255;\n  buffer[10] = (options->header.cupsHeight >> 24) & 255;\n#else\n  buffer[ 7] = brother->count & 255;\n  buffer[ 8] = (brother->count >> 8) & 255;\n  buffer[ 9] = (brother->count >> 16) & 255;\n  buffer[10] = (brother->count >> 24) & 255;\n#endif // 1\n  buffer[11] = page == 0 ? 0 : 1;\n  buffer[12] = 0;\n\n  if (!papplDeviceWrite(device, buffer, sizeof(buffer)))\n    return (false);\n\n  // Send label data...\n  if (brother->num_bytes > 0 && !papplDeviceWrite(device, brother->buffer, brother->num_bytes))\n    return (false);\n\n  // Eject/cut\n  papplDevicePrintf(device, \"\\033iM%c\", !strncmp(options->media.type, \"continuous\", 10) ? 64 : 0);\n  papplDeviceFlush(device);\n\n  // Free memory and return...\n  lprintDitherFree(&brother->dither);\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "global_variable",
    "start_line": 352,
    "end_line": 352,
    "code": "rint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 364,
    "end_line": 364,
    "code": "ffer[ 3] = !strncmp(options->media.type, \"continuous\", 10) ? 0x04 : 0x0c;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 364,
    "end_line": 364,
    "code": "ffer[ 3] = !strncmp(options->media.type, \"continuous\", 10) ? 0x04 : 0x0c;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 364,
    "end_line": 364,
    "code": "ffer[ 3] = !strncmp(options->media.type, \"continuous\", 10) ? 0x04 : 0x0c;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 364,
    "end_line": 364,
    "code": "ffer[ 3] = !strncmp(options->media.type, \"continuous\", 10) ? 0x04 : 0x0c;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 366,
    "end_line": 366,
    "code": "ffer[ 5] = options->media.size_width / 100;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 366,
    "end_line": 366,
    "code": "ffer[ 5] = options->media.size_width / 100;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 367,
    "end_line": 367,
    "code": "ffer[ 6] = options->media.size_length / 100;\n#",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 367,
    "end_line": 367,
    "code": "ffer[ 6] = options->media.size_length / 100;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "preprocessor",
    "start_line": 368,
    "end_line": 378,
    "code": "f 1\n  buffer[ 7] = options->header.cupsHeight & 255;\n  buffer[ 8] = (options->header.cupsHeight >> 8) & 255;\n  buffer[ 9] = (options->header.cupsHeight >> 16) & 255;\n  buffer[10] = (options->header.cupsHeight >> 24) & 255;\n#else\n  buffer[ 7] = brother->count & 255;\n  buffer[ 8] = (brother->count >> 8) & 255;\n  buffer[ 9] = (brother->count >> 16) & 255;\n  buffer[10] = (brother->count >> 24) & 255;\n#endif /",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 368,
    "end_line": 378,
    "code": "f 1\n  buffer[ 7] = options->header.cupsHeight & 255;\n  buffer[ 8] = (options->header.cupsHeight >> 8) & 255;\n  buffer[ 9] = (options->header.cupsHeight >> 16) & 255;\n  buffer[10] = (options->header.cupsHeight >> 24) & 255;\n#else\n  buffer[ 7] = brother->count & 255;\n  buffer[ 8] = (brother->count >> 8) & 255;\n  buffer[ 9] = (brother->count >> 16) & 255;\n  buffer[10] = (brother->count >> 24) & 255;\n#endif /",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 368,
    "end_line": 378,
    "code": "f 1\n  buffer[ 7] = options->header.cupsHeight & 255;\n  buffer[ 8] = (options->header.cupsHeight >> 8) & 255;\n  buffer[ 9] = (options->header.cupsHeight >> 16) & 255;\n  buffer[10] = (options->header.cupsHeight >> 24) & 255;\n#else\n  buffer[ 7] = brother->count & 255;\n  buffer[ 8] = (brother->count >> 8) & 255;\n  buffer[ 9] = (brother->count >> 16) & 255;\n  buffer[10] = (brother->count >> 24) & 255;\n#endif /",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 369,
    "end_line": 369,
    "code": "ffer[ 7] = options->header.cupsHeight & 255;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 369,
    "end_line": 369,
    "code": "ffer[ 7] = options->header.cupsHeight & 255;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 370,
    "end_line": 370,
    "code": "ffer[ 8] = (options->header.cupsHeight >> 8) & 255;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 370,
    "end_line": 370,
    "code": "ffer[ 8] = (options->header.cupsHeight >> 8) & 255;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 370,
    "end_line": 370,
    "code": "ffer[ 8] = (options->header.cupsHeight >> 8) & 255;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 370,
    "end_line": 370,
    "code": "ffer[ 8] = (options->header.cupsHeight >> 8) & 255;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 371,
    "end_line": 371,
    "code": "ffer[ 9] = (options->header.cupsHeight >> 16) & 255;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 371,
    "end_line": 371,
    "code": "ffer[ 9] = (options->header.cupsHeight >> 16) & 255;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 371,
    "end_line": 371,
    "code": "ffer[ 9] = (options->header.cupsHeight >> 16) & 255;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 371,
    "end_line": 371,
    "code": "ffer[ 9] = (options->header.cupsHeight >> 16) & 255;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 372,
    "end_line": 372,
    "code": "ffer[10] = (options->header.cupsHeight >> 24) & 255;\n#",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 372,
    "end_line": 372,
    "code": "ffer[10] = (options->header.cupsHeight >> 24) & 255;\n#",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 372,
    "end_line": 372,
    "code": "ffer[10] = (options->header.cupsHeight >> 24) & 255;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 372,
    "end_line": 372,
    "code": "ffer[10] = (options->header.cupsHeight >> 24) & 255;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 373,
    "end_line": 377,
    "code": "lse\n  buffer[ 7] = brother->count & 255;\n  buffer[ 8] = (brother->count >> 8) & 255;\n  buffer[ 9] = (brother->count >> 16) & 255;\n  buffer[10] = (brother->count >> 24) & 255;\n#",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 373,
    "end_line": 377,
    "code": "lse\n  buffer[ 7] = brother->count & 255;\n  buffer[ 8] = (brother->count >> 8) & 255;\n  buffer[ 9] = (brother->count >> 16) & 255;\n  buffer[10] = (brother->count >> 24) & 255;\n#",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 374,
    "end_line": 374,
    "code": "ffer[ 7] = brother->count & 255;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 374,
    "end_line": 374,
    "code": "ffer[ 7] = brother->count & 255;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 375,
    "end_line": 375,
    "code": "ffer[ 8] = (brother->count >> 8) & 255;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 375,
    "end_line": 375,
    "code": "ffer[ 8] = (brother->count >> 8) & 255;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 375,
    "end_line": 375,
    "code": "ffer[ 8] = (brother->count >> 8) & 255;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 375,
    "end_line": 375,
    "code": "ffer[ 8] = (brother->count >> 8) & 255;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 376,
    "end_line": 376,
    "code": "ffer[ 9] = (brother->count >> 16) & 255;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 376,
    "end_line": 376,
    "code": "ffer[ 9] = (brother->count >> 16) & 255;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 376,
    "end_line": 376,
    "code": "ffer[ 9] = (brother->count >> 16) & 255;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 376,
    "end_line": 376,
    "code": "ffer[ 9] = (brother->count >> 16) & 255;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 377,
    "end_line": 377,
    "code": "ffer[10] = (brother->count >> 24) & 255;\n#",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 377,
    "end_line": 377,
    "code": "ffer[10] = (brother->count >> 24) & 255;\n#",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 377,
    "end_line": 377,
    "code": "ffer[10] = (brother->count >> 24) & 255;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 377,
    "end_line": 377,
    "code": "ffer[10] = (brother->count >> 24) & 255;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function",
    "start_line": 404,
    "end_line": 455,
    "name": "lprint_brother_rstartjob",
    "parent": null,
    "hierarchy": "lprint_brother_rstartjob",
    "code": "atic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rstartjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_brother_t *brother = (lprint_brother_t *)calloc(1, sizeof(lprint_brother_t));\n\t\t\t\t\t// Brother driver data\n  const char\t*driver_name = papplPrinterGetDriverName(papplJobGetPrinter(job));\n\t\t\t\t\t// Driver name\n  char\t\tbuffer[400];\t\t// Reset buffer\n  int\t\tdarkness;\t\t// Combined darkness\n\n\n  (void)options;\n\n  // Save driver data...\n  papplJobSetData(job, brother);\n\n  // Reset the printer...\n  memset(buffer, 0, sizeof(buffer));\n  if (driver_name && !strncmp(driver_name, \"brother_pt-\", 11))\n  {\n    // Send short reset sequence for PT-series tape printers\n    papplDeviceWrite(device, buffer, 100);\n    brother->is_pt_series = true;\n  }\n  else\n  {\n    // Send long reset sequence for QL-series label printers\n    papplDeviceWrite(device, buffer, sizeof(buffer));\n\n    brother->is_ql_800 = driver_name && !strcmp(driver_name, \"brother_ql-800\");\n  }\n\n  // Get status information...\n  lprint_brother_get_status(papplJobGetPrinter(job), device);\n//  if (!lprint_brother_get_status(papplJobGetPrinter(job), device))\n//    return (false);\n\n  // Reset and set raster mode...\n  if (!papplDevicePuts(device, \"\\033@\\033ia\\001\"))\n    return (false);\n\n  // print-darkness / printer-darkness-configured\n  if ((darkness = options->print_darkness + options->darkness_configured) < 0)\n    darkness = 0;\n  else if (darkness > 100)\n    darkness = 100;\n\n  return (papplDevicePrintf(device, \"\\033iD%c\", 4 * darkness / 100 + 1));\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 404,
    "end_line": 455,
    "code": "atic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rstartjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_brother_t *brother = (lprint_brother_t *)calloc(1, sizeof(lprint_brother_t));\n\t\t\t\t\t// Brother driver data\n  const char\t*driver_name = papplPrinterGetDriverName(papplJobGetPrinter(job));\n\t\t\t\t\t// Driver name\n  char\t\tbuffer[400];\t\t// Reset buffer\n  int\t\tdarkness;\t\t// Combined darkness\n\n\n  (void)options;\n\n  // Save driver data...\n  papplJobSetData(job, brother);\n\n  // Reset the printer...\n  memset(buffer, 0, sizeof(buffer));\n  if (driver_name && !strncmp(driver_name, \"brother_pt-\", 11))\n  {\n    // Send short reset sequence for PT-series tape printers\n    papplDeviceWrite(device, buffer, 100);\n    brother->is_pt_series = true;\n  }\n  else\n  {\n    // Send long reset sequence for QL-series label printers\n    papplDeviceWrite(device, buffer, sizeof(buffer));\n\n    brother->is_ql_800 = driver_name && !strcmp(driver_name, \"brother_ql-800\");\n  }\n\n  // Get status information...\n  lprint_brother_get_status(papplJobGetPrinter(job), device);\n//  if (!lprint_brother_get_status(papplJobGetPrinter(job), device))\n//    return (false);\n\n  // Reset and set raster mode...\n  if (!papplDevicePuts(device, \"\\033@\\033ia\\001\"))\n    return (false);\n\n  // print-darkness / printer-darkness-configured\n  if ((darkness = options->print_darkness + options->darkness_configured) < 0)\n    darkness = 0;\n  else if (darkness > 100)\n    darkness = 100;\n\n  return (papplDevicePrintf(device, \"\\033iD%c\", 4 * darkness / 100 + 1));\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 404,
    "end_line": 455,
    "code": "atic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rstartjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_brother_t *brother = (lprint_brother_t *)calloc(1, sizeof(lprint_brother_t));\n\t\t\t\t\t// Brother driver data\n  const char\t*driver_name = papplPrinterGetDriverName(papplJobGetPrinter(job));\n\t\t\t\t\t// Driver name\n  char\t\tbuffer[400];\t\t// Reset buffer\n  int\t\tdarkness;\t\t// Combined darkness\n\n\n  (void)options;\n\n  // Save driver data...\n  papplJobSetData(job, brother);\n\n  // Reset the printer...\n  memset(buffer, 0, sizeof(buffer));\n  if (driver_name && !strncmp(driver_name, \"brother_pt-\", 11))\n  {\n    // Send short reset sequence for PT-series tape printers\n    papplDeviceWrite(device, buffer, 100);\n    brother->is_pt_series = true;\n  }\n  else\n  {\n    // Send long reset sequence for QL-series label printers\n    papplDeviceWrite(device, buffer, sizeof(buffer));\n\n    brother->is_ql_800 = driver_name && !strcmp(driver_name, \"brother_ql-800\");\n  }\n\n  // Get status information...\n  lprint_brother_get_status(papplJobGetPrinter(job), device);\n//  if (!lprint_brother_get_status(papplJobGetPrinter(job), device))\n//    return (false);\n\n  // Reset and set raster mode...\n  if (!papplDevicePuts(device, \"\\033@\\033ia\\001\"))\n    return (false);\n\n  // print-darkness / printer-darkness-configured\n  if ((darkness = options->print_darkness + options->darkness_configured) < 0)\n    darkness = 0;\n  else if (darkness > 100)\n    darkness = 100;\n\n  return (papplDevicePrintf(device, \"\\033iD%c\", 4 * darkness / 100 + 1));\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 409,
    "end_line": 455,
    "code": "  lprint_brother_t *brother = (lprint_brother_t *)calloc(1, sizeof(lprint_brother_t));\n\t\t\t\t\t// Brother driver data\n  const char\t*driver_name = papplPrinterGetDriverName(papplJobGetPrinter(job));\n\t\t\t\t\t// Driver name\n  char\t\tbuffer[400];\t\t// Reset buffer\n  int\t\tdarkness;\t\t// Combined darkness\n\n\n  (void)options;\n\n  // Save driver data...\n  papplJobSetData(job, brother);\n\n  // Reset the printer...\n  memset(buffer, 0, sizeof(buffer));\n  if (driver_name && !strncmp(driver_name, \"brother_pt-\", 11))\n  {\n    // Send short reset sequence for PT-series tape printers\n    papplDeviceWrite(device, buffer, 100);\n    brother->is_pt_series = true;\n  }\n  else\n  {\n    // Send long reset sequence for QL-series label printers\n    papplDeviceWrite(device, buffer, sizeof(buffer));\n\n    brother->is_ql_800 = driver_name && !strcmp(driver_name, \"brother_ql-800\");\n  }\n\n  // Get status information...\n  lprint_brother_get_status(papplJobGetPrinter(job), device);\n//  if (!lprint_brother_get_status(papplJobGetPrinter(job), device))\n//    return (false);\n\n  // Reset and set raster mode...\n  if (!papplDevicePuts(device, \"\\033@\\033ia\\001\"))\n    return (false);\n\n  // print-darkness / printer-darkness-configured\n  if ((darkness = options->print_darkness + options->darkness_configured) < 0)\n    darkness = 0;\n  else if (darkness > 100)\n    darkness = 100;\n\n  return (papplDevicePrintf(device, \"\\033iD%c\", 4 * darkness / 100 + 1));\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 409,
    "end_line": 455,
    "code": "  lprint_brother_t *brother = (lprint_brother_t *)calloc(1, sizeof(lprint_brother_t));\n\t\t\t\t\t// Brother driver data\n  const char\t*driver_name = papplPrinterGetDriverName(papplJobGetPrinter(job));\n\t\t\t\t\t// Driver name\n  char\t\tbuffer[400];\t\t// Reset buffer\n  int\t\tdarkness;\t\t// Combined darkness\n\n\n  (void)options;\n\n  // Save driver data...\n  papplJobSetData(job, brother);\n\n  // Reset the printer...\n  memset(buffer, 0, sizeof(buffer));\n  if (driver_name && !strncmp(driver_name, \"brother_pt-\", 11))\n  {\n    // Send short reset sequence for PT-series tape printers\n    papplDeviceWrite(device, buffer, 100);\n    brother->is_pt_series = true;\n  }\n  else\n  {\n    // Send long reset sequence for QL-series label printers\n    papplDeviceWrite(device, buffer, sizeof(buffer));\n\n    brother->is_ql_800 = driver_name && !strcmp(driver_name, \"brother_ql-800\");\n  }\n\n  // Get status information...\n  lprint_brother_get_status(papplJobGetPrinter(job), device);\n//  if (!lprint_brother_get_status(papplJobGetPrinter(job), device))\n//    return (false);\n\n  // Reset and set raster mode...\n  if (!papplDevicePuts(device, \"\\033@\\033ia\\001\"))\n    return (false);\n\n  // print-darkness / printer-darkness-configured\n  if ((darkness = options->print_darkness + options->darkness_configured) < 0)\n    darkness = 0;\n  else if (darkness > 100)\n    darkness = 100;\n\n  return (papplDevicePrintf(device, \"\\033iD%c\", 4 * darkness / 100 + 1));\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "global_variable",
    "start_line": 410,
    "end_line": 410,
    "code": "rint_brother_t *brother = (lprint_brother_t *)calloc(1, sizeof(lprint_brother_t));\n\t",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "global_variable",
    "start_line": 412,
    "end_line": 412,
    "code": "nst char\t*driver_name = papplPrinterGetDriverName(papplJobGetPrinter(job));\n\t",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 425,
    "end_line": 437,
    "code": " (driver_name && !strncmp(driver_name, \"brother_pt-\", 11))\n  {\n    // Send short reset sequence for PT-series tape printers\n    papplDeviceWrite(device, buffer, 100);\n    brother->is_pt_series = true;\n  }\n  else\n  {\n    // Send long reset sequence for QL-series label printers\n    papplDeviceWrite(device, buffer, sizeof(buffer));\n\n    brother->is_ql_800 = driver_name && !strcmp(driver_name, \"brother_ql-800\");\n  }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 425,
    "end_line": 437,
    "code": " (driver_name && !strncmp(driver_name, \"brother_pt-\", 11))\n  {\n    // Send short reset sequence for PT-series tape printers\n    papplDeviceWrite(device, buffer, 100);\n    brother->is_pt_series = true;\n  }\n  else\n  {\n    // Send long reset sequence for QL-series label printers\n    papplDeviceWrite(device, buffer, sizeof(buffer));\n\n    brother->is_ql_800 = driver_name && !strcmp(driver_name, \"brother_ql-800\");\n  }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 426,
    "end_line": 430,
    "code": "    // Send short reset sequence for PT-series tape printers\n    papplDeviceWrite(device, buffer, 100);\n    brother->is_pt_series = true;\n  }\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 426,
    "end_line": 430,
    "code": "    // Send short reset sequence for PT-series tape printers\n    papplDeviceWrite(device, buffer, 100);\n    brother->is_pt_series = true;\n  }\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 429,
    "end_line": 429,
    "code": "other->is_pt_series = true;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 429,
    "end_line": 429,
    "code": "other->is_pt_series = true;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 431,
    "end_line": 437,
    "code": "se\n  {\n    // Send long reset sequence for QL-series label printers\n    papplDeviceWrite(device, buffer, sizeof(buffer));\n\n    brother->is_ql_800 = driver_name && !strcmp(driver_name, \"brother_ql-800\");\n  }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 431,
    "end_line": 437,
    "code": "se\n  {\n    // Send long reset sequence for QL-series label printers\n    papplDeviceWrite(device, buffer, sizeof(buffer));\n\n    brother->is_ql_800 = driver_name && !strcmp(driver_name, \"brother_ql-800\");\n  }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 432,
    "end_line": 437,
    "code": "    // Send long reset sequence for QL-series label printers\n    papplDeviceWrite(device, buffer, sizeof(buffer));\n\n    brother->is_ql_800 = driver_name && !strcmp(driver_name, \"brother_ql-800\");\n  }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 432,
    "end_line": 437,
    "code": "    // Send long reset sequence for QL-series label printers\n    papplDeviceWrite(device, buffer, sizeof(buffer));\n\n    brother->is_ql_800 = driver_name && !strcmp(driver_name, \"brother_ql-800\");\n  }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 436,
    "end_line": 436,
    "code": "other->is_ql_800 = driver_name && !strcmp(driver_name, \"brother_ql-800\");\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 436,
    "end_line": 436,
    "code": "other->is_ql_800 = driver_name && !strcmp(driver_name, \"brother_ql-800\");\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 436,
    "end_line": 436,
    "code": "other->is_ql_800 = driver_name && !strcmp(driver_name, \"brother_ql-800\");\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 436,
    "end_line": 436,
    "code": "other->is_ql_800 = driver_name && !strcmp(driver_name, \"brother_ql-800\");\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 449,
    "end_line": 452,
    "code": " ((darkness = options->print_darkness + options->darkness_configured) < 0)\n    darkness = 0;\n  else if (darkness > 100)\n    darkness = 100;\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 449,
    "end_line": 452,
    "code": " ((darkness = options->print_darkness + options->darkness_configured) < 0)\n    darkness = 0;\n  else if (darkness > 100)\n    darkness = 100;\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function",
    "start_line": 462,
    "end_line": 483,
    "name": "lprint_brother_rstartpage",
    "parent": null,
    "hierarchy": "lprint_brother_rstartpage",
    "code": "atic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rstartpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_brother_t *brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n\n\n  if (page > 0)\n    papplDevicePuts(device, \"\\014\");\t// Eject the previous page\n\n  if (!lprintDitherAlloc(&brother->dither, job, options, CUPS_CSPACE_K, options->header.HWResolution[0] == 300 ? 1.2 : 1.0))\n    return (false);\n\n  brother->count     = 0;\n  brother->num_bytes = 0;\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 462,
    "end_line": 483,
    "code": "atic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rstartpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_brother_t *brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n\n\n  if (page > 0)\n    papplDevicePuts(device, \"\\014\");\t// Eject the previous page\n\n  if (!lprintDitherAlloc(&brother->dither, job, options, CUPS_CSPACE_K, options->header.HWResolution[0] == 300 ? 1.2 : 1.0))\n    return (false);\n\n  brother->count     = 0;\n  brother->num_bytes = 0;\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 462,
    "end_line": 483,
    "code": "atic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rstartpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_brother_t *brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n\n\n  if (page > 0)\n    papplDevicePuts(device, \"\\014\");\t// Eject the previous page\n\n  if (!lprintDitherAlloc(&brother->dither, job, options, CUPS_CSPACE_K, options->header.HWResolution[0] == 300 ? 1.2 : 1.0))\n    return (false);\n\n  brother->count     = 0;\n  brother->num_bytes = 0;\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 468,
    "end_line": 483,
    "code": "  lprint_brother_t *brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n\n\n  if (page > 0)\n    papplDevicePuts(device, \"\\014\");\t// Eject the previous page\n\n  if (!lprintDitherAlloc(&brother->dither, job, options, CUPS_CSPACE_K, options->header.HWResolution[0] == 300 ? 1.2 : 1.0))\n    return (false);\n\n  brother->count     = 0;\n  brother->num_bytes = 0;\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 468,
    "end_line": 483,
    "code": "  lprint_brother_t *brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n\n\n  if (page > 0)\n    papplDevicePuts(device, \"\\014\");\t// Eject the previous page\n\n  if (!lprintDitherAlloc(&brother->dither, job, options, CUPS_CSPACE_K, options->header.HWResolution[0] == 300 ? 1.2 : 1.0))\n    return (false);\n\n  brother->count     = 0;\n  brother->num_bytes = 0;\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "global_variable",
    "start_line": 469,
    "end_line": 469,
    "code": "rint_brother_t *brother = (lprint_brother_t *)papplJobGetData(job);\n\t",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 476,
    "end_line": 477,
    "code": " (!lprintDitherAlloc(&brother->dither, job, options, CUPS_CSPACE_K, options->header.HWResolution[0] == 300 ? 1.2 : 1.0))\n    return (false);\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 476,
    "end_line": 477,
    "code": " (!lprintDitherAlloc(&brother->dither, job, options, CUPS_CSPACE_K, options->header.HWResolution[0] == 300 ? 1.2 : 1.0))\n    return (false);\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 476,
    "end_line": 476,
    "code": "lprintDitherAlloc(&brother->dither, job, options, CUPS_CSPACE_K, options->header.HWResolution[0] == 300 ? 1.2 : 1.0))\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 476,
    "end_line": 476,
    "code": "printDitherAlloc(&brother->dither, job, options, CUPS_CSPACE_K, options->header.HWResolution[0] == 300 ? 1.2 : 1.0))\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 476,
    "end_line": 476,
    "code": "rintDitherAlloc(&brother->dither, job, options, CUPS_CSPACE_K, options->header.HWResolution[0] == 300 ? 1.2 : 1.0))\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 479,
    "end_line": 479,
    "code": "other->count     = 0;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 479,
    "end_line": 479,
    "code": "other->count     = 0;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 480,
    "end_line": 480,
    "code": "other->num_bytes = 0;\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 480,
    "end_line": 480,
    "code": "other->num_bytes = 0;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function",
    "start_line": 490,
    "end_line": 557,
    "name": "lprint_brother_rwriteline",
    "parent": null,
    "hierarchy": "lprint_brother_rwriteline",
    "code": "atic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rwriteline(\n    pappl_job_t         *job,\t\t// I - Job\n    pappl_pr_options_t  *options,\t// I - Job options\n    pappl_device_t      *device,\t// I - Output device\n    unsigned            y,\t\t// I - Line number\n    const unsigned char *line)\t\t// I - Line\n{\n  lprint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n  unsigned char\t\t*bufptr;\t// Pointer into page buffer\n\n\n  if (!lprintDitherLine(&brother->dither, y, line))\n    return (true);\n\n  if ((brother->alloc_bytes - brother->num_bytes) < (3 + brother->dither.out_width))\n  {\n    size_t temp_alloc = brother->alloc_bytes + brother->dither.out_width + 4096;\n\t\t\t\t      // New allocated size\n    unsigned char *temp = realloc(brother->buffer, temp_alloc);\n\t\t\t\t      // New buffer\n\n    if (!temp)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate %lu bytes of memory memory.\", (unsigned long)temp_alloc);\n      return (false);\n    }\n\n    brother->alloc_bytes = temp_alloc;\n    brother->buffer      = temp;\n  }\n\n  bufptr = brother->buffer + brother->num_bytes;\n\n  if (brother->is_ql_800 || brother->dither.output[0] || memcmp(brother->dither.output, brother->dither.output + 1, brother->dither.out_width - 1))\n  {\n    // Non-blank line...\n    // TODO: Add PackBits compression support\n    brother->count += 3 + brother->dither.out_width;\n\n    if (brother->is_pt_series)\n    {\n      *bufptr++ = 'G';\n      *bufptr++ = brother->dither.out_width & 255;\n      *bufptr++ = (brother->dither.out_width >> 8) & 255;\n    }\n    else\n    {\n      *bufptr++ = 'g';\n      *bufptr++ = 0;\n      *bufptr++ = brother->dither.out_width;\n    }\n\n    memcpy(bufptr, brother->dither.output, brother->dither.out_width);\n    brother->num_bytes += 3 + brother->dither.out_width;\n  }\n  else\n  {\n    // Blank line\n    brother->count ++;\n\n    *bufptr = 'Z';\n    brother->num_bytes ++;\n  }\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 490,
    "end_line": 557,
    "code": "atic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rwriteline(\n    pappl_job_t         *job,\t\t// I - Job\n    pappl_pr_options_t  *options,\t// I - Job options\n    pappl_device_t      *device,\t// I - Output device\n    unsigned            y,\t\t// I - Line number\n    const unsigned char *line)\t\t// I - Line\n{\n  lprint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n  unsigned char\t\t*bufptr;\t// Pointer into page buffer\n\n\n  if (!lprintDitherLine(&brother->dither, y, line))\n    return (true);\n\n  if ((brother->alloc_bytes - brother->num_bytes) < (3 + brother->dither.out_width))\n  {\n    size_t temp_alloc = brother->alloc_bytes + brother->dither.out_width + 4096;\n\t\t\t\t      // New allocated size\n    unsigned char *temp = realloc(brother->buffer, temp_alloc);\n\t\t\t\t      // New buffer\n\n    if (!temp)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate %lu bytes of memory memory.\", (unsigned long)temp_alloc);\n      return (false);\n    }\n\n    brother->alloc_bytes = temp_alloc;\n    brother->buffer      = temp;\n  }\n\n  bufptr = brother->buffer + brother->num_bytes;\n\n  if (brother->is_ql_800 || brother->dither.output[0] || memcmp(brother->dither.output, brother->dither.output + 1, brother->dither.out_width - 1))\n  {\n    // Non-blank line...\n    // TODO: Add PackBits compression support\n    brother->count += 3 + brother->dither.out_width;\n\n    if (brother->is_pt_series)\n    {\n      *bufptr++ = 'G';\n      *bufptr++ = brother->dither.out_width & 255;\n      *bufptr++ = (brother->dither.out_width >> 8) & 255;\n    }\n    else\n    {\n      *bufptr++ = 'g';\n      *bufptr++ = 0;\n      *bufptr++ = brother->dither.out_width;\n    }\n\n    memcpy(bufptr, brother->dither.output, brother->dither.out_width);\n    brother->num_bytes += 3 + brother->dither.out_width;\n  }\n  else\n  {\n    // Blank line\n    brother->count ++;\n\n    *bufptr = 'Z';\n    brother->num_bytes ++;\n  }\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 490,
    "end_line": 557,
    "code": "atic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_rwriteline(\n    pappl_job_t         *job,\t\t// I - Job\n    pappl_pr_options_t  *options,\t// I - Job options\n    pappl_device_t      *device,\t// I - Output device\n    unsigned            y,\t\t// I - Line number\n    const unsigned char *line)\t\t// I - Line\n{\n  lprint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n  unsigned char\t\t*bufptr;\t// Pointer into page buffer\n\n\n  if (!lprintDitherLine(&brother->dither, y, line))\n    return (true);\n\n  if ((brother->alloc_bytes - brother->num_bytes) < (3 + brother->dither.out_width))\n  {\n    size_t temp_alloc = brother->alloc_bytes + brother->dither.out_width + 4096;\n\t\t\t\t      // New allocated size\n    unsigned char *temp = realloc(brother->buffer, temp_alloc);\n\t\t\t\t      // New buffer\n\n    if (!temp)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate %lu bytes of memory memory.\", (unsigned long)temp_alloc);\n      return (false);\n    }\n\n    brother->alloc_bytes = temp_alloc;\n    brother->buffer      = temp;\n  }\n\n  bufptr = brother->buffer + brother->num_bytes;\n\n  if (brother->is_ql_800 || brother->dither.output[0] || memcmp(brother->dither.output, brother->dither.output + 1, brother->dither.out_width - 1))\n  {\n    // Non-blank line...\n    // TODO: Add PackBits compression support\n    brother->count += 3 + brother->dither.out_width;\n\n    if (brother->is_pt_series)\n    {\n      *bufptr++ = 'G';\n      *bufptr++ = brother->dither.out_width & 255;\n      *bufptr++ = (brother->dither.out_width >> 8) & 255;\n    }\n    else\n    {\n      *bufptr++ = 'g';\n      *bufptr++ = 0;\n      *bufptr++ = brother->dither.out_width;\n    }\n\n    memcpy(bufptr, brother->dither.output, brother->dither.out_width);\n    brother->num_bytes += 3 + brother->dither.out_width;\n  }\n  else\n  {\n    // Blank line\n    brother->count ++;\n\n    *bufptr = 'Z';\n    brother->num_bytes ++;\n  }\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 497,
    "end_line": 557,
    "code": "  lprint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n  unsigned char\t\t*bufptr;\t// Pointer into page buffer\n\n\n  if (!lprintDitherLine(&brother->dither, y, line))\n    return (true);\n\n  if ((brother->alloc_bytes - brother->num_bytes) < (3 + brother->dither.out_width))\n  {\n    size_t temp_alloc = brother->alloc_bytes + brother->dither.out_width + 4096;\n\t\t\t\t      // New allocated size\n    unsigned char *temp = realloc(brother->buffer, temp_alloc);\n\t\t\t\t      // New buffer\n\n    if (!temp)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate %lu bytes of memory memory.\", (unsigned long)temp_alloc);\n      return (false);\n    }\n\n    brother->alloc_bytes = temp_alloc;\n    brother->buffer      = temp;\n  }\n\n  bufptr = brother->buffer + brother->num_bytes;\n\n  if (brother->is_ql_800 || brother->dither.output[0] || memcmp(brother->dither.output, brother->dither.output + 1, brother->dither.out_width - 1))\n  {\n    // Non-blank line...\n    // TODO: Add PackBits compression support\n    brother->count += 3 + brother->dither.out_width;\n\n    if (brother->is_pt_series)\n    {\n      *bufptr++ = 'G';\n      *bufptr++ = brother->dither.out_width & 255;\n      *bufptr++ = (brother->dither.out_width >> 8) & 255;\n    }\n    else\n    {\n      *bufptr++ = 'g';\n      *bufptr++ = 0;\n      *bufptr++ = brother->dither.out_width;\n    }\n\n    memcpy(bufptr, brother->dither.output, brother->dither.out_width);\n    brother->num_bytes += 3 + brother->dither.out_width;\n  }\n  else\n  {\n    // Blank line\n    brother->count ++;\n\n    *bufptr = 'Z';\n    brother->num_bytes ++;\n  }\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 497,
    "end_line": 557,
    "code": "  lprint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t\t\t\t\t// Brother driver data\n  unsigned char\t\t*bufptr;\t// Pointer into page buffer\n\n\n  if (!lprintDitherLine(&brother->dither, y, line))\n    return (true);\n\n  if ((brother->alloc_bytes - brother->num_bytes) < (3 + brother->dither.out_width))\n  {\n    size_t temp_alloc = brother->alloc_bytes + brother->dither.out_width + 4096;\n\t\t\t\t      // New allocated size\n    unsigned char *temp = realloc(brother->buffer, temp_alloc);\n\t\t\t\t      // New buffer\n\n    if (!temp)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate %lu bytes of memory memory.\", (unsigned long)temp_alloc);\n      return (false);\n    }\n\n    brother->alloc_bytes = temp_alloc;\n    brother->buffer      = temp;\n  }\n\n  bufptr = brother->buffer + brother->num_bytes;\n\n  if (brother->is_ql_800 || brother->dither.output[0] || memcmp(brother->dither.output, brother->dither.output + 1, brother->dither.out_width - 1))\n  {\n    // Non-blank line...\n    // TODO: Add PackBits compression support\n    brother->count += 3 + brother->dither.out_width;\n\n    if (brother->is_pt_series)\n    {\n      *bufptr++ = 'G';\n      *bufptr++ = brother->dither.out_width & 255;\n      *bufptr++ = (brother->dither.out_width >> 8) & 255;\n    }\n    else\n    {\n      *bufptr++ = 'g';\n      *bufptr++ = 0;\n      *bufptr++ = brother->dither.out_width;\n    }\n\n    memcpy(bufptr, brother->dither.output, brother->dither.out_width);\n    brother->num_bytes += 3 + brother->dither.out_width;\n  }\n  else\n  {\n    // Blank line\n    brother->count ++;\n\n    *bufptr = 'Z';\n    brother->num_bytes ++;\n  }\n\n  return (true);\n}\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "global_variable",
    "start_line": 498,
    "end_line": 498,
    "code": "rint_brother_t\t*brother = (lprint_brother_t *)papplJobGetData(job);\n\t",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 506,
    "end_line": 521,
    "code": " ((brother->alloc_bytes - brother->num_bytes) < (3 + brother->dither.out_width))\n  {\n    size_t temp_alloc = brother->alloc_bytes + brother->dither.out_width + 4096;\n\t\t\t\t      // New allocated size\n    unsigned char *temp = realloc(brother->buffer, temp_alloc);\n\t\t\t\t      // New buffer\n\n    if (!temp)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate %lu bytes of memory memory.\", (unsigned long)temp_alloc);\n      return (false);\n    }\n\n    brother->alloc_bytes = temp_alloc;\n    brother->buffer      = temp;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 506,
    "end_line": 521,
    "code": " ((brother->alloc_bytes - brother->num_bytes) < (3 + brother->dither.out_width))\n  {\n    size_t temp_alloc = brother->alloc_bytes + brother->dither.out_width + 4096;\n\t\t\t\t      // New allocated size\n    unsigned char *temp = realloc(brother->buffer, temp_alloc);\n\t\t\t\t      // New buffer\n\n    if (!temp)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate %lu bytes of memory memory.\", (unsigned long)temp_alloc);\n      return (false);\n    }\n\n    brother->alloc_bytes = temp_alloc;\n    brother->buffer      = temp;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 507,
    "end_line": 521,
    "code": "    size_t temp_alloc = brother->alloc_bytes + brother->dither.out_width + 4096;\n\t\t\t\t      // New allocated size\n    unsigned char *temp = realloc(brother->buffer, temp_alloc);\n\t\t\t\t      // New buffer\n\n    if (!temp)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate %lu bytes of memory memory.\", (unsigned long)temp_alloc);\n      return (false);\n    }\n\n    brother->alloc_bytes = temp_alloc;\n    brother->buffer      = temp;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 507,
    "end_line": 521,
    "code": "    size_t temp_alloc = brother->alloc_bytes + brother->dither.out_width + 4096;\n\t\t\t\t      // New allocated size\n    unsigned char *temp = realloc(brother->buffer, temp_alloc);\n\t\t\t\t      // New buffer\n\n    if (!temp)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate %lu bytes of memory memory.\", (unsigned long)temp_alloc);\n      return (false);\n    }\n\n    brother->alloc_bytes = temp_alloc;\n    brother->buffer      = temp;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "global_variable",
    "start_line": 508,
    "end_line": 508,
    "code": "ze_t temp_alloc = brother->alloc_bytes + brother->dither.out_width + 4096;\n\t",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 508,
    "end_line": 508,
    "code": "ze_t temp_alloc = brother->alloc_bytes + brother->dither.out_width + 4096;\n\t",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 508,
    "end_line": 508,
    "code": "mp_alloc = brother->alloc_bytes + brother->dither.out_width + 4096;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "global_variable",
    "start_line": 510,
    "end_line": 510,
    "code": "signed char *temp = realloc(brother->buffer, temp_alloc);\n\t",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 510,
    "end_line": 510,
    "code": "signed char *temp = realloc(brother->buffer, temp_alloc);\n\t",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 510,
    "end_line": 510,
    "code": "signed char *temp = realloc(brother->buffer, temp_alloc);\n\t",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 510,
    "end_line": 510,
    "code": "emp = realloc(brother->buffer, temp_alloc);\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 510,
    "end_line": 510,
    "code": "emp = realloc(brother->buffer, temp_alloc);\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "anonymous_initializer_block",
    "start_line": 513,
    "end_line": 517,
    "code": " (!temp)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to allocate %lu bytes of memory memory.\", (unsigned long)temp_alloc);\n      return (false);\n    }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 519,
    "end_line": 519,
    "code": "other->alloc_bytes = temp_alloc;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 519,
    "end_line": 519,
    "code": "other->alloc_bytes = temp_alloc;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 520,
    "end_line": 520,
    "code": "other->buffer      = temp;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 520,
    "end_line": 520,
    "code": "other->buffer      = temp;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 523,
    "end_line": 523,
    "code": "fptr = brother->buffer + brother->num_bytes;\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 523,
    "end_line": 523,
    "code": "fptr = brother->buffer + brother->num_bytes;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 525,
    "end_line": 554,
    "code": " (brother->is_ql_800 || brother->dither.output[0] || memcmp(brother->dither.output, brother->dither.output + 1, brother->dither.out_width - 1))\n  {\n    // Non-blank line...\n    // TODO: Add PackBits compression support\n    brother->count += 3 + brother->dither.out_width;\n\n    if (brother->is_pt_series)\n    {\n      *bufptr++ = 'G';\n      *bufptr++ = brother->dither.out_width & 255;\n      *bufptr++ = (brother->dither.out_width >> 8) & 255;\n    }\n    else\n    {\n      *bufptr++ = 'g';\n      *bufptr++ = 0;\n      *bufptr++ = brother->dither.out_width;\n    }\n\n    memcpy(bufptr, brother->dither.output, brother->dither.out_width);\n    brother->num_bytes += 3 + brother->dither.out_width;\n  }\n  else\n  {\n    // Blank line\n    brother->count ++;\n\n    *bufptr = 'Z';\n    brother->num_bytes ++;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 525,
    "end_line": 554,
    "code": " (brother->is_ql_800 || brother->dither.output[0] || memcmp(brother->dither.output, brother->dither.output + 1, brother->dither.out_width - 1))\n  {\n    // Non-blank line...\n    // TODO: Add PackBits compression support\n    brother->count += 3 + brother->dither.out_width;\n\n    if (brother->is_pt_series)\n    {\n      *bufptr++ = 'G';\n      *bufptr++ = brother->dither.out_width & 255;\n      *bufptr++ = (brother->dither.out_width >> 8) & 255;\n    }\n    else\n    {\n      *bufptr++ = 'g';\n      *bufptr++ = 0;\n      *bufptr++ = brother->dither.out_width;\n    }\n\n    memcpy(bufptr, brother->dither.output, brother->dither.out_width);\n    brother->num_bytes += 3 + brother->dither.out_width;\n  }\n  else\n  {\n    // Blank line\n    brother->count ++;\n\n    *bufptr = 'Z';\n    brother->num_bytes ++;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 526,
    "end_line": 546,
    "code": "    // Non-blank line...\n    // TODO: Add PackBits compression support\n    brother->count += 3 + brother->dither.out_width;\n\n    if (brother->is_pt_series)\n    {\n      *bufptr++ = 'G';\n      *bufptr++ = brother->dither.out_width & 255;\n      *bufptr++ = (brother->dither.out_width >> 8) & 255;\n    }\n    else\n    {\n      *bufptr++ = 'g';\n      *bufptr++ = 0;\n      *bufptr++ = brother->dither.out_width;\n    }\n\n    memcpy(bufptr, brother->dither.output, brother->dither.out_width);\n    brother->num_bytes += 3 + brother->dither.out_width;\n  }\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 526,
    "end_line": 546,
    "code": "    // Non-blank line...\n    // TODO: Add PackBits compression support\n    brother->count += 3 + brother->dither.out_width;\n\n    if (brother->is_pt_series)\n    {\n      *bufptr++ = 'G';\n      *bufptr++ = brother->dither.out_width & 255;\n      *bufptr++ = (brother->dither.out_width >> 8) & 255;\n    }\n    else\n    {\n      *bufptr++ = 'g';\n      *bufptr++ = 0;\n      *bufptr++ = brother->dither.out_width;\n    }\n\n    memcpy(bufptr, brother->dither.output, brother->dither.out_width);\n    brother->num_bytes += 3 + brother->dither.out_width;\n  }\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 529,
    "end_line": 529,
    "code": "other->count += 3 + brother->dither.out_width;\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 529,
    "end_line": 529,
    "code": "other->count += 3 + brother->dither.out_width;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 531,
    "end_line": 542,
    "code": " (brother->is_pt_series)\n    {\n      *bufptr++ = 'G';\n      *bufptr++ = brother->dither.out_width & 255;\n      *bufptr++ = (brother->dither.out_width >> 8) & 255;\n    }\n    else\n    {\n      *bufptr++ = 'g';\n      *bufptr++ = 0;\n      *bufptr++ = brother->dither.out_width;\n    }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 531,
    "end_line": 542,
    "code": " (brother->is_pt_series)\n    {\n      *bufptr++ = 'G';\n      *bufptr++ = brother->dither.out_width & 255;\n      *bufptr++ = (brother->dither.out_width >> 8) & 255;\n    }\n    else\n    {\n      *bufptr++ = 'g';\n      *bufptr++ = 0;\n      *bufptr++ = brother->dither.out_width;\n    }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 532,
    "end_line": 536,
    "code": "      *bufptr++ = 'G';\n      *bufptr++ = brother->dither.out_width & 255;\n      *bufptr++ = (brother->dither.out_width >> 8) & 255;\n    }\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 532,
    "end_line": 536,
    "code": "      *bufptr++ = 'G';\n      *bufptr++ = brother->dither.out_width & 255;\n      *bufptr++ = (brother->dither.out_width >> 8) & 255;\n    }\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 534,
    "end_line": 534,
    "code": "ufptr++ = brother->dither.out_width & 255;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 534,
    "end_line": 534,
    "code": "ufptr++ = brother->dither.out_width & 255;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 535,
    "end_line": 535,
    "code": "ufptr++ = (brother->dither.out_width >> 8) & 255;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 535,
    "end_line": 535,
    "code": "ufptr++ = (brother->dither.out_width >> 8) & 255;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 535,
    "end_line": 535,
    "code": "ufptr++ = (brother->dither.out_width >> 8) & 255;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function_assignment",
    "start_line": 535,
    "end_line": 535,
    "code": "ufptr++ = (brother->dither.out_width >> 8) & 255;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 537,
    "end_line": 542,
    "code": "se\n    {\n      *bufptr++ = 'g';\n      *bufptr++ = 0;\n      *bufptr++ = brother->dither.out_width;\n    }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 538,
    "end_line": 542,
    "code": "      *bufptr++ = 'g';\n      *bufptr++ = 0;\n      *bufptr++ = brother->dither.out_width;\n    }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 541,
    "end_line": 541,
    "code": "ufptr++ = brother->dither.out_width;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 541,
    "end_line": 541,
    "code": "ufptr++ = brother->dither.out_width;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 545,
    "end_line": 545,
    "code": "other->num_bytes += 3 + brother->dither.out_width;\n ",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 545,
    "end_line": 545,
    "code": "other->num_bytes += 3 + brother->dither.out_width;\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 547,
    "end_line": 554,
    "code": "se\n  {\n    // Blank line\n    brother->count ++;\n\n    *bufptr = 'Z';\n    brother->num_bytes ++;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 548,
    "end_line": 554,
    "code": "    // Blank line\n    brother->count ++;\n\n    *bufptr = 'Z';\n    brother->num_bytes ++;\n  }\n\n",
    "file": "data/codebase/lprint/lprint-brother.c"
  },
  {
    "type": "function",
    "start_line": 564,
    "end_line": 571,
    "name": "lprint_brother_status",
    "parent": null,
    "hierarchy": "lprint_brother_status",
    "code": "atic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_brother_status(\n    pappl_printer_t *printer)\t\t// I - Printer\n{\n  (void)printer;\n\n  return (true);\n}\n#",
    "file": "data/codebase/lprint/lprint-brother.c"
  }
]