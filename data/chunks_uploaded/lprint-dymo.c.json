[
  {
    "type": "struct_assignment",
    "start_line": 1,
    "end_line": 616,
    "code": "//\n// DYMO driver for LPrint, a Label Printer Application\n//\n// Copyright \u00a9\u00a02019-2025 by Michael R Sweet.\n// Copyright \u00a9\u00a02007-2019 by Apple Inc.\n// Copyright \u00a9\u00a02001-2007 by Easy Software Products.\n//\n// Licensed under Apache License v2.0.  See the file \"LICENSE\" for more\n// information.\n//\n\n#include \"lprint.h\"\n\n\n//\n// Local types...\n//\n\ntypedef enum lprint_dlang_e\n{\n  LPRINT_DLANG_LABEL,\t\t\t// Label printing\n  LPRINT_DLANG_TAPE\t\t\t// Tape printing\n} lprint_dlang_t;\n\ntypedef struct lprint_dymo_s\t\t// DYMO driver data\n{\n  lprint_dlang_t dlang;\t\t\t// Printer language\n  lprint_dither_t dither;\t\t// Dithering buffer\n  int\t\tfeed,\t\t\t// Accumulated feed\n\t\tmin_leader,\t\t// Leader distance for cut\n\t\tnormal_leader;\t\t// Leader distance for top of label\n} lprint_dymo_t;\n\n\n//\n// Local globals...\n//\n\nstatic const char * const lprint_dymo_label[] =\n{\t\t\t\t\t// Supported media sizes for labels\n  \"oe_thin-multipurpose-label_0.375x2.8125in\",\n  \"oe_library-barcode-label_0.5x1.875in\",\n  \"oe_hanging-file-tab-insert_0.5625x2in\",\n  \"oe_file-folder-label_0.5625x3.4375in\",\n  \"oe_return-address-label_0.75x2in\",\n  \"oe_barcode-label_0.75x2.5in\",\n  \"oe_video-spine-label_0.75x5.875in\",\n  \"oe_price-tag-label_0.9375x0.875in\",\n  \"oe_square-multipurpose-label_1x1in\",\n  \"oe_book-spine-label_1x1.5in\",\n  \"oe_sm-multipurpose-label_1x2.125in\",\n  \"oe_2-up-file-folder-label_1.125x3.4375in\",\n  \"oe_address-label_1.125x3.5in\",\n  \"oe_internet-postage-label_1.25x1.625in\",\n  \"oe_lg-address-label_1.4x3.5in\",\n  \"oe_video-top-label_1.8x3.1in\",\n  \"oe_multipurpose-label_2x2.3125in\",\n  \"oe_md-appointment-card_2x3.5in\",\n  \"oe_lg-multipurpose-label_2.125x.75in\",\n  \"oe_shipping-label_2.125x4in\",\n  \"oe_continuous-label_2.125x3600in\",\n  \"oe_md-multipurpose-label_2.25x1.25in\",\n  \"oe_media-label_2.25x2.25in\",\n  \"oe_2-up-address-label_2.25x3.5in\",\n  \"oe_name-badge-label_2.25x4in\",\n  \"oe_3-part-postage-label_2.25x7in\",\n  \"oe_2-part-internet-postage-label_2.25x7.5in\",\n  \"oe_shipping-label_2.3125x4in\",\n  \"oe_internet-postage-label_2.3125x7in\",\n  \"oe_internet-postage-confirmation-label_2.3125x10.5in\",\n  \"om_diskette-label_54x70mm\",\n\n  \"roll_max_2.3125x3600in\",\n  \"roll_min_0.25x0.25in\"\n};\n\nstatic const char * const lprint_dymo_tape[] =\n{\t\t\t\t\t// Supported media sizes for tape\n  \"oe_thin-1in-tape_0.25x1in\",\n  \"oe_thinner-1in-tape_0.375x1in\",\n  \"oe_medium-1in-tape_0.5x1in\",\n  \"oe_wider-1in-tape_0.75x1in\",\n  \"oe_wide-1in-tape_1x1in\",\n\n  \"oe_thin-2in-tape_0.25x2in\",\n  \"oe_thinner-2in-tape_0.375x2in\",\n  \"oe_medium-2in-tape_0.5x2in\",\n  \"oe_wider-2in-tape_0.75x2in\",\n  \"oe_wide-2in-tape_1x2in\",\n\n  \"oe_thin-3in-tape_0.25x3in\",\n  \"oe_thinner-3in-tape_0.375x3in\",\n  \"oe_medium-3in-tape_0.5x3in\",\n  \"oe_wider-3in-tape_0.75x3in\",\n  \"oe_wide-3in-tape_1x3in\",\n\n  \"roll_max_1x3600in\",\n  \"roll_min_0.25x1in\"\n};\n\n\n//\n// Local functions...\n//\n\nstatic void\tlprint_dymo_init(pappl_job_t *job, lprint_dymo_t *dymo);\nstatic bool\tlprint_dymo_printfile(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_dymo_rendjob(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_dymo_rendpage(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned page);\nstatic bool\tlprint_dymo_rstartjob(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_dymo_rstartpage(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned page);\nstatic bool\tlprint_dymo_rwriteline(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned y, const unsigned char *line);\nstatic bool\tlprint_dymo_status(pappl_printer_t *printer);\n\n\n//\n// 'lprintDYMO()' - Initialize the DYMO driver.\n//\n\nbool\t\t\t\t\t// O - `true` on success, `false` on error\nlprintDYMO(\n    pappl_system_t         *system,\t// I - System\n    const char             *driver_name,// I - Driver name\n    const char             *device_uri,\t// I - Device URI\n    const char             *device_id,\t// I - 1284 device ID\n    pappl_pr_driver_data_t *data,\t// I - Pointer to driver data\n    ipp_t                  **attrs,\t// O - Pointer to driver attributes\n    void                   *cbdata)\t// I - Callback data (not used)\n{\n  data->printfile_cb  = lprint_dymo_printfile;\n  data->rendjob_cb    = lprint_dymo_rendjob;\n  data->rendpage_cb   = lprint_dymo_rendpage;\n  data->rstartjob_cb  = lprint_dymo_rstartjob;\n  data->rstartpage_cb = lprint_dymo_rstartpage;\n  data->rwriteline_cb = lprint_dymo_rwriteline;\n  data->status_cb     = lprint_dymo_status;\n\n  if (!strncmp(driver_name, \"dymo_lm-\", 8) || strstr(driver_name, \"-tape\"))\n  {\n    // Vendor-specific format...\n    data->format = \"application/vnd.dymo-lm\";\n\n    // Set pages-per-minute based on 3\" of tape; not exact but\n    // we need to report something...\n    data->ppm = 20;\n\n    // Tape printers operate at 180dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 180;\n    data->y_resolution[0] = 180;\n\n    data->x_default = data->y_default = 180;\n\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    data->num_media = (int)(sizeof(lprint_dymo_tape) / sizeof(lprint_dymo_tape[0]));\n    memcpy(data->media, lprint_dymo_tape, sizeof(lprint_dymo_tape));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n  }\n  else\n  {\n    // Vendor-specific format...\n    data->format = \"application/vnd.dymo-lw\";\n\n    // Set pages-per-minute based on 1.125x3.5\" address labels; not exact but\n    // we need to report something...\n    if (strstr(driver_name, \"-turbo\"))\n      data->ppm = 60;\n    else\n      data->ppm = 30;\n\n    // Label printers operate at 300dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 300;\n    data->y_resolution[0] = 300;\n\n    data->x_default = data->y_default = 300;\n\n    // Media...\n    data->left_right = 100;\n    data->bottom_top = 525;\n\n    data->num_media = (int)(sizeof(lprint_dymo_label) / sizeof(lprint_dymo_label[0]));\n    memcpy(data->media, lprint_dymo_label, sizeof(lprint_dymo_label));\n\n    if (strstr(driver_name, \"-twin\"))\n    {\n      data->num_source = 2;\n      data->source[0]  = \"main-roll\";\n      data->source[1]  = \"alternate-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n      papplCopyString(data->media_ready[1].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[1].size_name));\n      papplCopyString(data->media_ready[1].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n    else\n    {\n      data->num_source = 1;\n      data->source[0]  = \"main-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n  }\n\n  data->tracking_supported = PAPPL_MEDIA_TRACKING_WEB;\n\n  data->num_type = 1;\n  data->type[0]  = \"labels\";\n\n  // Darkness/density support...\n  data->darkness_configured = 50;\n  data->darkness_supported  = 4;\n\n  return (true);\n}\n\n\n//\n// 'lprint_dymo_init()' - Initialize DYMO driver data based on the driver name...\n//\n\nstatic void\nlprint_dymo_init(\n    pappl_job_t   *job,\t\t\t// I - Job\n    lprint_dymo_t *dymo)\t\t// O - Driver data\n{\n  const char\t*driver_name;\t\t// Driver name\n\n\n  driver_name = papplPrinterGetDriverName(papplJobGetPrinter(job));\n\n  if (!strncmp(driver_name, \"dymo_lm-\", 8) || strstr(driver_name, \"-tape\"))\n  {\n    dymo->dlang = LPRINT_DLANG_TAPE;\n\n    if (!strcmp(driver_name, \"dymo_lw-duo-tape\") || !strcmp(driver_name, \"dymo_lw-duo-tape-128\") || !strcmp(driver_name, \"dymo_lw-450-duo-tape\"))\n    {\n      dymo->min_leader    = 61;\n      dymo->normal_leader = 14;\n    }\n    else if (!strcmp(driver_name, \"dymo_lm-pnp\"))\n    {\n      dymo->min_leader    = 58;\n      dymo->normal_leader = 17;\n    }\n    else\n    {\n      dymo->min_leader    = 55;\n      dymo->normal_leader = 20;\n    }\n  }\n  else\n  {\n    dymo->dlang = LPRINT_DLANG_LABEL;\n  }\n}\n\n\n//\n// 'lprint_dymo_printfile()' - Print a file.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_printfile(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  int\t\tfd;\t\t\t// Input file\n  ssize_t\tbytes;\t\t\t// Bytes read/written\n  char\t\tbuffer[65536];\t\t// Read/write buffer\n  lprint_dymo_t\tdymo;\t\t\t// Driver data\n\n\n  // Initialize driver data...\n  lprint_dymo_init(job, &dymo);\n\n  // Reset the printer...\n  lprint_dymo_rstartjob(job, options, device);\n\n  // Copy the raw file...\n  papplJobSetImpressions(job, 1);\n\n  if ((fd  = open(papplJobGetFilename(job), O_RDONLY)) < 0)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to open print file '%s': %s\", papplJobGetFilename(job), strerror(errno));\n    return (false);\n  }\n\n  while ((bytes = read(fd, buffer, sizeof(buffer))) > 0)\n  {\n    if (papplDeviceWrite(device, buffer, (size_t)bytes) < 0)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to send %d bytes to printer.\", (int)bytes);\n      close(fd);\n      return (false);\n    }\n  }\n  close(fd);\n\n  lprint_dymo_rstartjob(job, options, device);\n\n  papplJobSetImpressionsCompleted(job, 1);\n\n  return (true);\n}\n\n\n//\n// 'lprint_dymo_rend()' - End a job.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rendjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_dymo_t\t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n\n  (void)options;\n\n  free(dymo);\n  papplJobSetData(job, NULL);\n\n  return (true);\n}\n\n\n//\n// 'lprint_dymo_rendpage()' - End a page.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rendpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_dymo_t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n  char\t\tbuffer[256];\t\t// Command buffer\n\n\n  (void)page;\n\n  lprint_dymo_rwriteline(job, options, device, options->header.cupsHeight, NULL);\n\n  switch (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n        break;\n\n    case LPRINT_DLANG_TAPE :\n\t// Skip and cut...\n        papplDevicePrintf(device, \"\\033D%c\", 0);\n        memset(buffer, 0x16, dymo->min_leader);\n        papplDeviceWrite(device, buffer, dymo->min_leader);\n        break;\n  }\n\n  // Eject/cut\n  papplDevicePuts(device, \"\\033E\");\n  papplDeviceFlush(device);\n\n  // Free memory and return...\n  lprintDitherFree(&dymo->dither);\n\n  return (true);\n}\n\n\n//\n// 'lprint_dymo_rstartjob()' - Start a job.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rstartjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_dymo_t\t\t*dymo = (lprint_dymo_t *)calloc(1, sizeof(lprint_dymo_t));\n\t\t\t\t\t// DYMO driver data\n  char\t\t\tbuffer[23];\t// Buffer for reset command\n\n\n  (void)options;\n\n  // Initialize driver data...\n  lprint_dymo_init(job, dymo);\n\n  papplJobSetData(job, dymo);\n\n  // Reset the printer...\n  switch (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n\tpapplDevicePuts(device, \"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033@\");\n        break;\n\n    case LPRINT_DLANG_TAPE :\n        // Send nul bytes to clear input buffer...\n        memset(buffer, 0, sizeof(buffer));\n        papplDeviceWrite(device, buffer, sizeof(buffer));\n\n        // Set tape color to black on white...\n        papplDevicePrintf(device, \"\\033C%c\", 0);\n        break;\n  }\n\n\n  return (true);\n}\n\n\n//\n// 'lprint_dymo_rstartpage()' - Start a page.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rstartpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  pappl_pr_driver_data_t data;\t\t// Generic driver data\n  lprint_dymo_t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n  int\t\tdarkness = options->darkness_configured + options->print_darkness;\n\t\t\t\t\t// Combined density\n  const char\t*density = \"cdeg\";\t// Density codes\n  int\t\ti;\t\t\t// Looping var\n  char\t\tbuffer[256];\t\t// Command buffer\n  double\tout_gamma = 1.0;\t// Output gamma correction\n\n\n\n  (void)page;\n\n  if (options->header.cupsWidth > 2048)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Raster data too large for printer.\");\n    return (false);\n  }\n\n  if (options->header.HWResolution[0] == 300)\n    out_gamma = 1.2;\n\n  if (!lprintDitherAlloc(&dymo->dither, job, options, CUPS_CSPACE_K, out_gamma))\n    return (false);\n\n  dymo->feed = 0;\n\n  switch (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n\tpapplDevicePrintf(device, \"\\033Q%c%c\", 0, 0);\n\tpapplDevicePrintf(device, \"\\033B%c\", 0);\n\tpapplDevicePrintf(device, \"\\033L%c%c\", options->header.cupsHeight >> 8, options->header.cupsHeight);\n\tpapplDevicePrintf(device, \"\\033D%c\", dymo->dither.out_width);\n\n\tpapplPrinterGetDriverData(papplJobGetPrinter(job), &data);\n\n\t// Match roll number to loaded media...\n\tfor (i = 0; i < data.num_source; i ++)\n\t{\n\t  if (data.media_ready[i].size_width == options->media.size_width && data.media_ready[i].size_length == options->media.size_length)\n\t    break;\n\t}\n\n\tif (i >= data.num_source)\n\t{\n\t  // No match, so use what the client sent...\n\t  i = !strcmp(options->media.source, \"alternate-roll\");\n\t}\n\n\tpapplDevicePrintf(device, \"\\033q%d\", i + 1);\n\n\tif (darkness < 0)\n\t  darkness = 0;\n\telse if (darkness > 100)\n\t  darkness = 100;\n\n\tpapplDevicePrintf(device, \"\\033%c\", density[3 * darkness / 100]);\n\tbreak;\n\n    case LPRINT_DLANG_TAPE :\n        // Set line width...\n        papplDevicePrintf(device, \"\\033D%c\", 0);\n\n        // Feed for the leader...\n\tmemset(buffer, 0x16, dymo->normal_leader);\n\tpapplDeviceWrite(device, buffer, dymo->normal_leader);\n\n        // Set indentation...\n        papplDevicePrintf(device, \"\\033B%c\", 0);\n        break;\n  }\n\n  return (true);\n}\n\n\n//\n// 'lprint_dymo_rwriteline()' - Write a raster line.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rwriteline(\n    pappl_job_t         *job,\t\t// I - Job\n    pappl_pr_options_t  *options,\t// I - Job options\n    pappl_device_t      *device,\t// I - Output device\n    unsigned            y,\t\t// I - Line number\n    const unsigned char *line)\t\t// I - Line\n{\n  lprint_dymo_t\t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n  unsigned char\t\tbyte;\t\t// Byte to write\n\n\n  if (!lprintDitherLine(&dymo->dither, y, line))\n    return (true);\n\n  if (dymo->dither.output[0] || memcmp(dymo->dither.output, dymo->dither.output + 1, dymo->dither.out_width - 1))\n  {\n    // Not a blank line\n    switch (dymo->dlang)\n    {\n      case LPRINT_DLANG_LABEL :\n\t  // Feed for any prior blank lines...\n\t  if (dymo->feed)\n\t  {\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t    papplDevicePrintf(device, \"\\033f\\001%c\", dymo->feed);\n\t    dymo->feed = 0;\n\t  }\n\n\t  // Then write the non-blank line...\n\t  byte = 0x16;\n\t  papplDeviceWrite(device, &byte, 1);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n\t  break;\n\n      case LPRINT_DLANG_TAPE :\n\t  if (dymo->feed)\n\t  {\n\t    unsigned char buffer[256];\t// Write buffer\n\n            papplDevicePrintf(device, \"\\033D%c\", 0);\n\t    memset(buffer, 0x16, sizeof(buffer));\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n            if (dymo->feed > 0)\n            {\n\t      papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n\t  papplDevicePrintf(device, \"\\033D%c\\026\", dymo->dither.out_width);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n          break;\n    }\n  }\n  else\n  {\n    // Blank line, accumulate the feed...\n    dymo->feed ++;\n  }\n\n  return (true);\n}\n\n\n//\n// 'lprint_dymo_status()' - Get current printer status.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_status(\n    pappl_printer_t *printer)\t\t// I - Printer\n{\n  (void)printer;\n\n  return (true);\n}\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 1,
    "end_line": 616,
    "code": "//\n// DYMO driver for LPrint, a Label Printer Application\n//\n// Copyright \u00a9\u00a02019-2025 by Michael R Sweet.\n// Copyright \u00a9\u00a02007-2019 by Apple Inc.\n// Copyright \u00a9\u00a02001-2007 by Easy Software Products.\n//\n// Licensed under Apache License v2.0.  See the file \"LICENSE\" for more\n// information.\n//\n\n#include \"lprint.h\"\n\n\n//\n// Local types...\n//\n\ntypedef enum lprint_dlang_e\n{\n  LPRINT_DLANG_LABEL,\t\t\t// Label printing\n  LPRINT_DLANG_TAPE\t\t\t// Tape printing\n} lprint_dlang_t;\n\ntypedef struct lprint_dymo_s\t\t// DYMO driver data\n{\n  lprint_dlang_t dlang;\t\t\t// Printer language\n  lprint_dither_t dither;\t\t// Dithering buffer\n  int\t\tfeed,\t\t\t// Accumulated feed\n\t\tmin_leader,\t\t// Leader distance for cut\n\t\tnormal_leader;\t\t// Leader distance for top of label\n} lprint_dymo_t;\n\n\n//\n// Local globals...\n//\n\nstatic const char * const lprint_dymo_label[] =\n{\t\t\t\t\t// Supported media sizes for labels\n  \"oe_thin-multipurpose-label_0.375x2.8125in\",\n  \"oe_library-barcode-label_0.5x1.875in\",\n  \"oe_hanging-file-tab-insert_0.5625x2in\",\n  \"oe_file-folder-label_0.5625x3.4375in\",\n  \"oe_return-address-label_0.75x2in\",\n  \"oe_barcode-label_0.75x2.5in\",\n  \"oe_video-spine-label_0.75x5.875in\",\n  \"oe_price-tag-label_0.9375x0.875in\",\n  \"oe_square-multipurpose-label_1x1in\",\n  \"oe_book-spine-label_1x1.5in\",\n  \"oe_sm-multipurpose-label_1x2.125in\",\n  \"oe_2-up-file-folder-label_1.125x3.4375in\",\n  \"oe_address-label_1.125x3.5in\",\n  \"oe_internet-postage-label_1.25x1.625in\",\n  \"oe_lg-address-label_1.4x3.5in\",\n  \"oe_video-top-label_1.8x3.1in\",\n  \"oe_multipurpose-label_2x2.3125in\",\n  \"oe_md-appointment-card_2x3.5in\",\n  \"oe_lg-multipurpose-label_2.125x.75in\",\n  \"oe_shipping-label_2.125x4in\",\n  \"oe_continuous-label_2.125x3600in\",\n  \"oe_md-multipurpose-label_2.25x1.25in\",\n  \"oe_media-label_2.25x2.25in\",\n  \"oe_2-up-address-label_2.25x3.5in\",\n  \"oe_name-badge-label_2.25x4in\",\n  \"oe_3-part-postage-label_2.25x7in\",\n  \"oe_2-part-internet-postage-label_2.25x7.5in\",\n  \"oe_shipping-label_2.3125x4in\",\n  \"oe_internet-postage-label_2.3125x7in\",\n  \"oe_internet-postage-confirmation-label_2.3125x10.5in\",\n  \"om_diskette-label_54x70mm\",\n\n  \"roll_max_2.3125x3600in\",\n  \"roll_min_0.25x0.25in\"\n};\n\nstatic const char * const lprint_dymo_tape[] =\n{\t\t\t\t\t// Supported media sizes for tape\n  \"oe_thin-1in-tape_0.25x1in\",\n  \"oe_thinner-1in-tape_0.375x1in\",\n  \"oe_medium-1in-tape_0.5x1in\",\n  \"oe_wider-1in-tape_0.75x1in\",\n  \"oe_wide-1in-tape_1x1in\",\n\n  \"oe_thin-2in-tape_0.25x2in\",\n  \"oe_thinner-2in-tape_0.375x2in\",\n  \"oe_medium-2in-tape_0.5x2in\",\n  \"oe_wider-2in-tape_0.75x2in\",\n  \"oe_wide-2in-tape_1x2in\",\n\n  \"oe_thin-3in-tape_0.25x3in\",\n  \"oe_thinner-3in-tape_0.375x3in\",\n  \"oe_medium-3in-tape_0.5x3in\",\n  \"oe_wider-3in-tape_0.75x3in\",\n  \"oe_wide-3in-tape_1x3in\",\n\n  \"roll_max_1x3600in\",\n  \"roll_min_0.25x1in\"\n};\n\n\n//\n// Local functions...\n//\n\nstatic void\tlprint_dymo_init(pappl_job_t *job, lprint_dymo_t *dymo);\nstatic bool\tlprint_dymo_printfile(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_dymo_rendjob(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_dymo_rendpage(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned page);\nstatic bool\tlprint_dymo_rstartjob(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_dymo_rstartpage(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned page);\nstatic bool\tlprint_dymo_rwriteline(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned y, const unsigned char *line);\nstatic bool\tlprint_dymo_status(pappl_printer_t *printer);\n\n\n//\n// 'lprintDYMO()' - Initialize the DYMO driver.\n//\n\nbool\t\t\t\t\t// O - `true` on success, `false` on error\nlprintDYMO(\n    pappl_system_t         *system,\t// I - System\n    const char             *driver_name,// I - Driver name\n    const char             *device_uri,\t// I - Device URI\n    const char             *device_id,\t// I - 1284 device ID\n    pappl_pr_driver_data_t *data,\t// I - Pointer to driver data\n    ipp_t                  **attrs,\t// O - Pointer to driver attributes\n    void                   *cbdata)\t// I - Callback data (not used)\n{\n  data->printfile_cb  = lprint_dymo_printfile;\n  data->rendjob_cb    = lprint_dymo_rendjob;\n  data->rendpage_cb   = lprint_dymo_rendpage;\n  data->rstartjob_cb  = lprint_dymo_rstartjob;\n  data->rstartpage_cb = lprint_dymo_rstartpage;\n  data->rwriteline_cb = lprint_dymo_rwriteline;\n  data->status_cb     = lprint_dymo_status;\n\n  if (!strncmp(driver_name, \"dymo_lm-\", 8) || strstr(driver_name, \"-tape\"))\n  {\n    // Vendor-specific format...\n    data->format = \"application/vnd.dymo-lm\";\n\n    // Set pages-per-minute based on 3\" of tape; not exact but\n    // we need to report something...\n    data->ppm = 20;\n\n    // Tape printers operate at 180dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 180;\n    data->y_resolution[0] = 180;\n\n    data->x_default = data->y_default = 180;\n\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    data->num_media = (int)(sizeof(lprint_dymo_tape) / sizeof(lprint_dymo_tape[0]));\n    memcpy(data->media, lprint_dymo_tape, sizeof(lprint_dymo_tape));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n  }\n  else\n  {\n    // Vendor-specific format...\n    data->format = \"application/vnd.dymo-lw\";\n\n    // Set pages-per-minute based on 1.125x3.5\" address labels; not exact but\n    // we need to report something...\n    if (strstr(driver_name, \"-turbo\"))\n      data->ppm = 60;\n    else\n      data->ppm = 30;\n\n    // Label printers operate at 300dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 300;\n    data->y_resolution[0] = 300;\n\n    data->x_default = data->y_default = 300;\n\n    // Media...\n    data->left_right = 100;\n    data->bottom_top = 525;\n\n    data->num_media = (int)(sizeof(lprint_dymo_label) / sizeof(lprint_dymo_label[0]));\n    memcpy(data->media, lprint_dymo_label, sizeof(lprint_dymo_label));\n\n    if (strstr(driver_name, \"-twin\"))\n    {\n      data->num_source = 2;\n      data->source[0]  = \"main-roll\";\n      data->source[1]  = \"alternate-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n      papplCopyString(data->media_ready[1].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[1].size_name));\n      papplCopyString(data->media_ready[1].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n    else\n    {\n      data->num_source = 1;\n      data->source[0]  = \"main-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n  }\n\n  data->tracking_supported = PAPPL_MEDIA_TRACKING_WEB;\n\n  data->num_type = 1;\n  data->type[0]  = \"labels\";\n\n  // Darkness/density support...\n  data->darkness_configured = 50;\n  data->darkness_supported  = 4;\n\n  return (true);\n}\n\n\n//\n// 'lprint_dymo_init()' - Initialize DYMO driver data based on the driver name...\n//\n\nstatic void\nlprint_dymo_init(\n    pappl_job_t   *job,\t\t\t// I - Job\n    lprint_dymo_t *dymo)\t\t// O - Driver data\n{\n  const char\t*driver_name;\t\t// Driver name\n\n\n  driver_name = papplPrinterGetDriverName(papplJobGetPrinter(job));\n\n  if (!strncmp(driver_name, \"dymo_lm-\", 8) || strstr(driver_name, \"-tape\"))\n  {\n    dymo->dlang = LPRINT_DLANG_TAPE;\n\n    if (!strcmp(driver_name, \"dymo_lw-duo-tape\") || !strcmp(driver_name, \"dymo_lw-duo-tape-128\") || !strcmp(driver_name, \"dymo_lw-450-duo-tape\"))\n    {\n      dymo->min_leader    = 61;\n      dymo->normal_leader = 14;\n    }\n    else if (!strcmp(driver_name, \"dymo_lm-pnp\"))\n    {\n      dymo->min_leader    = 58;\n      dymo->normal_leader = 17;\n    }\n    else\n    {\n      dymo->min_leader    = 55;\n      dymo->normal_leader = 20;\n    }\n  }\n  else\n  {\n    dymo->dlang = LPRINT_DLANG_LABEL;\n  }\n}\n\n\n//\n// 'lprint_dymo_printfile()' - Print a file.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_printfile(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  int\t\tfd;\t\t\t// Input file\n  ssize_t\tbytes;\t\t\t// Bytes read/written\n  char\t\tbuffer[65536];\t\t// Read/write buffer\n  lprint_dymo_t\tdymo;\t\t\t// Driver data\n\n\n  // Initialize driver data...\n  lprint_dymo_init(job, &dymo);\n\n  // Reset the printer...\n  lprint_dymo_rstartjob(job, options, device);\n\n  // Copy the raw file...\n  papplJobSetImpressions(job, 1);\n\n  if ((fd  = open(papplJobGetFilename(job), O_RDONLY)) < 0)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to open print file '%s': %s\", papplJobGetFilename(job), strerror(errno));\n    return (false);\n  }\n\n  while ((bytes = read(fd, buffer, sizeof(buffer))) > 0)\n  {\n    if (papplDeviceWrite(device, buffer, (size_t)bytes) < 0)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to send %d bytes to printer.\", (int)bytes);\n      close(fd);\n      return (false);\n    }\n  }\n  close(fd);\n\n  lprint_dymo_rstartjob(job, options, device);\n\n  papplJobSetImpressionsCompleted(job, 1);\n\n  return (true);\n}\n\n\n//\n// 'lprint_dymo_rend()' - End a job.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rendjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_dymo_t\t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n\n  (void)options;\n\n  free(dymo);\n  papplJobSetData(job, NULL);\n\n  return (true);\n}\n\n\n//\n// 'lprint_dymo_rendpage()' - End a page.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rendpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_dymo_t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n  char\t\tbuffer[256];\t\t// Command buffer\n\n\n  (void)page;\n\n  lprint_dymo_rwriteline(job, options, device, options->header.cupsHeight, NULL);\n\n  switch (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n        break;\n\n    case LPRINT_DLANG_TAPE :\n\t// Skip and cut...\n        papplDevicePrintf(device, \"\\033D%c\", 0);\n        memset(buffer, 0x16, dymo->min_leader);\n        papplDeviceWrite(device, buffer, dymo->min_leader);\n        break;\n  }\n\n  // Eject/cut\n  papplDevicePuts(device, \"\\033E\");\n  papplDeviceFlush(device);\n\n  // Free memory and return...\n  lprintDitherFree(&dymo->dither);\n\n  return (true);\n}\n\n\n//\n// 'lprint_dymo_rstartjob()' - Start a job.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rstartjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_dymo_t\t\t*dymo = (lprint_dymo_t *)calloc(1, sizeof(lprint_dymo_t));\n\t\t\t\t\t// DYMO driver data\n  char\t\t\tbuffer[23];\t// Buffer for reset command\n\n\n  (void)options;\n\n  // Initialize driver data...\n  lprint_dymo_init(job, dymo);\n\n  papplJobSetData(job, dymo);\n\n  // Reset the printer...\n  switch (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n\tpapplDevicePuts(device, \"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033@\");\n        break;\n\n    case LPRINT_DLANG_TAPE :\n        // Send nul bytes to clear input buffer...\n        memset(buffer, 0, sizeof(buffer));\n        papplDeviceWrite(device, buffer, sizeof(buffer));\n\n        // Set tape color to black on white...\n        papplDevicePrintf(device, \"\\033C%c\", 0);\n        break;\n  }\n\n\n  return (true);\n}\n\n\n//\n// 'lprint_dymo_rstartpage()' - Start a page.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rstartpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  pappl_pr_driver_data_t data;\t\t// Generic driver data\n  lprint_dymo_t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n  int\t\tdarkness = options->darkness_configured + options->print_darkness;\n\t\t\t\t\t// Combined density\n  const char\t*density = \"cdeg\";\t// Density codes\n  int\t\ti;\t\t\t// Looping var\n  char\t\tbuffer[256];\t\t// Command buffer\n  double\tout_gamma = 1.0;\t// Output gamma correction\n\n\n\n  (void)page;\n\n  if (options->header.cupsWidth > 2048)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Raster data too large for printer.\");\n    return (false);\n  }\n\n  if (options->header.HWResolution[0] == 300)\n    out_gamma = 1.2;\n\n  if (!lprintDitherAlloc(&dymo->dither, job, options, CUPS_CSPACE_K, out_gamma))\n    return (false);\n\n  dymo->feed = 0;\n\n  switch (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n\tpapplDevicePrintf(device, \"\\033Q%c%c\", 0, 0);\n\tpapplDevicePrintf(device, \"\\033B%c\", 0);\n\tpapplDevicePrintf(device, \"\\033L%c%c\", options->header.cupsHeight >> 8, options->header.cupsHeight);\n\tpapplDevicePrintf(device, \"\\033D%c\", dymo->dither.out_width);\n\n\tpapplPrinterGetDriverData(papplJobGetPrinter(job), &data);\n\n\t// Match roll number to loaded media...\n\tfor (i = 0; i < data.num_source; i ++)\n\t{\n\t  if (data.media_ready[i].size_width == options->media.size_width && data.media_ready[i].size_length == options->media.size_length)\n\t    break;\n\t}\n\n\tif (i >= data.num_source)\n\t{\n\t  // No match, so use what the client sent...\n\t  i = !strcmp(options->media.source, \"alternate-roll\");\n\t}\n\n\tpapplDevicePrintf(device, \"\\033q%d\", i + 1);\n\n\tif (darkness < 0)\n\t  darkness = 0;\n\telse if (darkness > 100)\n\t  darkness = 100;\n\n\tpapplDevicePrintf(device, \"\\033%c\", density[3 * darkness / 100]);\n\tbreak;\n\n    case LPRINT_DLANG_TAPE :\n        // Set line width...\n        papplDevicePrintf(device, \"\\033D%c\", 0);\n\n        // Feed for the leader...\n\tmemset(buffer, 0x16, dymo->normal_leader);\n\tpapplDeviceWrite(device, buffer, dymo->normal_leader);\n\n        // Set indentation...\n        papplDevicePrintf(device, \"\\033B%c\", 0);\n        break;\n  }\n\n  return (true);\n}\n\n\n//\n// 'lprint_dymo_rwriteline()' - Write a raster line.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rwriteline(\n    pappl_job_t         *job,\t\t// I - Job\n    pappl_pr_options_t  *options,\t// I - Job options\n    pappl_device_t      *device,\t// I - Output device\n    unsigned            y,\t\t// I - Line number\n    const unsigned char *line)\t\t// I - Line\n{\n  lprint_dymo_t\t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n  unsigned char\t\tbyte;\t\t// Byte to write\n\n\n  if (!lprintDitherLine(&dymo->dither, y, line))\n    return (true);\n\n  if (dymo->dither.output[0] || memcmp(dymo->dither.output, dymo->dither.output + 1, dymo->dither.out_width - 1))\n  {\n    // Not a blank line\n    switch (dymo->dlang)\n    {\n      case LPRINT_DLANG_LABEL :\n\t  // Feed for any prior blank lines...\n\t  if (dymo->feed)\n\t  {\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t    papplDevicePrintf(device, \"\\033f\\001%c\", dymo->feed);\n\t    dymo->feed = 0;\n\t  }\n\n\t  // Then write the non-blank line...\n\t  byte = 0x16;\n\t  papplDeviceWrite(device, &byte, 1);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n\t  break;\n\n      case LPRINT_DLANG_TAPE :\n\t  if (dymo->feed)\n\t  {\n\t    unsigned char buffer[256];\t// Write buffer\n\n            papplDevicePrintf(device, \"\\033D%c\", 0);\n\t    memset(buffer, 0x16, sizeof(buffer));\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n            if (dymo->feed > 0)\n            {\n\t      papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n\t  papplDevicePrintf(device, \"\\033D%c\\026\", dymo->dither.out_width);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n          break;\n    }\n  }\n  else\n  {\n    // Blank line, accumulate the feed...\n    dymo->feed ++;\n  }\n\n  return (true);\n}\n\n\n//\n// 'lprint_dymo_status()' - Get current printer status.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_status(\n    pappl_printer_t *printer)\t\t// I - Printer\n{\n  (void)printer;\n\n  return (true);\n}\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "static_const_char_pointer_array",
    "start_line": 1,
    "end_line": 616,
    "code": "//\n// DYMO driver for LPrint, a Label Printer Application\n//\n// Copyright \u00a9\u00a02019-2025 by Michael R Sweet.\n// Copyright \u00a9\u00a02007-2019 by Apple Inc.\n// Copyright \u00a9\u00a02001-2007 by Easy Software Products.\n//\n// Licensed under Apache License v2.0.  See the file \"LICENSE\" for more\n// information.\n//\n\n#include \"lprint.h\"\n\n\n//\n// Local types...\n//\n\ntypedef enum lprint_dlang_e\n{\n  LPRINT_DLANG_LABEL,\t\t\t// Label printing\n  LPRINT_DLANG_TAPE\t\t\t// Tape printing\n} lprint_dlang_t;\n\ntypedef struct lprint_dymo_s\t\t// DYMO driver data\n{\n  lprint_dlang_t dlang;\t\t\t// Printer language\n  lprint_dither_t dither;\t\t// Dithering buffer\n  int\t\tfeed,\t\t\t// Accumulated feed\n\t\tmin_leader,\t\t// Leader distance for cut\n\t\tnormal_leader;\t\t// Leader distance for top of label\n} lprint_dymo_t;\n\n\n//\n// Local globals...\n//\n\nstatic const char * const lprint_dymo_label[] =\n{\t\t\t\t\t// Supported media sizes for labels\n  \"oe_thin-multipurpose-label_0.375x2.8125in\",\n  \"oe_library-barcode-label_0.5x1.875in\",\n  \"oe_hanging-file-tab-insert_0.5625x2in\",\n  \"oe_file-folder-label_0.5625x3.4375in\",\n  \"oe_return-address-label_0.75x2in\",\n  \"oe_barcode-label_0.75x2.5in\",\n  \"oe_video-spine-label_0.75x5.875in\",\n  \"oe_price-tag-label_0.9375x0.875in\",\n  \"oe_square-multipurpose-label_1x1in\",\n  \"oe_book-spine-label_1x1.5in\",\n  \"oe_sm-multipurpose-label_1x2.125in\",\n  \"oe_2-up-file-folder-label_1.125x3.4375in\",\n  \"oe_address-label_1.125x3.5in\",\n  \"oe_internet-postage-label_1.25x1.625in\",\n  \"oe_lg-address-label_1.4x3.5in\",\n  \"oe_video-top-label_1.8x3.1in\",\n  \"oe_multipurpose-label_2x2.3125in\",\n  \"oe_md-appointment-card_2x3.5in\",\n  \"oe_lg-multipurpose-label_2.125x.75in\",\n  \"oe_shipping-label_2.125x4in\",\n  \"oe_continuous-label_2.125x3600in\",\n  \"oe_md-multipurpose-label_2.25x1.25in\",\n  \"oe_media-label_2.25x2.25in\",\n  \"oe_2-up-address-label_2.25x3.5in\",\n  \"oe_name-badge-label_2.25x4in\",\n  \"oe_3-part-postage-label_2.25x7in\",\n  \"oe_2-part-internet-postage-label_2.25x7.5in\",\n  \"oe_shipping-label_2.3125x4in\",\n  \"oe_internet-postage-label_2.3125x7in\",\n  \"oe_internet-postage-confirmation-label_2.3125x10.5in\",\n  \"om_diskette-label_54x70mm\",\n\n  \"roll_max_2.3125x3600in\",\n  \"roll_min_0.25x0.25in\"\n};\n\nstatic const char * const lprint_dymo_tape[] =\n{\t\t\t\t\t// Supported media sizes for tape\n  \"oe_thin-1in-tape_0.25x1in\",\n  \"oe_thinner-1in-tape_0.375x1in\",\n  \"oe_medium-1in-tape_0.5x1in\",\n  \"oe_wider-1in-tape_0.75x1in\",\n  \"oe_wide-1in-tape_1x1in\",\n\n  \"oe_thin-2in-tape_0.25x2in\",\n  \"oe_thinner-2in-tape_0.375x2in\",\n  \"oe_medium-2in-tape_0.5x2in\",\n  \"oe_wider-2in-tape_0.75x2in\",\n  \"oe_wide-2in-tape_1x2in\",\n\n  \"oe_thin-3in-tape_0.25x3in\",\n  \"oe_thinner-3in-tape_0.375x3in\",\n  \"oe_medium-3in-tape_0.5x3in\",\n  \"oe_wider-3in-tape_0.75x3in\",\n  \"oe_wide-3in-tape_1x3in\",\n\n  \"roll_max_1x3600in\",\n  \"roll_min_0.25x1in\"\n};\n\n\n//\n// Local functions...\n//\n\nstatic void\tlprint_dymo_init(pappl_job_t *job, lprint_dymo_t *dymo);\nstatic bool\tlprint_dymo_printfile(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_dymo_rendjob(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_dymo_rendpage(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned page);\nstatic bool\tlprint_dymo_rstartjob(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device);\nstatic bool\tlprint_dymo_rstartpage(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned page);\nstatic bool\tlprint_dymo_rwriteline(pappl_job_t *job, pappl_pr_options_t *options, pappl_device_t *device, unsigned y, const unsigned char *line);\nstatic bool\tlprint_dymo_status(pappl_printer_t *printer);\n\n\n//\n// 'lprintDYMO()' - Initialize the DYMO driver.\n//\n\nbool\t\t\t\t\t// O - `true` on success, `false` on error\nlprintDYMO(\n    pappl_system_t         *system,\t// I - System\n    const char             *driver_name,// I - Driver name\n    const char             *device_uri,\t// I - Device URI\n    const char             *device_id,\t// I - 1284 device ID\n    pappl_pr_driver_data_t *data,\t// I - Pointer to driver data\n    ipp_t                  **attrs,\t// O - Pointer to driver attributes\n    void                   *cbdata)\t// I - Callback data (not used)\n{\n  data->printfile_cb  = lprint_dymo_printfile;\n  data->rendjob_cb    = lprint_dymo_rendjob;\n  data->rendpage_cb   = lprint_dymo_rendpage;\n  data->rstartjob_cb  = lprint_dymo_rstartjob;\n  data->rstartpage_cb = lprint_dymo_rstartpage;\n  data->rwriteline_cb = lprint_dymo_rwriteline;\n  data->status_cb     = lprint_dymo_status;\n\n  if (!strncmp(driver_name, \"dymo_lm-\", 8) || strstr(driver_name, \"-tape\"))\n  {\n    // Vendor-specific format...\n    data->format = \"application/vnd.dymo-lm\";\n\n    // Set pages-per-minute based on 3\" of tape; not exact but\n    // we need to report something...\n    data->ppm = 20;\n\n    // Tape printers operate at 180dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 180;\n    data->y_resolution[0] = 180;\n\n    data->x_default = data->y_default = 180;\n\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    data->num_media = (int)(sizeof(lprint_dymo_tape) / sizeof(lprint_dymo_tape[0]));\n    memcpy(data->media, lprint_dymo_tape, sizeof(lprint_dymo_tape));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n  }\n  else\n  {\n    // Vendor-specific format...\n    data->format = \"application/vnd.dymo-lw\";\n\n    // Set pages-per-minute based on 1.125x3.5\" address labels; not exact but\n    // we need to report something...\n    if (strstr(driver_name, \"-turbo\"))\n      data->ppm = 60;\n    else\n      data->ppm = 30;\n\n    // Label printers operate at 300dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 300;\n    data->y_resolution[0] = 300;\n\n    data->x_default = data->y_default = 300;\n\n    // Media...\n    data->left_right = 100;\n    data->bottom_top = 525;\n\n    data->num_media = (int)(sizeof(lprint_dymo_label) / sizeof(lprint_dymo_label[0]));\n    memcpy(data->media, lprint_dymo_label, sizeof(lprint_dymo_label));\n\n    if (strstr(driver_name, \"-twin\"))\n    {\n      data->num_source = 2;\n      data->source[0]  = \"main-roll\";\n      data->source[1]  = \"alternate-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n      papplCopyString(data->media_ready[1].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[1].size_name));\n      papplCopyString(data->media_ready[1].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n    else\n    {\n      data->num_source = 1;\n      data->source[0]  = \"main-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n  }\n\n  data->tracking_supported = PAPPL_MEDIA_TRACKING_WEB;\n\n  data->num_type = 1;\n  data->type[0]  = \"labels\";\n\n  // Darkness/density support...\n  data->darkness_configured = 50;\n  data->darkness_supported  = 4;\n\n  return (true);\n}\n\n\n//\n// 'lprint_dymo_init()' - Initialize DYMO driver data based on the driver name...\n//\n\nstatic void\nlprint_dymo_init(\n    pappl_job_t   *job,\t\t\t// I - Job\n    lprint_dymo_t *dymo)\t\t// O - Driver data\n{\n  const char\t*driver_name;\t\t// Driver name\n\n\n  driver_name = papplPrinterGetDriverName(papplJobGetPrinter(job));\n\n  if (!strncmp(driver_name, \"dymo_lm-\", 8) || strstr(driver_name, \"-tape\"))\n  {\n    dymo->dlang = LPRINT_DLANG_TAPE;\n\n    if (!strcmp(driver_name, \"dymo_lw-duo-tape\") || !strcmp(driver_name, \"dymo_lw-duo-tape-128\") || !strcmp(driver_name, \"dymo_lw-450-duo-tape\"))\n    {\n      dymo->min_leader    = 61;\n      dymo->normal_leader = 14;\n    }\n    else if (!strcmp(driver_name, \"dymo_lm-pnp\"))\n    {\n      dymo->min_leader    = 58;\n      dymo->normal_leader = 17;\n    }\n    else\n    {\n      dymo->min_leader    = 55;\n      dymo->normal_leader = 20;\n    }\n  }\n  else\n  {\n    dymo->dlang = LPRINT_DLANG_LABEL;\n  }\n}\n\n\n//\n// 'lprint_dymo_printfile()' - Print a file.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_printfile(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  int\t\tfd;\t\t\t// Input file\n  ssize_t\tbytes;\t\t\t// Bytes read/written\n  char\t\tbuffer[65536];\t\t// Read/write buffer\n  lprint_dymo_t\tdymo;\t\t\t// Driver data\n\n\n  // Initialize driver data...\n  lprint_dymo_init(job, &dymo);\n\n  // Reset the printer...\n  lprint_dymo_rstartjob(job, options, device);\n\n  // Copy the raw file...\n  papplJobSetImpressions(job, 1);\n\n  if ((fd  = open(papplJobGetFilename(job), O_RDONLY)) < 0)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to open print file '%s': %s\", papplJobGetFilename(job), strerror(errno));\n    return (false);\n  }\n\n  while ((bytes = read(fd, buffer, sizeof(buffer))) > 0)\n  {\n    if (papplDeviceWrite(device, buffer, (size_t)bytes) < 0)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to send %d bytes to printer.\", (int)bytes);\n      close(fd);\n      return (false);\n    }\n  }\n  close(fd);\n\n  lprint_dymo_rstartjob(job, options, device);\n\n  papplJobSetImpressionsCompleted(job, 1);\n\n  return (true);\n}\n\n\n//\n// 'lprint_dymo_rend()' - End a job.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rendjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_dymo_t\t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n\n  (void)options;\n\n  free(dymo);\n  papplJobSetData(job, NULL);\n\n  return (true);\n}\n\n\n//\n// 'lprint_dymo_rendpage()' - End a page.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rendpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_dymo_t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n  char\t\tbuffer[256];\t\t// Command buffer\n\n\n  (void)page;\n\n  lprint_dymo_rwriteline(job, options, device, options->header.cupsHeight, NULL);\n\n  switch (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n        break;\n\n    case LPRINT_DLANG_TAPE :\n\t// Skip and cut...\n        papplDevicePrintf(device, \"\\033D%c\", 0);\n        memset(buffer, 0x16, dymo->min_leader);\n        papplDeviceWrite(device, buffer, dymo->min_leader);\n        break;\n  }\n\n  // Eject/cut\n  papplDevicePuts(device, \"\\033E\");\n  papplDeviceFlush(device);\n\n  // Free memory and return...\n  lprintDitherFree(&dymo->dither);\n\n  return (true);\n}\n\n\n//\n// 'lprint_dymo_rstartjob()' - Start a job.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rstartjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_dymo_t\t\t*dymo = (lprint_dymo_t *)calloc(1, sizeof(lprint_dymo_t));\n\t\t\t\t\t// DYMO driver data\n  char\t\t\tbuffer[23];\t// Buffer for reset command\n\n\n  (void)options;\n\n  // Initialize driver data...\n  lprint_dymo_init(job, dymo);\n\n  papplJobSetData(job, dymo);\n\n  // Reset the printer...\n  switch (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n\tpapplDevicePuts(device, \"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033@\");\n        break;\n\n    case LPRINT_DLANG_TAPE :\n        // Send nul bytes to clear input buffer...\n        memset(buffer, 0, sizeof(buffer));\n        papplDeviceWrite(device, buffer, sizeof(buffer));\n\n        // Set tape color to black on white...\n        papplDevicePrintf(device, \"\\033C%c\", 0);\n        break;\n  }\n\n\n  return (true);\n}\n\n\n//\n// 'lprint_dymo_rstartpage()' - Start a page.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rstartpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  pappl_pr_driver_data_t data;\t\t// Generic driver data\n  lprint_dymo_t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n  int\t\tdarkness = options->darkness_configured + options->print_darkness;\n\t\t\t\t\t// Combined density\n  const char\t*density = \"cdeg\";\t// Density codes\n  int\t\ti;\t\t\t// Looping var\n  char\t\tbuffer[256];\t\t// Command buffer\n  double\tout_gamma = 1.0;\t// Output gamma correction\n\n\n\n  (void)page;\n\n  if (options->header.cupsWidth > 2048)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Raster data too large for printer.\");\n    return (false);\n  }\n\n  if (options->header.HWResolution[0] == 300)\n    out_gamma = 1.2;\n\n  if (!lprintDitherAlloc(&dymo->dither, job, options, CUPS_CSPACE_K, out_gamma))\n    return (false);\n\n  dymo->feed = 0;\n\n  switch (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n\tpapplDevicePrintf(device, \"\\033Q%c%c\", 0, 0);\n\tpapplDevicePrintf(device, \"\\033B%c\", 0);\n\tpapplDevicePrintf(device, \"\\033L%c%c\", options->header.cupsHeight >> 8, options->header.cupsHeight);\n\tpapplDevicePrintf(device, \"\\033D%c\", dymo->dither.out_width);\n\n\tpapplPrinterGetDriverData(papplJobGetPrinter(job), &data);\n\n\t// Match roll number to loaded media...\n\tfor (i = 0; i < data.num_source; i ++)\n\t{\n\t  if (data.media_ready[i].size_width == options->media.size_width && data.media_ready[i].size_length == options->media.size_length)\n\t    break;\n\t}\n\n\tif (i >= data.num_source)\n\t{\n\t  // No match, so use what the client sent...\n\t  i = !strcmp(options->media.source, \"alternate-roll\");\n\t}\n\n\tpapplDevicePrintf(device, \"\\033q%d\", i + 1);\n\n\tif (darkness < 0)\n\t  darkness = 0;\n\telse if (darkness > 100)\n\t  darkness = 100;\n\n\tpapplDevicePrintf(device, \"\\033%c\", density[3 * darkness / 100]);\n\tbreak;\n\n    case LPRINT_DLANG_TAPE :\n        // Set line width...\n        papplDevicePrintf(device, \"\\033D%c\", 0);\n\n        // Feed for the leader...\n\tmemset(buffer, 0x16, dymo->normal_leader);\n\tpapplDeviceWrite(device, buffer, dymo->normal_leader);\n\n        // Set indentation...\n        papplDevicePrintf(device, \"\\033B%c\", 0);\n        break;\n  }\n\n  return (true);\n}\n\n\n//\n// 'lprint_dymo_rwriteline()' - Write a raster line.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rwriteline(\n    pappl_job_t         *job,\t\t// I - Job\n    pappl_pr_options_t  *options,\t// I - Job options\n    pappl_device_t      *device,\t// I - Output device\n    unsigned            y,\t\t// I - Line number\n    const unsigned char *line)\t\t// I - Line\n{\n  lprint_dymo_t\t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n  unsigned char\t\tbyte;\t\t// Byte to write\n\n\n  if (!lprintDitherLine(&dymo->dither, y, line))\n    return (true);\n\n  if (dymo->dither.output[0] || memcmp(dymo->dither.output, dymo->dither.output + 1, dymo->dither.out_width - 1))\n  {\n    // Not a blank line\n    switch (dymo->dlang)\n    {\n      case LPRINT_DLANG_LABEL :\n\t  // Feed for any prior blank lines...\n\t  if (dymo->feed)\n\t  {\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t    papplDevicePrintf(device, \"\\033f\\001%c\", dymo->feed);\n\t    dymo->feed = 0;\n\t  }\n\n\t  // Then write the non-blank line...\n\t  byte = 0x16;\n\t  papplDeviceWrite(device, &byte, 1);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n\t  break;\n\n      case LPRINT_DLANG_TAPE :\n\t  if (dymo->feed)\n\t  {\n\t    unsigned char buffer[256];\t// Write buffer\n\n            papplDevicePrintf(device, \"\\033D%c\", 0);\n\t    memset(buffer, 0x16, sizeof(buffer));\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n            if (dymo->feed > 0)\n            {\n\t      papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n\t  papplDevicePrintf(device, \"\\033D%c\\026\", dymo->dither.out_width);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n          break;\n    }\n  }\n  else\n  {\n    // Blank line, accumulate the feed...\n    dymo->feed ++;\n  }\n\n  return (true);\n}\n\n\n//\n// 'lprint_dymo_status()' - Get current printer status.\n//\n\nstatic bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_status(\n    pappl_printer_t *printer)\t\t// I - Printer\n{\n  (void)printer;\n\n  return (true);\n}\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "include",
    "start_line": 12,
    "end_line": 13,
    "code": "de \"lprint.h\"\n\n\n//\n/",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "typedef",
    "start_line": 19,
    "end_line": 23,
    "code": "f enum lprint_dlang_e\n{\n  LPRINT_DLANG_LABEL,\t\t\t// Label printing\n  LPRINT_DLANG_TAPE\t\t\t// Tape printing\n} lprint_dlang_t;\n\ntype",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "enum",
    "start_line": 19,
    "end_line": 23,
    "code": "print_dlang_e\n{\n  LPRINT_DLANG_LABEL,\t\t\t// Label printing\n  LPRINT_DLANG_TAPE\t\t\t// Tape printing\n} lprin",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "typedef",
    "start_line": 25,
    "end_line": 32,
    "code": "f struct lprint_dymo_s\t\t// DYMO driver data\n{\n  lprint_dlang_t dlang;\t\t\t// Printer language\n  lprint_dither_t dither;\t\t// Dithering buffer\n  int\t\tfeed,\t\t\t// Accumulated feed\n\t\tmin_leader,\t\t// Leader distance for cut\n\t\tnormal_leader;\t\t// Leader distance for top of label\n} lprint_dymo_t;\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct",
    "name": "lprint_dymo_s",
    "hierarchy": "lprint_dymo_s",
    "start_line": 25,
    "end_line": 32,
    "code": " lprint_dymo_s\t\t// DYMO driver data\n{\n  lprint_dlang_t dlang;\t\t\t// Printer language\n  lprint_dither_t dither;\t\t// Dithering buffer\n  int\t\tfeed,\t\t\t// Accumulated feed\n\t\tmin_leader,\t\t// Leader distance for cut\n\t\tnormal_leader;\t\t// Leader distance for top of label\n} lprin",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "global_variable",
    "start_line": 39,
    "end_line": 75,
    "code": " const char * const lprint_dymo_label[] =\n{\t\t\t\t\t// Supported media sizes for labels\n  \"oe_thin-multipurpose-label_0.375x2.8125in\",\n  \"oe_library-barcode-label_0.5x1.875in\",\n  \"oe_hanging-file-tab-insert_0.5625x2in\",\n  \"oe_file-folder-label_0.5625x3.4375in\",\n  \"oe_return-address-label_0.75x2in\",\n  \"oe_barcode-label_0.75x2.5in\",\n  \"oe_video-spine-label_0.75x5.875in\",\n  \"oe_price-tag-label_0.9375x0.875in\",\n  \"oe_square-multipurpose-label_1x1in\",\n  \"oe_book-spine-label_1x1.5in\",\n  \"oe_sm-multipurpose-label_1x2.125in\",\n  \"oe_2-up-file-folder-label_1.125x3.4375in\",\n  \"oe_address-label_1.125x3.5in\",\n  \"oe_internet-postage-label_1.25x1.625in\",\n  \"oe_lg-address-label_1.4x3.5in\",\n  \"oe_video-top-label_1.8x3.1in\",\n  \"oe_multipurpose-label_2x2.3125in\",\n  \"oe_md-appointment-card_2x3.5in\",\n  \"oe_lg-multipurpose-label_2.125x.75in\",\n  \"oe_shipping-label_2.125x4in\",\n  \"oe_continuous-label_2.125x3600in\",\n  \"oe_md-multipurpose-label_2.25x1.25in\",\n  \"oe_media-label_2.25x2.25in\",\n  \"oe_2-up-address-label_2.25x3.5in\",\n  \"oe_name-badge-label_2.25x4in\",\n  \"oe_3-part-postage-label_2.25x7in\",\n  \"oe_2-part-internet-postage-label_2.25x7.5in\",\n  \"oe_shipping-label_2.3125x4in\",\n  \"oe_internet-postage-label_2.3125x7in\",\n  \"oe_internet-postage-confirmation-label_2.3125x10.5in\",\n  \"om_diskette-label_54x70mm\",\n\n  \"roll_max_2.3125x3600in\",\n  \"roll_min_0.25x0.25in\"\n};\n\nstat",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 39,
    "end_line": 75,
    "code": " const char * const lprint_dymo_label[] =\n{\t\t\t\t\t// Supported media sizes for labels\n  \"oe_thin-multipurpose-label_0.375x2.8125in\",\n  \"oe_library-barcode-label_0.5x1.875in\",\n  \"oe_hanging-file-tab-insert_0.5625x2in\",\n  \"oe_file-folder-label_0.5625x3.4375in\",\n  \"oe_return-address-label_0.75x2in\",\n  \"oe_barcode-label_0.75x2.5in\",\n  \"oe_video-spine-label_0.75x5.875in\",\n  \"oe_price-tag-label_0.9375x0.875in\",\n  \"oe_square-multipurpose-label_1x1in\",\n  \"oe_book-spine-label_1x1.5in\",\n  \"oe_sm-multipurpose-label_1x2.125in\",\n  \"oe_2-up-file-folder-label_1.125x3.4375in\",\n  \"oe_address-label_1.125x3.5in\",\n  \"oe_internet-postage-label_1.25x1.625in\",\n  \"oe_lg-address-label_1.4x3.5in\",\n  \"oe_video-top-label_1.8x3.1in\",\n  \"oe_multipurpose-label_2x2.3125in\",\n  \"oe_md-appointment-card_2x3.5in\",\n  \"oe_lg-multipurpose-label_2.125x.75in\",\n  \"oe_shipping-label_2.125x4in\",\n  \"oe_continuous-label_2.125x3600in\",\n  \"oe_md-multipurpose-label_2.25x1.25in\",\n  \"oe_media-label_2.25x2.25in\",\n  \"oe_2-up-address-label_2.25x3.5in\",\n  \"oe_name-badge-label_2.25x4in\",\n  \"oe_3-part-postage-label_2.25x7in\",\n  \"oe_2-part-internet-postage-label_2.25x7.5in\",\n  \"oe_shipping-label_2.3125x4in\",\n  \"oe_internet-postage-label_2.3125x7in\",\n  \"oe_internet-postage-confirmation-label_2.3125x10.5in\",\n  \"om_diskette-label_54x70mm\",\n\n  \"roll_max_2.3125x3600in\",\n  \"roll_min_0.25x0.25in\"\n};\n\nstat",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 39,
    "end_line": 75,
    "code": "t lprint_dymo_label[] =\n{\t\t\t\t\t// Supported media sizes for labels\n  \"oe_thin-multipurpose-label_0.375x2.8125in\",\n  \"oe_library-barcode-label_0.5x1.875in\",\n  \"oe_hanging-file-tab-insert_0.5625x2in\",\n  \"oe_file-folder-label_0.5625x3.4375in\",\n  \"oe_return-address-label_0.75x2in\",\n  \"oe_barcode-label_0.75x2.5in\",\n  \"oe_video-spine-label_0.75x5.875in\",\n  \"oe_price-tag-label_0.9375x0.875in\",\n  \"oe_square-multipurpose-label_1x1in\",\n  \"oe_book-spine-label_1x1.5in\",\n  \"oe_sm-multipurpose-label_1x2.125in\",\n  \"oe_2-up-file-folder-label_1.125x3.4375in\",\n  \"oe_address-label_1.125x3.5in\",\n  \"oe_internet-postage-label_1.25x1.625in\",\n  \"oe_lg-address-label_1.4x3.5in\",\n  \"oe_video-top-label_1.8x3.1in\",\n  \"oe_multipurpose-label_2x2.3125in\",\n  \"oe_md-appointment-card_2x3.5in\",\n  \"oe_lg-multipurpose-label_2.125x.75in\",\n  \"oe_shipping-label_2.125x4in\",\n  \"oe_continuous-label_2.125x3600in\",\n  \"oe_md-multipurpose-label_2.25x1.25in\",\n  \"oe_media-label_2.25x2.25in\",\n  \"oe_2-up-address-label_2.25x3.5in\",\n  \"oe_name-badge-label_2.25x4in\",\n  \"oe_3-part-postage-label_2.25x7in\",\n  \"oe_2-part-internet-postage-label_2.25x7.5in\",\n  \"oe_shipping-label_2.3125x4in\",\n  \"oe_internet-postage-label_2.3125x7in\",\n  \"oe_internet-postage-confirmation-label_2.3125x10.5in\",\n  \"om_diskette-label_54x70mm\",\n\n  \"roll_max_2.3125x3600in\",\n  \"roll_min_0.25x0.25in\"\n};\n\nsta",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "global_variable",
    "start_line": 77,
    "end_line": 99,
    "code": " const char * const lprint_dymo_tape[] =\n{\t\t\t\t\t// Supported media sizes for tape\n  \"oe_thin-1in-tape_0.25x1in\",\n  \"oe_thinner-1in-tape_0.375x1in\",\n  \"oe_medium-1in-tape_0.5x1in\",\n  \"oe_wider-1in-tape_0.75x1in\",\n  \"oe_wide-1in-tape_1x1in\",\n\n  \"oe_thin-2in-tape_0.25x2in\",\n  \"oe_thinner-2in-tape_0.375x2in\",\n  \"oe_medium-2in-tape_0.5x2in\",\n  \"oe_wider-2in-tape_0.75x2in\",\n  \"oe_wide-2in-tape_1x2in\",\n\n  \"oe_thin-3in-tape_0.25x3in\",\n  \"oe_thinner-3in-tape_0.375x3in\",\n  \"oe_medium-3in-tape_0.5x3in\",\n  \"oe_wider-3in-tape_0.75x3in\",\n  \"oe_wide-3in-tape_1x3in\",\n\n  \"roll_max_1x3600in\",\n  \"roll_min_0.25x1in\"\n};\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 77,
    "end_line": 99,
    "code": " const char * const lprint_dymo_tape[] =\n{\t\t\t\t\t// Supported media sizes for tape\n  \"oe_thin-1in-tape_0.25x1in\",\n  \"oe_thinner-1in-tape_0.375x1in\",\n  \"oe_medium-1in-tape_0.5x1in\",\n  \"oe_wider-1in-tape_0.75x1in\",\n  \"oe_wide-1in-tape_1x1in\",\n\n  \"oe_thin-2in-tape_0.25x2in\",\n  \"oe_thinner-2in-tape_0.375x2in\",\n  \"oe_medium-2in-tape_0.5x2in\",\n  \"oe_wider-2in-tape_0.75x2in\",\n  \"oe_wide-2in-tape_1x2in\",\n\n  \"oe_thin-3in-tape_0.25x3in\",\n  \"oe_thinner-3in-tape_0.375x3in\",\n  \"oe_medium-3in-tape_0.5x3in\",\n  \"oe_wider-3in-tape_0.75x3in\",\n  \"oe_wide-3in-tape_1x3in\",\n\n  \"roll_max_1x3600in\",\n  \"roll_min_0.25x1in\"\n};\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 77,
    "end_line": 99,
    "code": "t lprint_dymo_tape[] =\n{\t\t\t\t\t// Supported media sizes for tape\n  \"oe_thin-1in-tape_0.25x1in\",\n  \"oe_thinner-1in-tape_0.375x1in\",\n  \"oe_medium-1in-tape_0.5x1in\",\n  \"oe_wider-1in-tape_0.75x1in\",\n  \"oe_wide-1in-tape_1x1in\",\n\n  \"oe_thin-2in-tape_0.25x2in\",\n  \"oe_thinner-2in-tape_0.375x2in\",\n  \"oe_medium-2in-tape_0.5x2in\",\n  \"oe_wider-2in-tape_0.75x2in\",\n  \"oe_wide-2in-tape_1x2in\",\n\n  \"oe_thin-3in-tape_0.25x3in\",\n  \"oe_thinner-3in-tape_0.375x3in\",\n  \"oe_medium-3in-tape_0.5x3in\",\n  \"oe_wider-3in-tape_0.75x3in\",\n  \"oe_wide-3in-tape_1x3in\",\n\n  \"roll_max_1x3600in\",\n  \"roll_min_0.25x1in\"\n};\n\n\n//",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function",
    "start_line": 120,
    "end_line": 222,
    "name": "lprintDYMO",
    "parent": null,
    "hierarchy": "lprintDYMO",
    "code": "\t\t\t// O - `true` on success, `false` on error\nlprintDYMO(\n    pappl_system_t         *system,\t// I - System\n    const char             *driver_name,// I - Driver name\n    const char             *device_uri,\t// I - Device URI\n    const char             *device_id,\t// I - 1284 device ID\n    pappl_pr_driver_data_t *data,\t// I - Pointer to driver data\n    ipp_t                  **attrs,\t// O - Pointer to driver attributes\n    void                   *cbdata)\t// I - Callback data (not used)\n{\n  data->printfile_cb  = lprint_dymo_printfile;\n  data->rendjob_cb    = lprint_dymo_rendjob;\n  data->rendpage_cb   = lprint_dymo_rendpage;\n  data->rstartjob_cb  = lprint_dymo_rstartjob;\n  data->rstartpage_cb = lprint_dymo_rstartpage;\n  data->rwriteline_cb = lprint_dymo_rwriteline;\n  data->status_cb     = lprint_dymo_status;\n\n  if (!strncmp(driver_name, \"dymo_lm-\", 8) || strstr(driver_name, \"-tape\"))\n  {\n    // Vendor-specific format...\n    data->format = \"application/vnd.dymo-lm\";\n\n    // Set pages-per-minute based on 3\" of tape; not exact but\n    // we need to report something...\n    data->ppm = 20;\n\n    // Tape printers operate at 180dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 180;\n    data->y_resolution[0] = 180;\n\n    data->x_default = data->y_default = 180;\n\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    data->num_media = (int)(sizeof(lprint_dymo_tape) / sizeof(lprint_dymo_tape[0]));\n    memcpy(data->media, lprint_dymo_tape, sizeof(lprint_dymo_tape));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n  }\n  else\n  {\n    // Vendor-specific format...\n    data->format = \"application/vnd.dymo-lw\";\n\n    // Set pages-per-minute based on 1.125x3.5\" address labels; not exact but\n    // we need to report something...\n    if (strstr(driver_name, \"-turbo\"))\n      data->ppm = 60;\n    else\n      data->ppm = 30;\n\n    // Label printers operate at 300dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 300;\n    data->y_resolution[0] = 300;\n\n    data->x_default = data->y_default = 300;\n\n    // Media...\n    data->left_right = 100;\n    data->bottom_top = 525;\n\n    data->num_media = (int)(sizeof(lprint_dymo_label) / sizeof(lprint_dymo_label[0]));\n    memcpy(data->media, lprint_dymo_label, sizeof(lprint_dymo_label));\n\n    if (strstr(driver_name, \"-twin\"))\n    {\n      data->num_source = 2;\n      data->source[0]  = \"main-roll\";\n      data->source[1]  = \"alternate-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n      papplCopyString(data->media_ready[1].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[1].size_name));\n      papplCopyString(data->media_ready[1].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n    else\n    {\n      data->num_source = 1;\n      data->source[0]  = \"main-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n  }\n\n  data->tracking_supported = PAPPL_MEDIA_TRACKING_WEB;\n\n  data->num_type = 1;\n  data->type[0]  = \"labels\";\n\n  // Darkness/density support...\n  data->darkness_configured = 50;\n  data->darkness_supported  = 4;\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 120,
    "end_line": 222,
    "code": "\t\t\t// O - `true` on success, `false` on error\nlprintDYMO(\n    pappl_system_t         *system,\t// I - System\n    const char             *driver_name,// I - Driver name\n    const char             *device_uri,\t// I - Device URI\n    const char             *device_id,\t// I - 1284 device ID\n    pappl_pr_driver_data_t *data,\t// I - Pointer to driver data\n    ipp_t                  **attrs,\t// O - Pointer to driver attributes\n    void                   *cbdata)\t// I - Callback data (not used)\n{\n  data->printfile_cb  = lprint_dymo_printfile;\n  data->rendjob_cb    = lprint_dymo_rendjob;\n  data->rendpage_cb   = lprint_dymo_rendpage;\n  data->rstartjob_cb  = lprint_dymo_rstartjob;\n  data->rstartpage_cb = lprint_dymo_rstartpage;\n  data->rwriteline_cb = lprint_dymo_rwriteline;\n  data->status_cb     = lprint_dymo_status;\n\n  if (!strncmp(driver_name, \"dymo_lm-\", 8) || strstr(driver_name, \"-tape\"))\n  {\n    // Vendor-specific format...\n    data->format = \"application/vnd.dymo-lm\";\n\n    // Set pages-per-minute based on 3\" of tape; not exact but\n    // we need to report something...\n    data->ppm = 20;\n\n    // Tape printers operate at 180dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 180;\n    data->y_resolution[0] = 180;\n\n    data->x_default = data->y_default = 180;\n\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    data->num_media = (int)(sizeof(lprint_dymo_tape) / sizeof(lprint_dymo_tape[0]));\n    memcpy(data->media, lprint_dymo_tape, sizeof(lprint_dymo_tape));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n  }\n  else\n  {\n    // Vendor-specific format...\n    data->format = \"application/vnd.dymo-lw\";\n\n    // Set pages-per-minute based on 1.125x3.5\" address labels; not exact but\n    // we need to report something...\n    if (strstr(driver_name, \"-turbo\"))\n      data->ppm = 60;\n    else\n      data->ppm = 30;\n\n    // Label printers operate at 300dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 300;\n    data->y_resolution[0] = 300;\n\n    data->x_default = data->y_default = 300;\n\n    // Media...\n    data->left_right = 100;\n    data->bottom_top = 525;\n\n    data->num_media = (int)(sizeof(lprint_dymo_label) / sizeof(lprint_dymo_label[0]));\n    memcpy(data->media, lprint_dymo_label, sizeof(lprint_dymo_label));\n\n    if (strstr(driver_name, \"-twin\"))\n    {\n      data->num_source = 2;\n      data->source[0]  = \"main-roll\";\n      data->source[1]  = \"alternate-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n      papplCopyString(data->media_ready[1].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[1].size_name));\n      papplCopyString(data->media_ready[1].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n    else\n    {\n      data->num_source = 1;\n      data->source[0]  = \"main-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n  }\n\n  data->tracking_supported = PAPPL_MEDIA_TRACKING_WEB;\n\n  data->num_type = 1;\n  data->type[0]  = \"labels\";\n\n  // Darkness/density support...\n  data->darkness_configured = 50;\n  data->darkness_supported  = 4;\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 120,
    "end_line": 222,
    "code": "\t\t\t// O - `true` on success, `false` on error\nlprintDYMO(\n    pappl_system_t         *system,\t// I - System\n    const char             *driver_name,// I - Driver name\n    const char             *device_uri,\t// I - Device URI\n    const char             *device_id,\t// I - 1284 device ID\n    pappl_pr_driver_data_t *data,\t// I - Pointer to driver data\n    ipp_t                  **attrs,\t// O - Pointer to driver attributes\n    void                   *cbdata)\t// I - Callback data (not used)\n{\n  data->printfile_cb  = lprint_dymo_printfile;\n  data->rendjob_cb    = lprint_dymo_rendjob;\n  data->rendpage_cb   = lprint_dymo_rendpage;\n  data->rstartjob_cb  = lprint_dymo_rstartjob;\n  data->rstartpage_cb = lprint_dymo_rstartpage;\n  data->rwriteline_cb = lprint_dymo_rwriteline;\n  data->status_cb     = lprint_dymo_status;\n\n  if (!strncmp(driver_name, \"dymo_lm-\", 8) || strstr(driver_name, \"-tape\"))\n  {\n    // Vendor-specific format...\n    data->format = \"application/vnd.dymo-lm\";\n\n    // Set pages-per-minute based on 3\" of tape; not exact but\n    // we need to report something...\n    data->ppm = 20;\n\n    // Tape printers operate at 180dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 180;\n    data->y_resolution[0] = 180;\n\n    data->x_default = data->y_default = 180;\n\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    data->num_media = (int)(sizeof(lprint_dymo_tape) / sizeof(lprint_dymo_tape[0]));\n    memcpy(data->media, lprint_dymo_tape, sizeof(lprint_dymo_tape));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n  }\n  else\n  {\n    // Vendor-specific format...\n    data->format = \"application/vnd.dymo-lw\";\n\n    // Set pages-per-minute based on 1.125x3.5\" address labels; not exact but\n    // we need to report something...\n    if (strstr(driver_name, \"-turbo\"))\n      data->ppm = 60;\n    else\n      data->ppm = 30;\n\n    // Label printers operate at 300dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 300;\n    data->y_resolution[0] = 300;\n\n    data->x_default = data->y_default = 300;\n\n    // Media...\n    data->left_right = 100;\n    data->bottom_top = 525;\n\n    data->num_media = (int)(sizeof(lprint_dymo_label) / sizeof(lprint_dymo_label[0]));\n    memcpy(data->media, lprint_dymo_label, sizeof(lprint_dymo_label));\n\n    if (strstr(driver_name, \"-twin\"))\n    {\n      data->num_source = 2;\n      data->source[0]  = \"main-roll\";\n      data->source[1]  = \"alternate-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n      papplCopyString(data->media_ready[1].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[1].size_name));\n      papplCopyString(data->media_ready[1].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n    else\n    {\n      data->num_source = 1;\n      data->source[0]  = \"main-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n  }\n\n  data->tracking_supported = PAPPL_MEDIA_TRACKING_WEB;\n\n  data->num_type = 1;\n  data->type[0]  = \"labels\";\n\n  // Darkness/density support...\n  data->darkness_configured = 50;\n  data->darkness_supported  = 4;\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 129,
    "end_line": 222,
    "code": "ta->printfile_cb  = lprint_dymo_printfile;\n  data->rendjob_cb    = lprint_dymo_rendjob;\n  data->rendpage_cb   = lprint_dymo_rendpage;\n  data->rstartjob_cb  = lprint_dymo_rstartjob;\n  data->rstartpage_cb = lprint_dymo_rstartpage;\n  data->rwriteline_cb = lprint_dymo_rwriteline;\n  data->status_cb     = lprint_dymo_status;\n\n  if (!strncmp(driver_name, \"dymo_lm-\", 8) || strstr(driver_name, \"-tape\"))\n  {\n    // Vendor-specific format...\n    data->format = \"application/vnd.dymo-lm\";\n\n    // Set pages-per-minute based on 3\" of tape; not exact but\n    // we need to report something...\n    data->ppm = 20;\n\n    // Tape printers operate at 180dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 180;\n    data->y_resolution[0] = 180;\n\n    data->x_default = data->y_default = 180;\n\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    data->num_media = (int)(sizeof(lprint_dymo_tape) / sizeof(lprint_dymo_tape[0]));\n    memcpy(data->media, lprint_dymo_tape, sizeof(lprint_dymo_tape));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n  }\n  else\n  {\n    // Vendor-specific format...\n    data->format = \"application/vnd.dymo-lw\";\n\n    // Set pages-per-minute based on 1.125x3.5\" address labels; not exact but\n    // we need to report something...\n    if (strstr(driver_name, \"-turbo\"))\n      data->ppm = 60;\n    else\n      data->ppm = 30;\n\n    // Label printers operate at 300dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 300;\n    data->y_resolution[0] = 300;\n\n    data->x_default = data->y_default = 300;\n\n    // Media...\n    data->left_right = 100;\n    data->bottom_top = 525;\n\n    data->num_media = (int)(sizeof(lprint_dymo_label) / sizeof(lprint_dymo_label[0]));\n    memcpy(data->media, lprint_dymo_label, sizeof(lprint_dymo_label));\n\n    if (strstr(driver_name, \"-twin\"))\n    {\n      data->num_source = 2;\n      data->source[0]  = \"main-roll\";\n      data->source[1]  = \"alternate-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n      papplCopyString(data->media_ready[1].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[1].size_name));\n      papplCopyString(data->media_ready[1].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n    else\n    {\n      data->num_source = 1;\n      data->source[0]  = \"main-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n  }\n\n  data->tracking_supported = PAPPL_MEDIA_TRACKING_WEB;\n\n  data->num_type = 1;\n  data->type[0]  = \"labels\";\n\n  // Darkness/density support...\n  data->darkness_configured = 50;\n  data->darkness_supported  = 4;\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 129,
    "end_line": 222,
    "code": "ta->printfile_cb  = lprint_dymo_printfile;\n  data->rendjob_cb    = lprint_dymo_rendjob;\n  data->rendpage_cb   = lprint_dymo_rendpage;\n  data->rstartjob_cb  = lprint_dymo_rstartjob;\n  data->rstartpage_cb = lprint_dymo_rstartpage;\n  data->rwriteline_cb = lprint_dymo_rwriteline;\n  data->status_cb     = lprint_dymo_status;\n\n  if (!strncmp(driver_name, \"dymo_lm-\", 8) || strstr(driver_name, \"-tape\"))\n  {\n    // Vendor-specific format...\n    data->format = \"application/vnd.dymo-lm\";\n\n    // Set pages-per-minute based on 3\" of tape; not exact but\n    // we need to report something...\n    data->ppm = 20;\n\n    // Tape printers operate at 180dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 180;\n    data->y_resolution[0] = 180;\n\n    data->x_default = data->y_default = 180;\n\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    data->num_media = (int)(sizeof(lprint_dymo_tape) / sizeof(lprint_dymo_tape[0]));\n    memcpy(data->media, lprint_dymo_tape, sizeof(lprint_dymo_tape));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n  }\n  else\n  {\n    // Vendor-specific format...\n    data->format = \"application/vnd.dymo-lw\";\n\n    // Set pages-per-minute based on 1.125x3.5\" address labels; not exact but\n    // we need to report something...\n    if (strstr(driver_name, \"-turbo\"))\n      data->ppm = 60;\n    else\n      data->ppm = 30;\n\n    // Label printers operate at 300dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 300;\n    data->y_resolution[0] = 300;\n\n    data->x_default = data->y_default = 300;\n\n    // Media...\n    data->left_right = 100;\n    data->bottom_top = 525;\n\n    data->num_media = (int)(sizeof(lprint_dymo_label) / sizeof(lprint_dymo_label[0]));\n    memcpy(data->media, lprint_dymo_label, sizeof(lprint_dymo_label));\n\n    if (strstr(driver_name, \"-twin\"))\n    {\n      data->num_source = 2;\n      data->source[0]  = \"main-roll\";\n      data->source[1]  = \"alternate-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n      papplCopyString(data->media_ready[1].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[1].size_name));\n      papplCopyString(data->media_ready[1].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n    else\n    {\n      data->num_source = 1;\n      data->source[0]  = \"main-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n  }\n\n  data->tracking_supported = PAPPL_MEDIA_TRACKING_WEB;\n\n  data->num_type = 1;\n  data->type[0]  = \"labels\";\n\n  // Darkness/density support...\n  data->darkness_configured = 50;\n  data->darkness_supported  = 4;\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 138,
    "end_line": 210,
    "code": "trncmp(driver_name, \"dymo_lm-\", 8) || strstr(driver_name, \"-tape\"))\n  {\n    // Vendor-specific format...\n    data->format = \"application/vnd.dymo-lm\";\n\n    // Set pages-per-minute based on 3\" of tape; not exact but\n    // we need to report something...\n    data->ppm = 20;\n\n    // Tape printers operate at 180dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 180;\n    data->y_resolution[0] = 180;\n\n    data->x_default = data->y_default = 180;\n\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    data->num_media = (int)(sizeof(lprint_dymo_tape) / sizeof(lprint_dymo_tape[0]));\n    memcpy(data->media, lprint_dymo_tape, sizeof(lprint_dymo_tape));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n  }\n  else\n  {\n    // Vendor-specific format...\n    data->format = \"application/vnd.dymo-lw\";\n\n    // Set pages-per-minute based on 1.125x3.5\" address labels; not exact but\n    // we need to report something...\n    if (strstr(driver_name, \"-turbo\"))\n      data->ppm = 60;\n    else\n      data->ppm = 30;\n\n    // Label printers operate at 300dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 300;\n    data->y_resolution[0] = 300;\n\n    data->x_default = data->y_default = 300;\n\n    // Media...\n    data->left_right = 100;\n    data->bottom_top = 525;\n\n    data->num_media = (int)(sizeof(lprint_dymo_label) / sizeof(lprint_dymo_label[0]));\n    memcpy(data->media, lprint_dymo_label, sizeof(lprint_dymo_label));\n\n    if (strstr(driver_name, \"-twin\"))\n    {\n      data->num_source = 2;\n      data->source[0]  = \"main-roll\";\n      data->source[1]  = \"alternate-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n      papplCopyString(data->media_ready[1].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[1].size_name));\n      papplCopyString(data->media_ready[1].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n    else\n    {\n      data->num_source = 1;\n      data->source[0]  = \"main-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n  }\n\n  da",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 138,
    "end_line": 210,
    "code": "trncmp(driver_name, \"dymo_lm-\", 8) || strstr(driver_name, \"-tape\"))\n  {\n    // Vendor-specific format...\n    data->format = \"application/vnd.dymo-lm\";\n\n    // Set pages-per-minute based on 3\" of tape; not exact but\n    // we need to report something...\n    data->ppm = 20;\n\n    // Tape printers operate at 180dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 180;\n    data->y_resolution[0] = 180;\n\n    data->x_default = data->y_default = 180;\n\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    data->num_media = (int)(sizeof(lprint_dymo_tape) / sizeof(lprint_dymo_tape[0]));\n    memcpy(data->media, lprint_dymo_tape, sizeof(lprint_dymo_tape));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n  }\n  else\n  {\n    // Vendor-specific format...\n    data->format = \"application/vnd.dymo-lw\";\n\n    // Set pages-per-minute based on 1.125x3.5\" address labels; not exact but\n    // we need to report something...\n    if (strstr(driver_name, \"-turbo\"))\n      data->ppm = 60;\n    else\n      data->ppm = 30;\n\n    // Label printers operate at 300dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 300;\n    data->y_resolution[0] = 300;\n\n    data->x_default = data->y_default = 300;\n\n    // Media...\n    data->left_right = 100;\n    data->bottom_top = 525;\n\n    data->num_media = (int)(sizeof(lprint_dymo_label) / sizeof(lprint_dymo_label[0]));\n    memcpy(data->media, lprint_dymo_label, sizeof(lprint_dymo_label));\n\n    if (strstr(driver_name, \"-twin\"))\n    {\n      data->num_source = 2;\n      data->source[0]  = \"main-roll\";\n      data->source[1]  = \"alternate-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n      papplCopyString(data->media_ready[1].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[1].size_name));\n      papplCopyString(data->media_ready[1].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n    else\n    {\n      data->num_source = 1;\n      data->source[0]  = \"main-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n  }\n\n  da",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 139,
    "end_line": 164,
    "code": "// Vendor-specific format...\n    data->format = \"application/vnd.dymo-lm\";\n\n    // Set pages-per-minute based on 3\" of tape; not exact but\n    // we need to report something...\n    data->ppm = 20;\n\n    // Tape printers operate at 180dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 180;\n    data->y_resolution[0] = 180;\n\n    data->x_default = data->y_default = 180;\n\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    data->num_media = (int)(sizeof(lprint_dymo_tape) / sizeof(lprint_dymo_tape[0]));\n    memcpy(data->media, lprint_dymo_tape, sizeof(lprint_dymo_tape));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n  }\n  els",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 139,
    "end_line": 164,
    "code": "// Vendor-specific format...\n    data->format = \"application/vnd.dymo-lm\";\n\n    // Set pages-per-minute based on 3\" of tape; not exact but\n    // we need to report something...\n    data->ppm = 20;\n\n    // Tape printers operate at 180dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 180;\n    data->y_resolution[0] = 180;\n\n    data->x_default = data->y_default = 180;\n\n    data->left_right = 1;\n    data->bottom_top = 1;\n\n    data->num_media = (int)(sizeof(lprint_dymo_tape) / sizeof(lprint_dymo_tape[0]));\n    memcpy(data->media, lprint_dymo_tape, sizeof(lprint_dymo_tape));\n\n    data->num_source = 1;\n    data->source[0]  = \"main-roll\";\n\n    papplCopyString(data->media_ready[0].size_name, \"oe_wide-2in-tape_1x2in\", sizeof(data->media_ready[0].size_name));\n  }\n  els",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 141,
    "end_line": 141,
    "code": "format = \"application/vnd.dymo-lm\";\n\n    ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 141,
    "end_line": 141,
    "code": "format = \"application/vnd.dymo-lm\";\n\n   ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 152,
    "end_line": 152,
    "code": "x_default = data->y_default = 180;\n\n    ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 152,
    "end_line": 152,
    "code": "x_default = data->y_default = 180;\n\n   ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 165,
    "end_line": 210,
    "code": " {\n    // Vendor-specific format...\n    data->format = \"application/vnd.dymo-lw\";\n\n    // Set pages-per-minute based on 1.125x3.5\" address labels; not exact but\n    // we need to report something...\n    if (strstr(driver_name, \"-turbo\"))\n      data->ppm = 60;\n    else\n      data->ppm = 30;\n\n    // Label printers operate at 300dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 300;\n    data->y_resolution[0] = 300;\n\n    data->x_default = data->y_default = 300;\n\n    // Media...\n    data->left_right = 100;\n    data->bottom_top = 525;\n\n    data->num_media = (int)(sizeof(lprint_dymo_label) / sizeof(lprint_dymo_label[0]));\n    memcpy(data->media, lprint_dymo_label, sizeof(lprint_dymo_label));\n\n    if (strstr(driver_name, \"-twin\"))\n    {\n      data->num_source = 2;\n      data->source[0]  = \"main-roll\";\n      data->source[1]  = \"alternate-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n      papplCopyString(data->media_ready[1].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[1].size_name));\n      papplCopyString(data->media_ready[1].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n    else\n    {\n      data->num_source = 1;\n      data->source[0]  = \"main-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n  }\n\n  da",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 165,
    "end_line": 210,
    "code": " {\n    // Vendor-specific format...\n    data->format = \"application/vnd.dymo-lw\";\n\n    // Set pages-per-minute based on 1.125x3.5\" address labels; not exact but\n    // we need to report something...\n    if (strstr(driver_name, \"-turbo\"))\n      data->ppm = 60;\n    else\n      data->ppm = 30;\n\n    // Label printers operate at 300dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 300;\n    data->y_resolution[0] = 300;\n\n    data->x_default = data->y_default = 300;\n\n    // Media...\n    data->left_right = 100;\n    data->bottom_top = 525;\n\n    data->num_media = (int)(sizeof(lprint_dymo_label) / sizeof(lprint_dymo_label[0]));\n    memcpy(data->media, lprint_dymo_label, sizeof(lprint_dymo_label));\n\n    if (strstr(driver_name, \"-twin\"))\n    {\n      data->num_source = 2;\n      data->source[0]  = \"main-roll\";\n      data->source[1]  = \"alternate-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n      papplCopyString(data->media_ready[1].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[1].size_name));\n      papplCopyString(data->media_ready[1].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n    else\n    {\n      data->num_source = 1;\n      data->source[0]  = \"main-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n  }\n\n  da",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 166,
    "end_line": 210,
    "code": "// Vendor-specific format...\n    data->format = \"application/vnd.dymo-lw\";\n\n    // Set pages-per-minute based on 1.125x3.5\" address labels; not exact but\n    // we need to report something...\n    if (strstr(driver_name, \"-turbo\"))\n      data->ppm = 60;\n    else\n      data->ppm = 30;\n\n    // Label printers operate at 300dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 300;\n    data->y_resolution[0] = 300;\n\n    data->x_default = data->y_default = 300;\n\n    // Media...\n    data->left_right = 100;\n    data->bottom_top = 525;\n\n    data->num_media = (int)(sizeof(lprint_dymo_label) / sizeof(lprint_dymo_label[0]));\n    memcpy(data->media, lprint_dymo_label, sizeof(lprint_dymo_label));\n\n    if (strstr(driver_name, \"-twin\"))\n    {\n      data->num_source = 2;\n      data->source[0]  = \"main-roll\";\n      data->source[1]  = \"alternate-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n      papplCopyString(data->media_ready[1].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[1].size_name));\n      papplCopyString(data->media_ready[1].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n    else\n    {\n      data->num_source = 1;\n      data->source[0]  = \"main-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n  }\n\n  da",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 166,
    "end_line": 210,
    "code": "// Vendor-specific format...\n    data->format = \"application/vnd.dymo-lw\";\n\n    // Set pages-per-minute based on 1.125x3.5\" address labels; not exact but\n    // we need to report something...\n    if (strstr(driver_name, \"-turbo\"))\n      data->ppm = 60;\n    else\n      data->ppm = 30;\n\n    // Label printers operate at 300dpi\n    data->num_resolution  = 1;\n    data->x_resolution[0] = 300;\n    data->y_resolution[0] = 300;\n\n    data->x_default = data->y_default = 300;\n\n    // Media...\n    data->left_right = 100;\n    data->bottom_top = 525;\n\n    data->num_media = (int)(sizeof(lprint_dymo_label) / sizeof(lprint_dymo_label[0]));\n    memcpy(data->media, lprint_dymo_label, sizeof(lprint_dymo_label));\n\n    if (strstr(driver_name, \"-twin\"))\n    {\n      data->num_source = 2;\n      data->source[0]  = \"main-roll\";\n      data->source[1]  = \"alternate-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n      papplCopyString(data->media_ready[1].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[1].size_name));\n      papplCopyString(data->media_ready[1].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n    else\n    {\n      data->num_source = 1;\n      data->source[0]  = \"main-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n  }\n\n  da",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 168,
    "end_line": 168,
    "code": "format = \"application/vnd.dymo-lw\";\n\n    ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 168,
    "end_line": 168,
    "code": "format = \"application/vnd.dymo-lw\";\n\n   ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 172,
    "end_line": 175,
    "code": "rstr(driver_name, \"-turbo\"))\n      data->ppm = 60;\n    else\n      data->ppm = 30;\n\n    ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 172,
    "end_line": 175,
    "code": "rstr(driver_name, \"-turbo\"))\n      data->ppm = 60;\n    else\n      data->ppm = 30;\n\n    ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 174,
    "end_line": 175,
    "code": "     data->ppm = 30;\n\n    ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 182,
    "end_line": 182,
    "code": "x_default = data->y_default = 300;\n\n    ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 182,
    "end_line": 182,
    "code": "x_default = data->y_default = 300;\n\n   ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 191,
    "end_line": 209,
    "code": "rstr(driver_name, \"-twin\"))\n    {\n      data->num_source = 2;\n      data->source[0]  = \"main-roll\";\n      data->source[1]  = \"alternate-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n      papplCopyString(data->media_ready[1].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[1].size_name));\n      papplCopyString(data->media_ready[1].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n    else\n    {\n      data->num_source = 1;\n      data->source[0]  = \"main-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 191,
    "end_line": 209,
    "code": "rstr(driver_name, \"-twin\"))\n    {\n      data->num_source = 2;\n      data->source[0]  = \"main-roll\";\n      data->source[1]  = \"alternate-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n      papplCopyString(data->media_ready[1].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[1].size_name));\n      papplCopyString(data->media_ready[1].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n    else\n    {\n      data->num_source = 1;\n      data->source[0]  = \"main-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 192,
    "end_line": 201,
    "code": "  data->num_source = 2;\n      data->source[0]  = \"main-roll\";\n      data->source[1]  = \"alternate-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n      papplCopyString(data->media_ready[1].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[1].size_name));\n      papplCopyString(data->media_ready[1].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n    e",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 192,
    "end_line": 201,
    "code": "  data->num_source = 2;\n      data->source[0]  = \"main-roll\";\n      data->source[1]  = \"alternate-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n      papplCopyString(data->media_ready[1].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[1].size_name));\n      papplCopyString(data->media_ready[1].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n    e",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 202,
    "end_line": 209,
    "code": "   {\n      data->num_source = 1;\n      data->source[0]  = \"main-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 202,
    "end_line": 209,
    "code": "   {\n      data->num_source = 1;\n      data->source[0]  = \"main-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 203,
    "end_line": 209,
    "code": "  data->num_source = 1;\n      data->source[0]  = \"main-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 203,
    "end_line": 209,
    "code": "  data->num_source = 1;\n      data->source[0]  = \"main-roll\";\n\n      papplCopyString(data->media_ready[0].size_name, \"oe_address-label_1.125x3.5in\", sizeof(data->media_ready[0].size_name));\n      papplCopyString(data->media_ready[0].type, \"labels\", sizeof(data->media_ready[0].type));\n    }\n  }\n\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function",
    "start_line": 229,
    "end_line": 263,
    "name": "lprint_dymo_init",
    "parent": null,
    "hierarchy": "lprint_dymo_init",
    "code": " void\nlprint_dymo_init(\n    pappl_job_t   *job,\t\t\t// I - Job\n    lprint_dymo_t *dymo)\t\t// O - Driver data\n{\n  const char\t*driver_name;\t\t// Driver name\n\n\n  driver_name = papplPrinterGetDriverName(papplJobGetPrinter(job));\n\n  if (!strncmp(driver_name, \"dymo_lm-\", 8) || strstr(driver_name, \"-tape\"))\n  {\n    dymo->dlang = LPRINT_DLANG_TAPE;\n\n    if (!strcmp(driver_name, \"dymo_lw-duo-tape\") || !strcmp(driver_name, \"dymo_lw-duo-tape-128\") || !strcmp(driver_name, \"dymo_lw-450-duo-tape\"))\n    {\n      dymo->min_leader    = 61;\n      dymo->normal_leader = 14;\n    }\n    else if (!strcmp(driver_name, \"dymo_lm-pnp\"))\n    {\n      dymo->min_leader    = 58;\n      dymo->normal_leader = 17;\n    }\n    else\n    {\n      dymo->min_leader    = 55;\n      dymo->normal_leader = 20;\n    }\n  }\n  else\n  {\n    dymo->dlang = LPRINT_DLANG_LABEL;\n  }\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 229,
    "end_line": 263,
    "code": " void\nlprint_dymo_init(\n    pappl_job_t   *job,\t\t\t// I - Job\n    lprint_dymo_t *dymo)\t\t// O - Driver data\n{\n  const char\t*driver_name;\t\t// Driver name\n\n\n  driver_name = papplPrinterGetDriverName(papplJobGetPrinter(job));\n\n  if (!strncmp(driver_name, \"dymo_lm-\", 8) || strstr(driver_name, \"-tape\"))\n  {\n    dymo->dlang = LPRINT_DLANG_TAPE;\n\n    if (!strcmp(driver_name, \"dymo_lw-duo-tape\") || !strcmp(driver_name, \"dymo_lw-duo-tape-128\") || !strcmp(driver_name, \"dymo_lw-450-duo-tape\"))\n    {\n      dymo->min_leader    = 61;\n      dymo->normal_leader = 14;\n    }\n    else if (!strcmp(driver_name, \"dymo_lm-pnp\"))\n    {\n      dymo->min_leader    = 58;\n      dymo->normal_leader = 17;\n    }\n    else\n    {\n      dymo->min_leader    = 55;\n      dymo->normal_leader = 20;\n    }\n  }\n  else\n  {\n    dymo->dlang = LPRINT_DLANG_LABEL;\n  }\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 229,
    "end_line": 263,
    "code": " void\nlprint_dymo_init(\n    pappl_job_t   *job,\t\t\t// I - Job\n    lprint_dymo_t *dymo)\t\t// O - Driver data\n{\n  const char\t*driver_name;\t\t// Driver name\n\n\n  driver_name = papplPrinterGetDriverName(papplJobGetPrinter(job));\n\n  if (!strncmp(driver_name, \"dymo_lm-\", 8) || strstr(driver_name, \"-tape\"))\n  {\n    dymo->dlang = LPRINT_DLANG_TAPE;\n\n    if (!strcmp(driver_name, \"dymo_lw-duo-tape\") || !strcmp(driver_name, \"dymo_lw-duo-tape-128\") || !strcmp(driver_name, \"dymo_lw-450-duo-tape\"))\n    {\n      dymo->min_leader    = 61;\n      dymo->normal_leader = 14;\n    }\n    else if (!strcmp(driver_name, \"dymo_lm-pnp\"))\n    {\n      dymo->min_leader    = 58;\n      dymo->normal_leader = 17;\n    }\n    else\n    {\n      dymo->min_leader    = 55;\n      dymo->normal_leader = 20;\n    }\n  }\n  else\n  {\n    dymo->dlang = LPRINT_DLANG_LABEL;\n  }\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 233,
    "end_line": 263,
    "code": "nst char\t*driver_name;\t\t// Driver name\n\n\n  driver_name = papplPrinterGetDriverName(papplJobGetPrinter(job));\n\n  if (!strncmp(driver_name, \"dymo_lm-\", 8) || strstr(driver_name, \"-tape\"))\n  {\n    dymo->dlang = LPRINT_DLANG_TAPE;\n\n    if (!strcmp(driver_name, \"dymo_lw-duo-tape\") || !strcmp(driver_name, \"dymo_lw-duo-tape-128\") || !strcmp(driver_name, \"dymo_lw-450-duo-tape\"))\n    {\n      dymo->min_leader    = 61;\n      dymo->normal_leader = 14;\n    }\n    else if (!strcmp(driver_name, \"dymo_lm-pnp\"))\n    {\n      dymo->min_leader    = 58;\n      dymo->normal_leader = 17;\n    }\n    else\n    {\n      dymo->min_leader    = 55;\n      dymo->normal_leader = 20;\n    }\n  }\n  else\n  {\n    dymo->dlang = LPRINT_DLANG_LABEL;\n  }\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 233,
    "end_line": 263,
    "code": "nst char\t*driver_name;\t\t// Driver name\n\n\n  driver_name = papplPrinterGetDriverName(papplJobGetPrinter(job));\n\n  if (!strncmp(driver_name, \"dymo_lm-\", 8) || strstr(driver_name, \"-tape\"))\n  {\n    dymo->dlang = LPRINT_DLANG_TAPE;\n\n    if (!strcmp(driver_name, \"dymo_lw-duo-tape\") || !strcmp(driver_name, \"dymo_lw-duo-tape-128\") || !strcmp(driver_name, \"dymo_lw-450-duo-tape\"))\n    {\n      dymo->min_leader    = 61;\n      dymo->normal_leader = 14;\n    }\n    else if (!strcmp(driver_name, \"dymo_lm-pnp\"))\n    {\n      dymo->min_leader    = 58;\n      dymo->normal_leader = 17;\n    }\n    else\n    {\n      dymo->min_leader    = 55;\n      dymo->normal_leader = 20;\n    }\n  }\n  else\n  {\n    dymo->dlang = LPRINT_DLANG_LABEL;\n  }\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 239,
    "end_line": 262,
    "code": "trncmp(driver_name, \"dymo_lm-\", 8) || strstr(driver_name, \"-tape\"))\n  {\n    dymo->dlang = LPRINT_DLANG_TAPE;\n\n    if (!strcmp(driver_name, \"dymo_lw-duo-tape\") || !strcmp(driver_name, \"dymo_lw-duo-tape-128\") || !strcmp(driver_name, \"dymo_lw-450-duo-tape\"))\n    {\n      dymo->min_leader    = 61;\n      dymo->normal_leader = 14;\n    }\n    else if (!strcmp(driver_name, \"dymo_lm-pnp\"))\n    {\n      dymo->min_leader    = 58;\n      dymo->normal_leader = 17;\n    }\n    else\n    {\n      dymo->min_leader    = 55;\n      dymo->normal_leader = 20;\n    }\n  }\n  else\n  {\n    dymo->dlang = LPRINT_DLANG_LABEL;\n  }\n}\n\n\n/",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 239,
    "end_line": 262,
    "code": "trncmp(driver_name, \"dymo_lm-\", 8) || strstr(driver_name, \"-tape\"))\n  {\n    dymo->dlang = LPRINT_DLANG_TAPE;\n\n    if (!strcmp(driver_name, \"dymo_lw-duo-tape\") || !strcmp(driver_name, \"dymo_lw-duo-tape-128\") || !strcmp(driver_name, \"dymo_lw-450-duo-tape\"))\n    {\n      dymo->min_leader    = 61;\n      dymo->normal_leader = 14;\n    }\n    else if (!strcmp(driver_name, \"dymo_lm-pnp\"))\n    {\n      dymo->min_leader    = 58;\n      dymo->normal_leader = 17;\n    }\n    else\n    {\n      dymo->min_leader    = 55;\n      dymo->normal_leader = 20;\n    }\n  }\n  else\n  {\n    dymo->dlang = LPRINT_DLANG_LABEL;\n  }\n}\n\n\n/",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 240,
    "end_line": 258,
    "code": "dymo->dlang = LPRINT_DLANG_TAPE;\n\n    if (!strcmp(driver_name, \"dymo_lw-duo-tape\") || !strcmp(driver_name, \"dymo_lw-duo-tape-128\") || !strcmp(driver_name, \"dymo_lw-450-duo-tape\"))\n    {\n      dymo->min_leader    = 61;\n      dymo->normal_leader = 14;\n    }\n    else if (!strcmp(driver_name, \"dymo_lm-pnp\"))\n    {\n      dymo->min_leader    = 58;\n      dymo->normal_leader = 17;\n    }\n    else\n    {\n      dymo->min_leader    = 55;\n      dymo->normal_leader = 20;\n    }\n  }\n  els",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 240,
    "end_line": 258,
    "code": "dymo->dlang = LPRINT_DLANG_TAPE;\n\n    if (!strcmp(driver_name, \"dymo_lw-duo-tape\") || !strcmp(driver_name, \"dymo_lw-duo-tape-128\") || !strcmp(driver_name, \"dymo_lw-450-duo-tape\"))\n    {\n      dymo->min_leader    = 61;\n      dymo->normal_leader = 14;\n    }\n    else if (!strcmp(driver_name, \"dymo_lm-pnp\"))\n    {\n      dymo->min_leader    = 58;\n      dymo->normal_leader = 17;\n    }\n    else\n    {\n      dymo->min_leader    = 55;\n      dymo->normal_leader = 20;\n    }\n  }\n  els",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 243,
    "end_line": 257,
    "code": "trcmp(driver_name, \"dymo_lw-duo-tape\") || !strcmp(driver_name, \"dymo_lw-duo-tape-128\") || !strcmp(driver_name, \"dymo_lw-450-duo-tape\"))\n    {\n      dymo->min_leader    = 61;\n      dymo->normal_leader = 14;\n    }\n    else if (!strcmp(driver_name, \"dymo_lm-pnp\"))\n    {\n      dymo->min_leader    = 58;\n      dymo->normal_leader = 17;\n    }\n    else\n    {\n      dymo->min_leader    = 55;\n      dymo->normal_leader = 20;\n    }\n  }\n ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 243,
    "end_line": 257,
    "code": "trcmp(driver_name, \"dymo_lw-duo-tape\") || !strcmp(driver_name, \"dymo_lw-duo-tape-128\") || !strcmp(driver_name, \"dymo_lw-450-duo-tape\"))\n    {\n      dymo->min_leader    = 61;\n      dymo->normal_leader = 14;\n    }\n    else if (!strcmp(driver_name, \"dymo_lm-pnp\"))\n    {\n      dymo->min_leader    = 58;\n      dymo->normal_leader = 17;\n    }\n    else\n    {\n      dymo->min_leader    = 55;\n      dymo->normal_leader = 20;\n    }\n  }\n ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 244,
    "end_line": 247,
    "code": "  dymo->min_leader    = 61;\n      dymo->normal_leader = 14;\n    }\n    e",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 248,
    "end_line": 257,
    "code": "f (!strcmp(driver_name, \"dymo_lm-pnp\"))\n    {\n      dymo->min_leader    = 58;\n      dymo->normal_leader = 17;\n    }\n    else\n    {\n      dymo->min_leader    = 55;\n      dymo->normal_leader = 20;\n    }\n  }\n ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 248,
    "end_line": 257,
    "code": "f (!strcmp(driver_name, \"dymo_lm-pnp\"))\n    {\n      dymo->min_leader    = 58;\n      dymo->normal_leader = 17;\n    }\n    else\n    {\n      dymo->min_leader    = 55;\n      dymo->normal_leader = 20;\n    }\n  }\n ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 248,
    "end_line": 257,
    "code": "trcmp(driver_name, \"dymo_lm-pnp\"))\n    {\n      dymo->min_leader    = 58;\n      dymo->normal_leader = 17;\n    }\n    else\n    {\n      dymo->min_leader    = 55;\n      dymo->normal_leader = 20;\n    }\n  }\n ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 248,
    "end_line": 257,
    "code": "trcmp(driver_name, \"dymo_lm-pnp\"))\n    {\n      dymo->min_leader    = 58;\n      dymo->normal_leader = 17;\n    }\n    else\n    {\n      dymo->min_leader    = 55;\n      dymo->normal_leader = 20;\n    }\n  }\n ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 249,
    "end_line": 252,
    "code": "  dymo->min_leader    = 58;\n      dymo->normal_leader = 17;\n    }\n    e",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 253,
    "end_line": 257,
    "code": "   {\n      dymo->min_leader    = 55;\n      dymo->normal_leader = 20;\n    }\n  }\n ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 254,
    "end_line": 257,
    "code": "  dymo->min_leader    = 55;\n      dymo->normal_leader = 20;\n    }\n  }\n ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 259,
    "end_line": 262,
    "code": " {\n    dymo->dlang = LPRINT_DLANG_LABEL;\n  }\n}\n\n\n/",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 260,
    "end_line": 262,
    "code": "dymo->dlang = LPRINT_DLANG_LABEL;\n  }\n}\n\n\n/",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function",
    "start_line": 270,
    "end_line": 313,
    "name": "lprint_dymo_printfile",
    "parent": null,
    "hierarchy": "lprint_dymo_printfile",
    "code": " bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_printfile(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  int\t\tfd;\t\t\t// Input file\n  ssize_t\tbytes;\t\t\t// Bytes read/written\n  char\t\tbuffer[65536];\t\t// Read/write buffer\n  lprint_dymo_t\tdymo;\t\t\t// Driver data\n\n\n  // Initialize driver data...\n  lprint_dymo_init(job, &dymo);\n\n  // Reset the printer...\n  lprint_dymo_rstartjob(job, options, device);\n\n  // Copy the raw file...\n  papplJobSetImpressions(job, 1);\n\n  if ((fd  = open(papplJobGetFilename(job), O_RDONLY)) < 0)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to open print file '%s': %s\", papplJobGetFilename(job), strerror(errno));\n    return (false);\n  }\n\n  while ((bytes = read(fd, buffer, sizeof(buffer))) > 0)\n  {\n    if (papplDeviceWrite(device, buffer, (size_t)bytes) < 0)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to send %d bytes to printer.\", (int)bytes);\n      close(fd);\n      return (false);\n    }\n  }\n  close(fd);\n\n  lprint_dymo_rstartjob(job, options, device);\n\n  papplJobSetImpressionsCompleted(job, 1);\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 270,
    "end_line": 313,
    "code": " bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_printfile(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  int\t\tfd;\t\t\t// Input file\n  ssize_t\tbytes;\t\t\t// Bytes read/written\n  char\t\tbuffer[65536];\t\t// Read/write buffer\n  lprint_dymo_t\tdymo;\t\t\t// Driver data\n\n\n  // Initialize driver data...\n  lprint_dymo_init(job, &dymo);\n\n  // Reset the printer...\n  lprint_dymo_rstartjob(job, options, device);\n\n  // Copy the raw file...\n  papplJobSetImpressions(job, 1);\n\n  if ((fd  = open(papplJobGetFilename(job), O_RDONLY)) < 0)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to open print file '%s': %s\", papplJobGetFilename(job), strerror(errno));\n    return (false);\n  }\n\n  while ((bytes = read(fd, buffer, sizeof(buffer))) > 0)\n  {\n    if (papplDeviceWrite(device, buffer, (size_t)bytes) < 0)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to send %d bytes to printer.\", (int)bytes);\n      close(fd);\n      return (false);\n    }\n  }\n  close(fd);\n\n  lprint_dymo_rstartjob(job, options, device);\n\n  papplJobSetImpressionsCompleted(job, 1);\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 275,
    "end_line": 313,
    "code": "t\t\tfd;\t\t\t// Input file\n  ssize_t\tbytes;\t\t\t// Bytes read/written\n  char\t\tbuffer[65536];\t\t// Read/write buffer\n  lprint_dymo_t\tdymo;\t\t\t// Driver data\n\n\n  // Initialize driver data...\n  lprint_dymo_init(job, &dymo);\n\n  // Reset the printer...\n  lprint_dymo_rstartjob(job, options, device);\n\n  // Copy the raw file...\n  papplJobSetImpressions(job, 1);\n\n  if ((fd  = open(papplJobGetFilename(job), O_RDONLY)) < 0)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to open print file '%s': %s\", papplJobGetFilename(job), strerror(errno));\n    return (false);\n  }\n\n  while ((bytes = read(fd, buffer, sizeof(buffer))) > 0)\n  {\n    if (papplDeviceWrite(device, buffer, (size_t)bytes) < 0)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to send %d bytes to printer.\", (int)bytes);\n      close(fd);\n      return (false);\n    }\n  }\n  close(fd);\n\n  lprint_dymo_rstartjob(job, options, device);\n\n  papplJobSetImpressionsCompleted(job, 1);\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 297,
    "end_line": 305,
    "code": "((bytes = read(fd, buffer, sizeof(buffer))) > 0)\n  {\n    if (papplDeviceWrite(device, buffer, (size_t)bytes) < 0)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to send %d bytes to printer.\", (int)bytes);\n      close(fd);\n      return (false);\n    }\n  }\n  clo",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "anonymous_initializer_block",
    "start_line": 298,
    "end_line": 305,
    "code": "if (papplDeviceWrite(device, buffer, (size_t)bytes) < 0)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to send %d bytes to printer.\", (int)bytes);\n      close(fd);\n      return (false);\n    }\n  }\n  clo",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "anonymous_initializer_block",
    "start_line": 299,
    "end_line": 304,
    "code": "pplDeviceWrite(device, buffer, (size_t)bytes) < 0)\n    {\n      papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Unable to send %d bytes to printer.\", (int)bytes);\n      close(fd);\n      return (false);\n    }\n  }\n ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function",
    "start_line": 320,
    "end_line": 335,
    "name": "lprint_dymo_rendjob",
    "parent": null,
    "hierarchy": "lprint_dymo_rendjob",
    "code": " bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rendjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_dymo_t\t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n\n  (void)options;\n\n  free(dymo);\n  papplJobSetData(job, NULL);\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "global_variable",
    "start_line": 326,
    "end_line": 326,
    "code": "_dymo_t\t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function",
    "start_line": 342,
    "end_line": 379,
    "name": "lprint_dymo_rendpage",
    "parent": null,
    "hierarchy": "lprint_dymo_rendpage",
    "code": " bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rendpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_dymo_t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n  char\t\tbuffer[256];\t\t// Command buffer\n\n\n  (void)page;\n\n  lprint_dymo_rwriteline(job, options, device, options->header.cupsHeight, NULL);\n\n  switch (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n        break;\n\n    case LPRINT_DLANG_TAPE :\n\t// Skip and cut...\n        papplDevicePrintf(device, \"\\033D%c\", 0);\n        memset(buffer, 0x16, dymo->min_leader);\n        papplDeviceWrite(device, buffer, dymo->min_leader);\n        break;\n  }\n\n  // Eject/cut\n  papplDevicePuts(device, \"\\033E\");\n  papplDeviceFlush(device);\n\n  // Free memory and return...\n  lprintDitherFree(&dymo->dither);\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 342,
    "end_line": 379,
    "code": " bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rendpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_dymo_t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n  char\t\tbuffer[256];\t\t// Command buffer\n\n\n  (void)page;\n\n  lprint_dymo_rwriteline(job, options, device, options->header.cupsHeight, NULL);\n\n  switch (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n        break;\n\n    case LPRINT_DLANG_TAPE :\n\t// Skip and cut...\n        papplDevicePrintf(device, \"\\033D%c\", 0);\n        memset(buffer, 0x16, dymo->min_leader);\n        papplDeviceWrite(device, buffer, dymo->min_leader);\n        break;\n  }\n\n  // Eject/cut\n  papplDevicePuts(device, \"\\033E\");\n  papplDeviceFlush(device);\n\n  // Free memory and return...\n  lprintDitherFree(&dymo->dither);\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 342,
    "end_line": 379,
    "code": " bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rendpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  lprint_dymo_t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n  char\t\tbuffer[256];\t\t// Command buffer\n\n\n  (void)page;\n\n  lprint_dymo_rwriteline(job, options, device, options->header.cupsHeight, NULL);\n\n  switch (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n        break;\n\n    case LPRINT_DLANG_TAPE :\n\t// Skip and cut...\n        papplDevicePrintf(device, \"\\033D%c\", 0);\n        memset(buffer, 0x16, dymo->min_leader);\n        papplDeviceWrite(device, buffer, dymo->min_leader);\n        break;\n  }\n\n  // Eject/cut\n  papplDevicePuts(device, \"\\033E\");\n  papplDeviceFlush(device);\n\n  // Free memory and return...\n  lprintDitherFree(&dymo->dither);\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 348,
    "end_line": 379,
    "code": "rint_dymo_t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n  char\t\tbuffer[256];\t\t// Command buffer\n\n\n  (void)page;\n\n  lprint_dymo_rwriteline(job, options, device, options->header.cupsHeight, NULL);\n\n  switch (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n        break;\n\n    case LPRINT_DLANG_TAPE :\n\t// Skip and cut...\n        papplDevicePrintf(device, \"\\033D%c\", 0);\n        memset(buffer, 0x16, dymo->min_leader);\n        papplDeviceWrite(device, buffer, dymo->min_leader);\n        break;\n  }\n\n  // Eject/cut\n  papplDevicePuts(device, \"\\033E\");\n  papplDeviceFlush(device);\n\n  // Free memory and return...\n  lprintDitherFree(&dymo->dither);\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 348,
    "end_line": 379,
    "code": "rint_dymo_t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n  char\t\tbuffer[256];\t\t// Command buffer\n\n\n  (void)page;\n\n  lprint_dymo_rwriteline(job, options, device, options->header.cupsHeight, NULL);\n\n  switch (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n        break;\n\n    case LPRINT_DLANG_TAPE :\n\t// Skip and cut...\n        papplDevicePrintf(device, \"\\033D%c\", 0);\n        memset(buffer, 0x16, dymo->min_leader);\n        papplDeviceWrite(device, buffer, dymo->min_leader);\n        break;\n  }\n\n  // Eject/cut\n  papplDevicePuts(device, \"\\033E\");\n  papplDeviceFlush(device);\n\n  // Free memory and return...\n  lprintDitherFree(&dymo->dither);\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "global_variable",
    "start_line": 349,
    "end_line": 349,
    "code": "_dymo_t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "anonymous_initializer_block",
    "start_line": 358,
    "end_line": 369,
    "code": " (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n        break;\n\n    case LPRINT_DLANG_TAPE :\n\t// Skip and cut...\n        papplDevicePrintf(device, \"\\033D%c\", 0);\n        memset(buffer, 0x16, dymo->min_leader);\n        papplDeviceWrite(device, buffer, dymo->min_leader);\n        break;\n  }\n\n  //",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function",
    "start_line": 386,
    "end_line": 433,
    "name": "lprint_dymo_rstartjob",
    "parent": null,
    "hierarchy": "lprint_dymo_rstartjob",
    "code": " bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rstartjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_dymo_t\t\t*dymo = (lprint_dymo_t *)calloc(1, sizeof(lprint_dymo_t));\n\t\t\t\t\t// DYMO driver data\n  char\t\t\tbuffer[23];\t// Buffer for reset command\n\n\n  (void)options;\n\n  // Initialize driver data...\n  lprint_dymo_init(job, dymo);\n\n  papplJobSetData(job, dymo);\n\n  // Reset the printer...\n  switch (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n\tpapplDevicePuts(device, \"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033@\");\n        break;\n\n    case LPRINT_DLANG_TAPE :\n        // Send nul bytes to clear input buffer...\n        memset(buffer, 0, sizeof(buffer));\n        papplDeviceWrite(device, buffer, sizeof(buffer));\n\n        // Set tape color to black on white...\n        papplDevicePrintf(device, \"\\033C%c\", 0);\n        break;\n  }\n\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 386,
    "end_line": 433,
    "code": " bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rstartjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_dymo_t\t\t*dymo = (lprint_dymo_t *)calloc(1, sizeof(lprint_dymo_t));\n\t\t\t\t\t// DYMO driver data\n  char\t\t\tbuffer[23];\t// Buffer for reset command\n\n\n  (void)options;\n\n  // Initialize driver data...\n  lprint_dymo_init(job, dymo);\n\n  papplJobSetData(job, dymo);\n\n  // Reset the printer...\n  switch (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n\tpapplDevicePuts(device, \"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033@\");\n        break;\n\n    case LPRINT_DLANG_TAPE :\n        // Send nul bytes to clear input buffer...\n        memset(buffer, 0, sizeof(buffer));\n        papplDeviceWrite(device, buffer, sizeof(buffer));\n\n        // Set tape color to black on white...\n        papplDevicePrintf(device, \"\\033C%c\", 0);\n        break;\n  }\n\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 386,
    "end_line": 433,
    "code": " bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rstartjob(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device)\t\t// I - Output device\n{\n  lprint_dymo_t\t\t*dymo = (lprint_dymo_t *)calloc(1, sizeof(lprint_dymo_t));\n\t\t\t\t\t// DYMO driver data\n  char\t\t\tbuffer[23];\t// Buffer for reset command\n\n\n  (void)options;\n\n  // Initialize driver data...\n  lprint_dymo_init(job, dymo);\n\n  papplJobSetData(job, dymo);\n\n  // Reset the printer...\n  switch (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n\tpapplDevicePuts(device, \"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033@\");\n        break;\n\n    case LPRINT_DLANG_TAPE :\n        // Send nul bytes to clear input buffer...\n        memset(buffer, 0, sizeof(buffer));\n        papplDeviceWrite(device, buffer, sizeof(buffer));\n\n        // Set tape color to black on white...\n        papplDevicePrintf(device, \"\\033C%c\", 0);\n        break;\n  }\n\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 391,
    "end_line": 433,
    "code": "rint_dymo_t\t\t*dymo = (lprint_dymo_t *)calloc(1, sizeof(lprint_dymo_t));\n\t\t\t\t\t// DYMO driver data\n  char\t\t\tbuffer[23];\t// Buffer for reset command\n\n\n  (void)options;\n\n  // Initialize driver data...\n  lprint_dymo_init(job, dymo);\n\n  papplJobSetData(job, dymo);\n\n  // Reset the printer...\n  switch (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n\tpapplDevicePuts(device, \"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033@\");\n        break;\n\n    case LPRINT_DLANG_TAPE :\n        // Send nul bytes to clear input buffer...\n        memset(buffer, 0, sizeof(buffer));\n        papplDeviceWrite(device, buffer, sizeof(buffer));\n\n        // Set tape color to black on white...\n        papplDevicePrintf(device, \"\\033C%c\", 0);\n        break;\n  }\n\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 391,
    "end_line": 433,
    "code": "rint_dymo_t\t\t*dymo = (lprint_dymo_t *)calloc(1, sizeof(lprint_dymo_t));\n\t\t\t\t\t// DYMO driver data\n  char\t\t\tbuffer[23];\t// Buffer for reset command\n\n\n  (void)options;\n\n  // Initialize driver data...\n  lprint_dymo_init(job, dymo);\n\n  papplJobSetData(job, dymo);\n\n  // Reset the printer...\n  switch (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n\tpapplDevicePuts(device, \"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033@\");\n        break;\n\n    case LPRINT_DLANG_TAPE :\n        // Send nul bytes to clear input buffer...\n        memset(buffer, 0, sizeof(buffer));\n        papplDeviceWrite(device, buffer, sizeof(buffer));\n\n        // Set tape color to black on white...\n        papplDevicePrintf(device, \"\\033C%c\", 0);\n        break;\n  }\n\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "global_variable",
    "start_line": 392,
    "end_line": 392,
    "code": "_dymo_t\t\t*dymo = (lprint_dymo_t *)calloc(1, sizeof(lprint_dymo_t));\n\t\t\t\t\t",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "anonymous_initializer_block",
    "start_line": 405,
    "end_line": 429,
    "code": " (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n\tpapplDevicePuts(device, \"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033\\033\\033\\033\\033\\033\\033\\033\\033\\033\"\n\t\t\t\t\"\\033@\");\n        break;\n\n    case LPRINT_DLANG_TAPE :\n        // Send nul bytes to clear input buffer...\n        memset(buffer, 0, sizeof(buffer));\n        papplDeviceWrite(device, buffer, sizeof(buffer));\n\n        // Set tape color to black on white...\n        papplDevicePrintf(device, \"\\033C%c\", 0);\n        break;\n  }\n\n\n  r",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function",
    "start_line": 440,
    "end_line": 522,
    "name": "lprint_dymo_rstartpage",
    "parent": null,
    "hierarchy": "lprint_dymo_rstartpage",
    "code": " bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rstartpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  pappl_pr_driver_data_t data;\t\t// Generic driver data\n  lprint_dymo_t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n  int\t\tdarkness = options->darkness_configured + options->print_darkness;\n\t\t\t\t\t// Combined density\n  const char\t*density = \"cdeg\";\t// Density codes\n  int\t\ti;\t\t\t// Looping var\n  char\t\tbuffer[256];\t\t// Command buffer\n  double\tout_gamma = 1.0;\t// Output gamma correction\n\n\n\n  (void)page;\n\n  if (options->header.cupsWidth > 2048)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Raster data too large for printer.\");\n    return (false);\n  }\n\n  if (options->header.HWResolution[0] == 300)\n    out_gamma = 1.2;\n\n  if (!lprintDitherAlloc(&dymo->dither, job, options, CUPS_CSPACE_K, out_gamma))\n    return (false);\n\n  dymo->feed = 0;\n\n  switch (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n\tpapplDevicePrintf(device, \"\\033Q%c%c\", 0, 0);\n\tpapplDevicePrintf(device, \"\\033B%c\", 0);\n\tpapplDevicePrintf(device, \"\\033L%c%c\", options->header.cupsHeight >> 8, options->header.cupsHeight);\n\tpapplDevicePrintf(device, \"\\033D%c\", dymo->dither.out_width);\n\n\tpapplPrinterGetDriverData(papplJobGetPrinter(job), &data);\n\n\t// Match roll number to loaded media...\n\tfor (i = 0; i < data.num_source; i ++)\n\t{\n\t  if (data.media_ready[i].size_width == options->media.size_width && data.media_ready[i].size_length == options->media.size_length)\n\t    break;\n\t}\n\n\tif (i >= data.num_source)\n\t{\n\t  // No match, so use what the client sent...\n\t  i = !strcmp(options->media.source, \"alternate-roll\");\n\t}\n\n\tpapplDevicePrintf(device, \"\\033q%d\", i + 1);\n\n\tif (darkness < 0)\n\t  darkness = 0;\n\telse if (darkness > 100)\n\t  darkness = 100;\n\n\tpapplDevicePrintf(device, \"\\033%c\", density[3 * darkness / 100]);\n\tbreak;\n\n    case LPRINT_DLANG_TAPE :\n        // Set line width...\n        papplDevicePrintf(device, \"\\033D%c\", 0);\n\n        // Feed for the leader...\n\tmemset(buffer, 0x16, dymo->normal_leader);\n\tpapplDeviceWrite(device, buffer, dymo->normal_leader);\n\n        // Set indentation...\n        papplDevicePrintf(device, \"\\033B%c\", 0);\n        break;\n  }\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 440,
    "end_line": 522,
    "code": " bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rstartpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  pappl_pr_driver_data_t data;\t\t// Generic driver data\n  lprint_dymo_t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n  int\t\tdarkness = options->darkness_configured + options->print_darkness;\n\t\t\t\t\t// Combined density\n  const char\t*density = \"cdeg\";\t// Density codes\n  int\t\ti;\t\t\t// Looping var\n  char\t\tbuffer[256];\t\t// Command buffer\n  double\tout_gamma = 1.0;\t// Output gamma correction\n\n\n\n  (void)page;\n\n  if (options->header.cupsWidth > 2048)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Raster data too large for printer.\");\n    return (false);\n  }\n\n  if (options->header.HWResolution[0] == 300)\n    out_gamma = 1.2;\n\n  if (!lprintDitherAlloc(&dymo->dither, job, options, CUPS_CSPACE_K, out_gamma))\n    return (false);\n\n  dymo->feed = 0;\n\n  switch (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n\tpapplDevicePrintf(device, \"\\033Q%c%c\", 0, 0);\n\tpapplDevicePrintf(device, \"\\033B%c\", 0);\n\tpapplDevicePrintf(device, \"\\033L%c%c\", options->header.cupsHeight >> 8, options->header.cupsHeight);\n\tpapplDevicePrintf(device, \"\\033D%c\", dymo->dither.out_width);\n\n\tpapplPrinterGetDriverData(papplJobGetPrinter(job), &data);\n\n\t// Match roll number to loaded media...\n\tfor (i = 0; i < data.num_source; i ++)\n\t{\n\t  if (data.media_ready[i].size_width == options->media.size_width && data.media_ready[i].size_length == options->media.size_length)\n\t    break;\n\t}\n\n\tif (i >= data.num_source)\n\t{\n\t  // No match, so use what the client sent...\n\t  i = !strcmp(options->media.source, \"alternate-roll\");\n\t}\n\n\tpapplDevicePrintf(device, \"\\033q%d\", i + 1);\n\n\tif (darkness < 0)\n\t  darkness = 0;\n\telse if (darkness > 100)\n\t  darkness = 100;\n\n\tpapplDevicePrintf(device, \"\\033%c\", density[3 * darkness / 100]);\n\tbreak;\n\n    case LPRINT_DLANG_TAPE :\n        // Set line width...\n        papplDevicePrintf(device, \"\\033D%c\", 0);\n\n        // Feed for the leader...\n\tmemset(buffer, 0x16, dymo->normal_leader);\n\tpapplDeviceWrite(device, buffer, dymo->normal_leader);\n\n        // Set indentation...\n        papplDevicePrintf(device, \"\\033B%c\", 0);\n        break;\n  }\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 440,
    "end_line": 522,
    "code": " bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rstartpage(\n    pappl_job_t        *job,\t\t// I - Job\n    pappl_pr_options_t *options,\t// I - Job options\n    pappl_device_t     *device,\t\t// I - Output device\n    unsigned           page)\t\t// I - Page number\n{\n  pappl_pr_driver_data_t data;\t\t// Generic driver data\n  lprint_dymo_t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n  int\t\tdarkness = options->darkness_configured + options->print_darkness;\n\t\t\t\t\t// Combined density\n  const char\t*density = \"cdeg\";\t// Density codes\n  int\t\ti;\t\t\t// Looping var\n  char\t\tbuffer[256];\t\t// Command buffer\n  double\tout_gamma = 1.0;\t// Output gamma correction\n\n\n\n  (void)page;\n\n  if (options->header.cupsWidth > 2048)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Raster data too large for printer.\");\n    return (false);\n  }\n\n  if (options->header.HWResolution[0] == 300)\n    out_gamma = 1.2;\n\n  if (!lprintDitherAlloc(&dymo->dither, job, options, CUPS_CSPACE_K, out_gamma))\n    return (false);\n\n  dymo->feed = 0;\n\n  switch (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n\tpapplDevicePrintf(device, \"\\033Q%c%c\", 0, 0);\n\tpapplDevicePrintf(device, \"\\033B%c\", 0);\n\tpapplDevicePrintf(device, \"\\033L%c%c\", options->header.cupsHeight >> 8, options->header.cupsHeight);\n\tpapplDevicePrintf(device, \"\\033D%c\", dymo->dither.out_width);\n\n\tpapplPrinterGetDriverData(papplJobGetPrinter(job), &data);\n\n\t// Match roll number to loaded media...\n\tfor (i = 0; i < data.num_source; i ++)\n\t{\n\t  if (data.media_ready[i].size_width == options->media.size_width && data.media_ready[i].size_length == options->media.size_length)\n\t    break;\n\t}\n\n\tif (i >= data.num_source)\n\t{\n\t  // No match, so use what the client sent...\n\t  i = !strcmp(options->media.source, \"alternate-roll\");\n\t}\n\n\tpapplDevicePrintf(device, \"\\033q%d\", i + 1);\n\n\tif (darkness < 0)\n\t  darkness = 0;\n\telse if (darkness > 100)\n\t  darkness = 100;\n\n\tpapplDevicePrintf(device, \"\\033%c\", density[3 * darkness / 100]);\n\tbreak;\n\n    case LPRINT_DLANG_TAPE :\n        // Set line width...\n        papplDevicePrintf(device, \"\\033D%c\", 0);\n\n        // Feed for the leader...\n\tmemset(buffer, 0x16, dymo->normal_leader);\n\tpapplDeviceWrite(device, buffer, dymo->normal_leader);\n\n        // Set indentation...\n        papplDevicePrintf(device, \"\\033B%c\", 0);\n        break;\n  }\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 446,
    "end_line": 522,
    "code": "ppl_pr_driver_data_t data;\t\t// Generic driver data\n  lprint_dymo_t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n  int\t\tdarkness = options->darkness_configured + options->print_darkness;\n\t\t\t\t\t// Combined density\n  const char\t*density = \"cdeg\";\t// Density codes\n  int\t\ti;\t\t\t// Looping var\n  char\t\tbuffer[256];\t\t// Command buffer\n  double\tout_gamma = 1.0;\t// Output gamma correction\n\n\n\n  (void)page;\n\n  if (options->header.cupsWidth > 2048)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Raster data too large for printer.\");\n    return (false);\n  }\n\n  if (options->header.HWResolution[0] == 300)\n    out_gamma = 1.2;\n\n  if (!lprintDitherAlloc(&dymo->dither, job, options, CUPS_CSPACE_K, out_gamma))\n    return (false);\n\n  dymo->feed = 0;\n\n  switch (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n\tpapplDevicePrintf(device, \"\\033Q%c%c\", 0, 0);\n\tpapplDevicePrintf(device, \"\\033B%c\", 0);\n\tpapplDevicePrintf(device, \"\\033L%c%c\", options->header.cupsHeight >> 8, options->header.cupsHeight);\n\tpapplDevicePrintf(device, \"\\033D%c\", dymo->dither.out_width);\n\n\tpapplPrinterGetDriverData(papplJobGetPrinter(job), &data);\n\n\t// Match roll number to loaded media...\n\tfor (i = 0; i < data.num_source; i ++)\n\t{\n\t  if (data.media_ready[i].size_width == options->media.size_width && data.media_ready[i].size_length == options->media.size_length)\n\t    break;\n\t}\n\n\tif (i >= data.num_source)\n\t{\n\t  // No match, so use what the client sent...\n\t  i = !strcmp(options->media.source, \"alternate-roll\");\n\t}\n\n\tpapplDevicePrintf(device, \"\\033q%d\", i + 1);\n\n\tif (darkness < 0)\n\t  darkness = 0;\n\telse if (darkness > 100)\n\t  darkness = 100;\n\n\tpapplDevicePrintf(device, \"\\033%c\", density[3 * darkness / 100]);\n\tbreak;\n\n    case LPRINT_DLANG_TAPE :\n        // Set line width...\n        papplDevicePrintf(device, \"\\033D%c\", 0);\n\n        // Feed for the leader...\n\tmemset(buffer, 0x16, dymo->normal_leader);\n\tpapplDeviceWrite(device, buffer, dymo->normal_leader);\n\n        // Set indentation...\n        papplDevicePrintf(device, \"\\033B%c\", 0);\n        break;\n  }\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 446,
    "end_line": 522,
    "code": "ppl_pr_driver_data_t data;\t\t// Generic driver data\n  lprint_dymo_t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n  int\t\tdarkness = options->darkness_configured + options->print_darkness;\n\t\t\t\t\t// Combined density\n  const char\t*density = \"cdeg\";\t// Density codes\n  int\t\ti;\t\t\t// Looping var\n  char\t\tbuffer[256];\t\t// Command buffer\n  double\tout_gamma = 1.0;\t// Output gamma correction\n\n\n\n  (void)page;\n\n  if (options->header.cupsWidth > 2048)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Raster data too large for printer.\");\n    return (false);\n  }\n\n  if (options->header.HWResolution[0] == 300)\n    out_gamma = 1.2;\n\n  if (!lprintDitherAlloc(&dymo->dither, job, options, CUPS_CSPACE_K, out_gamma))\n    return (false);\n\n  dymo->feed = 0;\n\n  switch (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n\tpapplDevicePrintf(device, \"\\033Q%c%c\", 0, 0);\n\tpapplDevicePrintf(device, \"\\033B%c\", 0);\n\tpapplDevicePrintf(device, \"\\033L%c%c\", options->header.cupsHeight >> 8, options->header.cupsHeight);\n\tpapplDevicePrintf(device, \"\\033D%c\", dymo->dither.out_width);\n\n\tpapplPrinterGetDriverData(papplJobGetPrinter(job), &data);\n\n\t// Match roll number to loaded media...\n\tfor (i = 0; i < data.num_source; i ++)\n\t{\n\t  if (data.media_ready[i].size_width == options->media.size_width && data.media_ready[i].size_length == options->media.size_length)\n\t    break;\n\t}\n\n\tif (i >= data.num_source)\n\t{\n\t  // No match, so use what the client sent...\n\t  i = !strcmp(options->media.source, \"alternate-roll\");\n\t}\n\n\tpapplDevicePrintf(device, \"\\033q%d\", i + 1);\n\n\tif (darkness < 0)\n\t  darkness = 0;\n\telse if (darkness > 100)\n\t  darkness = 100;\n\n\tpapplDevicePrintf(device, \"\\033%c\", density[3 * darkness / 100]);\n\tbreak;\n\n    case LPRINT_DLANG_TAPE :\n        // Set line width...\n        papplDevicePrintf(device, \"\\033D%c\", 0);\n\n        // Feed for the leader...\n\tmemset(buffer, 0x16, dymo->normal_leader);\n\tpapplDeviceWrite(device, buffer, dymo->normal_leader);\n\n        // Set indentation...\n        papplDevicePrintf(device, \"\\033B%c\", 0);\n        break;\n  }\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "global_variable",
    "start_line": 448,
    "end_line": 448,
    "code": "_dymo_t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "global_variable",
    "start_line": 450,
    "end_line": 450,
    "code": "arkness = options->darkness_configured + options->print_darkness;\n\t\t\t\t\t",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 450,
    "end_line": 450,
    "code": "arkness = options->darkness_configured + options->print_darkness;\n\t\t\t\t\t",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 450,
    "end_line": 450,
    "code": "ss = options->darkness_configured + options->print_darkness;\n\t\t\t\t",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "global_variable",
    "start_line": 452,
    "end_line": 452,
    "code": "char\t*density = \"cdeg\";\t// De",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "global_variable",
    "start_line": 455,
    "end_line": 455,
    "code": "\tout_gamma = 1.0;\t// Ou",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 455,
    "end_line": 455,
    "code": "\tout_gamma = 1.0;\t// Ou",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 455,
    "end_line": 455,
    "code": "mma = 1.0;\t// O",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "anonymous_initializer_block",
    "start_line": 461,
    "end_line": 465,
    "code": "tions->header.cupsWidth > 2048)\n  {\n    papplLogJob(job, PAPPL_LOGLEVEL_ERROR, \"Raster data too large for printer.\");\n    return (false);\n  }\n\n  if",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 467,
    "end_line": 468,
    "code": "tions->header.HWResolution[0] == 300)\n    out_gamma = 1.2;\n\n  if",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 468,
    "end_line": 468,
    "code": "mma = 1.2;\n\n  if",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 468,
    "end_line": 468,
    "code": "mma = 1.2;\n\n  i",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 475,
    "end_line": 519,
    "code": " (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n\tpapplDevicePrintf(device, \"\\033Q%c%c\", 0, 0);\n\tpapplDevicePrintf(device, \"\\033B%c\", 0);\n\tpapplDevicePrintf(device, \"\\033L%c%c\", options->header.cupsHeight >> 8, options->header.cupsHeight);\n\tpapplDevicePrintf(device, \"\\033D%c\", dymo->dither.out_width);\n\n\tpapplPrinterGetDriverData(papplJobGetPrinter(job), &data);\n\n\t// Match roll number to loaded media...\n\tfor (i = 0; i < data.num_source; i ++)\n\t{\n\t  if (data.media_ready[i].size_width == options->media.size_width && data.media_ready[i].size_length == options->media.size_length)\n\t    break;\n\t}\n\n\tif (i >= data.num_source)\n\t{\n\t  // No match, so use what the client sent...\n\t  i = !strcmp(options->media.source, \"alternate-roll\");\n\t}\n\n\tpapplDevicePrintf(device, \"\\033q%d\", i + 1);\n\n\tif (darkness < 0)\n\t  darkness = 0;\n\telse if (darkness > 100)\n\t  darkness = 100;\n\n\tpapplDevicePrintf(device, \"\\033%c\", density[3 * darkness / 100]);\n\tbreak;\n\n    case LPRINT_DLANG_TAPE :\n        // Set line width...\n        papplDevicePrintf(device, \"\\033D%c\", 0);\n\n        // Feed for the leader...\n\tmemset(buffer, 0x16, dymo->normal_leader);\n\tpapplDeviceWrite(device, buffer, dymo->normal_leader);\n\n        // Set indentation...\n        papplDevicePrintf(device, \"\\033B%c\", 0);\n        break;\n  }\n\n  re",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 475,
    "end_line": 519,
    "code": " (dymo->dlang)\n  {\n    case LPRINT_DLANG_LABEL :\n\tpapplDevicePrintf(device, \"\\033Q%c%c\", 0, 0);\n\tpapplDevicePrintf(device, \"\\033B%c\", 0);\n\tpapplDevicePrintf(device, \"\\033L%c%c\", options->header.cupsHeight >> 8, options->header.cupsHeight);\n\tpapplDevicePrintf(device, \"\\033D%c\", dymo->dither.out_width);\n\n\tpapplPrinterGetDriverData(papplJobGetPrinter(job), &data);\n\n\t// Match roll number to loaded media...\n\tfor (i = 0; i < data.num_source; i ++)\n\t{\n\t  if (data.media_ready[i].size_width == options->media.size_width && data.media_ready[i].size_length == options->media.size_length)\n\t    break;\n\t}\n\n\tif (i >= data.num_source)\n\t{\n\t  // No match, so use what the client sent...\n\t  i = !strcmp(options->media.source, \"alternate-roll\");\n\t}\n\n\tpapplDevicePrintf(device, \"\\033q%d\", i + 1);\n\n\tif (darkness < 0)\n\t  darkness = 0;\n\telse if (darkness > 100)\n\t  darkness = 100;\n\n\tpapplDevicePrintf(device, \"\\033%c\", density[3 * darkness / 100]);\n\tbreak;\n\n    case LPRINT_DLANG_TAPE :\n        // Set line width...\n        papplDevicePrintf(device, \"\\033D%c\", 0);\n\n        // Feed for the leader...\n\tmemset(buffer, 0x16, dymo->normal_leader);\n\tpapplDeviceWrite(device, buffer, dymo->normal_leader);\n\n        // Set indentation...\n        papplDevicePrintf(device, \"\\033B%c\", 0);\n        break;\n  }\n\n  re",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 476,
    "end_line": 519,
    "code": "case LPRINT_DLANG_LABEL :\n\tpapplDevicePrintf(device, \"\\033Q%c%c\", 0, 0);\n\tpapplDevicePrintf(device, \"\\033B%c\", 0);\n\tpapplDevicePrintf(device, \"\\033L%c%c\", options->header.cupsHeight >> 8, options->header.cupsHeight);\n\tpapplDevicePrintf(device, \"\\033D%c\", dymo->dither.out_width);\n\n\tpapplPrinterGetDriverData(papplJobGetPrinter(job), &data);\n\n\t// Match roll number to loaded media...\n\tfor (i = 0; i < data.num_source; i ++)\n\t{\n\t  if (data.media_ready[i].size_width == options->media.size_width && data.media_ready[i].size_length == options->media.size_length)\n\t    break;\n\t}\n\n\tif (i >= data.num_source)\n\t{\n\t  // No match, so use what the client sent...\n\t  i = !strcmp(options->media.source, \"alternate-roll\");\n\t}\n\n\tpapplDevicePrintf(device, \"\\033q%d\", i + 1);\n\n\tif (darkness < 0)\n\t  darkness = 0;\n\telse if (darkness > 100)\n\t  darkness = 100;\n\n\tpapplDevicePrintf(device, \"\\033%c\", density[3 * darkness / 100]);\n\tbreak;\n\n    case LPRINT_DLANG_TAPE :\n        // Set line width...\n        papplDevicePrintf(device, \"\\033D%c\", 0);\n\n        // Feed for the leader...\n\tmemset(buffer, 0x16, dymo->normal_leader);\n\tpapplDeviceWrite(device, buffer, dymo->normal_leader);\n\n        // Set indentation...\n        papplDevicePrintf(device, \"\\033B%c\", 0);\n        break;\n  }\n\n  re",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 476,
    "end_line": 519,
    "code": "case LPRINT_DLANG_LABEL :\n\tpapplDevicePrintf(device, \"\\033Q%c%c\", 0, 0);\n\tpapplDevicePrintf(device, \"\\033B%c\", 0);\n\tpapplDevicePrintf(device, \"\\033L%c%c\", options->header.cupsHeight >> 8, options->header.cupsHeight);\n\tpapplDevicePrintf(device, \"\\033D%c\", dymo->dither.out_width);\n\n\tpapplPrinterGetDriverData(papplJobGetPrinter(job), &data);\n\n\t// Match roll number to loaded media...\n\tfor (i = 0; i < data.num_source; i ++)\n\t{\n\t  if (data.media_ready[i].size_width == options->media.size_width && data.media_ready[i].size_length == options->media.size_length)\n\t    break;\n\t}\n\n\tif (i >= data.num_source)\n\t{\n\t  // No match, so use what the client sent...\n\t  i = !strcmp(options->media.source, \"alternate-roll\");\n\t}\n\n\tpapplDevicePrintf(device, \"\\033q%d\", i + 1);\n\n\tif (darkness < 0)\n\t  darkness = 0;\n\telse if (darkness > 100)\n\t  darkness = 100;\n\n\tpapplDevicePrintf(device, \"\\033%c\", density[3 * darkness / 100]);\n\tbreak;\n\n    case LPRINT_DLANG_TAPE :\n        // Set line width...\n        papplDevicePrintf(device, \"\\033D%c\", 0);\n\n        // Feed for the leader...\n\tmemset(buffer, 0x16, dymo->normal_leader);\n\tpapplDeviceWrite(device, buffer, dymo->normal_leader);\n\n        // Set indentation...\n        papplDevicePrintf(device, \"\\033B%c\", 0);\n        break;\n  }\n\n  re",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 477,
    "end_line": 506,
    "code": "PRINT_DLANG_LABEL :\n\tpapplDevicePrintf(device, \"\\033Q%c%c\", 0, 0);\n\tpapplDevicePrintf(device, \"\\033B%c\", 0);\n\tpapplDevicePrintf(device, \"\\033L%c%c\", options->header.cupsHeight >> 8, options->header.cupsHeight);\n\tpapplDevicePrintf(device, \"\\033D%c\", dymo->dither.out_width);\n\n\tpapplPrinterGetDriverData(papplJobGetPrinter(job), &data);\n\n\t// Match roll number to loaded media...\n\tfor (i = 0; i < data.num_source; i ++)\n\t{\n\t  if (data.media_ready[i].size_width == options->media.size_width && data.media_ready[i].size_length == options->media.size_length)\n\t    break;\n\t}\n\n\tif (i >= data.num_source)\n\t{\n\t  // No match, so use what the client sent...\n\t  i = !strcmp(options->media.source, \"alternate-roll\");\n\t}\n\n\tpapplDevicePrintf(device, \"\\033q%d\", i + 1);\n\n\tif (darkness < 0)\n\t  darkness = 0;\n\telse if (darkness > 100)\n\t  darkness = 100;\n\n\tpapplDevicePrintf(device, \"\\033%c\", density[3 * darkness / 100]);\n\tbreak;\n\n    ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 477,
    "end_line": 506,
    "code": "PRINT_DLANG_LABEL :\n\tpapplDevicePrintf(device, \"\\033Q%c%c\", 0, 0);\n\tpapplDevicePrintf(device, \"\\033B%c\", 0);\n\tpapplDevicePrintf(device, \"\\033L%c%c\", options->header.cupsHeight >> 8, options->header.cupsHeight);\n\tpapplDevicePrintf(device, \"\\033D%c\", dymo->dither.out_width);\n\n\tpapplPrinterGetDriverData(papplJobGetPrinter(job), &data);\n\n\t// Match roll number to loaded media...\n\tfor (i = 0; i < data.num_source; i ++)\n\t{\n\t  if (data.media_ready[i].size_width == options->media.size_width && data.media_ready[i].size_length == options->media.size_length)\n\t    break;\n\t}\n\n\tif (i >= data.num_source)\n\t{\n\t  // No match, so use what the client sent...\n\t  i = !strcmp(options->media.source, \"alternate-roll\");\n\t}\n\n\tpapplDevicePrintf(device, \"\\033q%d\", i + 1);\n\n\tif (darkness < 0)\n\t  darkness = 0;\n\telse if (darkness > 100)\n\t  darkness = 100;\n\n\tpapplDevicePrintf(device, \"\\033%c\", density[3 * darkness / 100]);\n\tbreak;\n\n    ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 486,
    "end_line": 490,
    "code": " = 0; i < data.num_source; i ++)\n\t{\n\t  if (data.media_ready[i].size_width == options->media.size_width && data.media_ready[i].size_length == options->media.size_length)\n\t    break;\n\t}\n\n\tif ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 486,
    "end_line": 490,
    "code": " = 0; i < data.num_source; i ++)\n\t{\n\t  if (data.media_ready[i].size_width == options->media.size_width && data.media_ready[i].size_length == options->media.size_length)\n\t    break;\n\t}\n\n\tif ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 487,
    "end_line": 490,
    "code": "f (data.media_ready[i].size_width == options->media.size_width && data.media_ready[i].size_length == options->media.size_length)\n\t    break;\n\t}\n\n\tif ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 487,
    "end_line": 490,
    "code": "f (data.media_ready[i].size_width == options->media.size_width && data.media_ready[i].size_length == options->media.size_length)\n\t    break;\n\t}\n\n\tif ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 488,
    "end_line": 489,
    "code": "ta.media_ready[i].size_width == options->media.size_width && data.media_ready[i].size_length == options->media.size_length)\n\t    break;\n\t}\n\n\t",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 492,
    "end_line": 496,
    "code": ">= data.num_source)\n\t{\n\t  // No match, so use what the client sent...\n\t  i = !strcmp(options->media.source, \"alternate-roll\");\n\t}\n\n\tpap",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 492,
    "end_line": 496,
    "code": ">= data.num_source)\n\t{\n\t  // No match, so use what the client sent...\n\t  i = !strcmp(options->media.source, \"alternate-roll\");\n\t}\n\n\tpap",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 493,
    "end_line": 496,
    "code": "/ No match, so use what the client sent...\n\t  i = !strcmp(options->media.source, \"alternate-roll\");\n\t}\n\n\tpap",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 493,
    "end_line": 496,
    "code": "/ No match, so use what the client sent...\n\t  i = !strcmp(options->media.source, \"alternate-roll\");\n\t}\n\n\tpap",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function",
    "start_line": 529,
    "end_line": 601,
    "name": "lprint_dymo_rwriteline",
    "parent": null,
    "hierarchy": "lprint_dymo_rwriteline",
    "code": " bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rwriteline(\n    pappl_job_t         *job,\t\t// I - Job\n    pappl_pr_options_t  *options,\t// I - Job options\n    pappl_device_t      *device,\t// I - Output device\n    unsigned            y,\t\t// I - Line number\n    const unsigned char *line)\t\t// I - Line\n{\n  lprint_dymo_t\t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n  unsigned char\t\tbyte;\t\t// Byte to write\n\n\n  if (!lprintDitherLine(&dymo->dither, y, line))\n    return (true);\n\n  if (dymo->dither.output[0] || memcmp(dymo->dither.output, dymo->dither.output + 1, dymo->dither.out_width - 1))\n  {\n    // Not a blank line\n    switch (dymo->dlang)\n    {\n      case LPRINT_DLANG_LABEL :\n\t  // Feed for any prior blank lines...\n\t  if (dymo->feed)\n\t  {\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t    papplDevicePrintf(device, \"\\033f\\001%c\", dymo->feed);\n\t    dymo->feed = 0;\n\t  }\n\n\t  // Then write the non-blank line...\n\t  byte = 0x16;\n\t  papplDeviceWrite(device, &byte, 1);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n\t  break;\n\n      case LPRINT_DLANG_TAPE :\n\t  if (dymo->feed)\n\t  {\n\t    unsigned char buffer[256];\t// Write buffer\n\n            papplDevicePrintf(device, \"\\033D%c\", 0);\n\t    memset(buffer, 0x16, sizeof(buffer));\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n            if (dymo->feed > 0)\n            {\n\t      papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n\t  papplDevicePrintf(device, \"\\033D%c\\026\", dymo->dither.out_width);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n          break;\n    }\n  }\n  else\n  {\n    // Blank line, accumulate the feed...\n    dymo->feed ++;\n  }\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 529,
    "end_line": 601,
    "code": " bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rwriteline(\n    pappl_job_t         *job,\t\t// I - Job\n    pappl_pr_options_t  *options,\t// I - Job options\n    pappl_device_t      *device,\t// I - Output device\n    unsigned            y,\t\t// I - Line number\n    const unsigned char *line)\t\t// I - Line\n{\n  lprint_dymo_t\t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n  unsigned char\t\tbyte;\t\t// Byte to write\n\n\n  if (!lprintDitherLine(&dymo->dither, y, line))\n    return (true);\n\n  if (dymo->dither.output[0] || memcmp(dymo->dither.output, dymo->dither.output + 1, dymo->dither.out_width - 1))\n  {\n    // Not a blank line\n    switch (dymo->dlang)\n    {\n      case LPRINT_DLANG_LABEL :\n\t  // Feed for any prior blank lines...\n\t  if (dymo->feed)\n\t  {\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t    papplDevicePrintf(device, \"\\033f\\001%c\", dymo->feed);\n\t    dymo->feed = 0;\n\t  }\n\n\t  // Then write the non-blank line...\n\t  byte = 0x16;\n\t  papplDeviceWrite(device, &byte, 1);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n\t  break;\n\n      case LPRINT_DLANG_TAPE :\n\t  if (dymo->feed)\n\t  {\n\t    unsigned char buffer[256];\t// Write buffer\n\n            papplDevicePrintf(device, \"\\033D%c\", 0);\n\t    memset(buffer, 0x16, sizeof(buffer));\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n            if (dymo->feed > 0)\n            {\n\t      papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n\t  papplDevicePrintf(device, \"\\033D%c\\026\", dymo->dither.out_width);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n          break;\n    }\n  }\n  else\n  {\n    // Blank line, accumulate the feed...\n    dymo->feed ++;\n  }\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 529,
    "end_line": 601,
    "code": " bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_rwriteline(\n    pappl_job_t         *job,\t\t// I - Job\n    pappl_pr_options_t  *options,\t// I - Job options\n    pappl_device_t      *device,\t// I - Output device\n    unsigned            y,\t\t// I - Line number\n    const unsigned char *line)\t\t// I - Line\n{\n  lprint_dymo_t\t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n  unsigned char\t\tbyte;\t\t// Byte to write\n\n\n  if (!lprintDitherLine(&dymo->dither, y, line))\n    return (true);\n\n  if (dymo->dither.output[0] || memcmp(dymo->dither.output, dymo->dither.output + 1, dymo->dither.out_width - 1))\n  {\n    // Not a blank line\n    switch (dymo->dlang)\n    {\n      case LPRINT_DLANG_LABEL :\n\t  // Feed for any prior blank lines...\n\t  if (dymo->feed)\n\t  {\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t    papplDevicePrintf(device, \"\\033f\\001%c\", dymo->feed);\n\t    dymo->feed = 0;\n\t  }\n\n\t  // Then write the non-blank line...\n\t  byte = 0x16;\n\t  papplDeviceWrite(device, &byte, 1);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n\t  break;\n\n      case LPRINT_DLANG_TAPE :\n\t  if (dymo->feed)\n\t  {\n\t    unsigned char buffer[256];\t// Write buffer\n\n            papplDevicePrintf(device, \"\\033D%c\", 0);\n\t    memset(buffer, 0x16, sizeof(buffer));\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n            if (dymo->feed > 0)\n            {\n\t      papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n\t  papplDevicePrintf(device, \"\\033D%c\\026\", dymo->dither.out_width);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n          break;\n    }\n  }\n  else\n  {\n    // Blank line, accumulate the feed...\n    dymo->feed ++;\n  }\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 536,
    "end_line": 601,
    "code": "rint_dymo_t\t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n  unsigned char\t\tbyte;\t\t// Byte to write\n\n\n  if (!lprintDitherLine(&dymo->dither, y, line))\n    return (true);\n\n  if (dymo->dither.output[0] || memcmp(dymo->dither.output, dymo->dither.output + 1, dymo->dither.out_width - 1))\n  {\n    // Not a blank line\n    switch (dymo->dlang)\n    {\n      case LPRINT_DLANG_LABEL :\n\t  // Feed for any prior blank lines...\n\t  if (dymo->feed)\n\t  {\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t    papplDevicePrintf(device, \"\\033f\\001%c\", dymo->feed);\n\t    dymo->feed = 0;\n\t  }\n\n\t  // Then write the non-blank line...\n\t  byte = 0x16;\n\t  papplDeviceWrite(device, &byte, 1);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n\t  break;\n\n      case LPRINT_DLANG_TAPE :\n\t  if (dymo->feed)\n\t  {\n\t    unsigned char buffer[256];\t// Write buffer\n\n            papplDevicePrintf(device, \"\\033D%c\", 0);\n\t    memset(buffer, 0x16, sizeof(buffer));\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n            if (dymo->feed > 0)\n            {\n\t      papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n\t  papplDevicePrintf(device, \"\\033D%c\\026\", dymo->dither.out_width);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n          break;\n    }\n  }\n  else\n  {\n    // Blank line, accumulate the feed...\n    dymo->feed ++;\n  }\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 536,
    "end_line": 601,
    "code": "rint_dymo_t\t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t// DYMO driver data\n  unsigned char\t\tbyte;\t\t// Byte to write\n\n\n  if (!lprintDitherLine(&dymo->dither, y, line))\n    return (true);\n\n  if (dymo->dither.output[0] || memcmp(dymo->dither.output, dymo->dither.output + 1, dymo->dither.out_width - 1))\n  {\n    // Not a blank line\n    switch (dymo->dlang)\n    {\n      case LPRINT_DLANG_LABEL :\n\t  // Feed for any prior blank lines...\n\t  if (dymo->feed)\n\t  {\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t    papplDevicePrintf(device, \"\\033f\\001%c\", dymo->feed);\n\t    dymo->feed = 0;\n\t  }\n\n\t  // Then write the non-blank line...\n\t  byte = 0x16;\n\t  papplDeviceWrite(device, &byte, 1);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n\t  break;\n\n      case LPRINT_DLANG_TAPE :\n\t  if (dymo->feed)\n\t  {\n\t    unsigned char buffer[256];\t// Write buffer\n\n            papplDevicePrintf(device, \"\\033D%c\", 0);\n\t    memset(buffer, 0x16, sizeof(buffer));\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n            if (dymo->feed > 0)\n            {\n\t      papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n\t  papplDevicePrintf(device, \"\\033D%c\\026\", dymo->dither.out_width);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n          break;\n    }\n  }\n  else\n  {\n    // Blank line, accumulate the feed...\n    dymo->feed ++;\n  }\n\n  return (true);\n}\n\n\n//\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "global_variable",
    "start_line": 537,
    "end_line": 537,
    "code": "_dymo_t\t\t*dymo = (lprint_dymo_t *)papplJobGetData(job);\n\t\t\t\t\t",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 545,
    "end_line": 598,
    "code": "mo->dither.output[0] || memcmp(dymo->dither.output, dymo->dither.output + 1, dymo->dither.out_width - 1))\n  {\n    // Not a blank line\n    switch (dymo->dlang)\n    {\n      case LPRINT_DLANG_LABEL :\n\t  // Feed for any prior blank lines...\n\t  if (dymo->feed)\n\t  {\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t    papplDevicePrintf(device, \"\\033f\\001%c\", dymo->feed);\n\t    dymo->feed = 0;\n\t  }\n\n\t  // Then write the non-blank line...\n\t  byte = 0x16;\n\t  papplDeviceWrite(device, &byte, 1);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n\t  break;\n\n      case LPRINT_DLANG_TAPE :\n\t  if (dymo->feed)\n\t  {\n\t    unsigned char buffer[256];\t// Write buffer\n\n            papplDevicePrintf(device, \"\\033D%c\", 0);\n\t    memset(buffer, 0x16, sizeof(buffer));\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n            if (dymo->feed > 0)\n            {\n\t      papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n\t  papplDevicePrintf(device, \"\\033D%c\\026\", dymo->dither.out_width);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n          break;\n    }\n  }\n  else\n  {\n    // Blank line, accumulate the feed...\n    dymo->feed ++;\n  }\n\n  re",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 545,
    "end_line": 598,
    "code": "mo->dither.output[0] || memcmp(dymo->dither.output, dymo->dither.output + 1, dymo->dither.out_width - 1))\n  {\n    // Not a blank line\n    switch (dymo->dlang)\n    {\n      case LPRINT_DLANG_LABEL :\n\t  // Feed for any prior blank lines...\n\t  if (dymo->feed)\n\t  {\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t    papplDevicePrintf(device, \"\\033f\\001%c\", dymo->feed);\n\t    dymo->feed = 0;\n\t  }\n\n\t  // Then write the non-blank line...\n\t  byte = 0x16;\n\t  papplDeviceWrite(device, &byte, 1);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n\t  break;\n\n      case LPRINT_DLANG_TAPE :\n\t  if (dymo->feed)\n\t  {\n\t    unsigned char buffer[256];\t// Write buffer\n\n            papplDevicePrintf(device, \"\\033D%c\", 0);\n\t    memset(buffer, 0x16, sizeof(buffer));\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n            if (dymo->feed > 0)\n            {\n\t      papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n\t  papplDevicePrintf(device, \"\\033D%c\\026\", dymo->dither.out_width);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n          break;\n    }\n  }\n  else\n  {\n    // Blank line, accumulate the feed...\n    dymo->feed ++;\n  }\n\n  re",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 546,
    "end_line": 593,
    "code": "// Not a blank line\n    switch (dymo->dlang)\n    {\n      case LPRINT_DLANG_LABEL :\n\t  // Feed for any prior blank lines...\n\t  if (dymo->feed)\n\t  {\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t    papplDevicePrintf(device, \"\\033f\\001%c\", dymo->feed);\n\t    dymo->feed = 0;\n\t  }\n\n\t  // Then write the non-blank line...\n\t  byte = 0x16;\n\t  papplDeviceWrite(device, &byte, 1);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n\t  break;\n\n      case LPRINT_DLANG_TAPE :\n\t  if (dymo->feed)\n\t  {\n\t    unsigned char buffer[256];\t// Write buffer\n\n            papplDevicePrintf(device, \"\\033D%c\", 0);\n\t    memset(buffer, 0x16, sizeof(buffer));\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n            if (dymo->feed > 0)\n            {\n\t      papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n\t  papplDevicePrintf(device, \"\\033D%c\\026\", dymo->dither.out_width);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n          break;\n    }\n  }\n  els",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 546,
    "end_line": 593,
    "code": "// Not a blank line\n    switch (dymo->dlang)\n    {\n      case LPRINT_DLANG_LABEL :\n\t  // Feed for any prior blank lines...\n\t  if (dymo->feed)\n\t  {\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t    papplDevicePrintf(device, \"\\033f\\001%c\", dymo->feed);\n\t    dymo->feed = 0;\n\t  }\n\n\t  // Then write the non-blank line...\n\t  byte = 0x16;\n\t  papplDeviceWrite(device, &byte, 1);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n\t  break;\n\n      case LPRINT_DLANG_TAPE :\n\t  if (dymo->feed)\n\t  {\n\t    unsigned char buffer[256];\t// Write buffer\n\n            papplDevicePrintf(device, \"\\033D%c\", 0);\n\t    memset(buffer, 0x16, sizeof(buffer));\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n            if (dymo->feed > 0)\n            {\n\t      papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n\t  papplDevicePrintf(device, \"\\033D%c\\026\", dymo->dither.out_width);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n          break;\n    }\n  }\n  els",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 548,
    "end_line": 592,
    "code": " (dymo->dlang)\n    {\n      case LPRINT_DLANG_LABEL :\n\t  // Feed for any prior blank lines...\n\t  if (dymo->feed)\n\t  {\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t    papplDevicePrintf(device, \"\\033f\\001%c\", dymo->feed);\n\t    dymo->feed = 0;\n\t  }\n\n\t  // Then write the non-blank line...\n\t  byte = 0x16;\n\t  papplDeviceWrite(device, &byte, 1);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n\t  break;\n\n      case LPRINT_DLANG_TAPE :\n\t  if (dymo->feed)\n\t  {\n\t    unsigned char buffer[256];\t// Write buffer\n\n            papplDevicePrintf(device, \"\\033D%c\", 0);\n\t    memset(buffer, 0x16, sizeof(buffer));\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n            if (dymo->feed > 0)\n            {\n\t      papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n\t  papplDevicePrintf(device, \"\\033D%c\\026\", dymo->dither.out_width);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n          break;\n    }\n  }\n ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 548,
    "end_line": 592,
    "code": " (dymo->dlang)\n    {\n      case LPRINT_DLANG_LABEL :\n\t  // Feed for any prior blank lines...\n\t  if (dymo->feed)\n\t  {\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t    papplDevicePrintf(device, \"\\033f\\001%c\", dymo->feed);\n\t    dymo->feed = 0;\n\t  }\n\n\t  // Then write the non-blank line...\n\t  byte = 0x16;\n\t  papplDeviceWrite(device, &byte, 1);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n\t  break;\n\n      case LPRINT_DLANG_TAPE :\n\t  if (dymo->feed)\n\t  {\n\t    unsigned char buffer[256];\t// Write buffer\n\n            papplDevicePrintf(device, \"\\033D%c\", 0);\n\t    memset(buffer, 0x16, sizeof(buffer));\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n            if (dymo->feed > 0)\n            {\n\t      papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n\t  papplDevicePrintf(device, \"\\033D%c\\026\", dymo->dither.out_width);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n          break;\n    }\n  }\n ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 549,
    "end_line": 592,
    "code": "  case LPRINT_DLANG_LABEL :\n\t  // Feed for any prior blank lines...\n\t  if (dymo->feed)\n\t  {\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t    papplDevicePrintf(device, \"\\033f\\001%c\", dymo->feed);\n\t    dymo->feed = 0;\n\t  }\n\n\t  // Then write the non-blank line...\n\t  byte = 0x16;\n\t  papplDeviceWrite(device, &byte, 1);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n\t  break;\n\n      case LPRINT_DLANG_TAPE :\n\t  if (dymo->feed)\n\t  {\n\t    unsigned char buffer[256];\t// Write buffer\n\n            papplDevicePrintf(device, \"\\033D%c\", 0);\n\t    memset(buffer, 0x16, sizeof(buffer));\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n            if (dymo->feed > 0)\n            {\n\t      papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n\t  papplDevicePrintf(device, \"\\033D%c\\026\", dymo->dither.out_width);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n          break;\n    }\n  }\n ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 549,
    "end_line": 592,
    "code": "  case LPRINT_DLANG_LABEL :\n\t  // Feed for any prior blank lines...\n\t  if (dymo->feed)\n\t  {\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t    papplDevicePrintf(device, \"\\033f\\001%c\", dymo->feed);\n\t    dymo->feed = 0;\n\t  }\n\n\t  // Then write the non-blank line...\n\t  byte = 0x16;\n\t  papplDeviceWrite(device, &byte, 1);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n\t  break;\n\n      case LPRINT_DLANG_TAPE :\n\t  if (dymo->feed)\n\t  {\n\t    unsigned char buffer[256];\t// Write buffer\n\n            papplDevicePrintf(device, \"\\033D%c\", 0);\n\t    memset(buffer, 0x16, sizeof(buffer));\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n            if (dymo->feed > 0)\n            {\n\t      papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n\t  papplDevicePrintf(device, \"\\033D%c\\026\", dymo->dither.out_width);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n          break;\n    }\n  }\n ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 550,
    "end_line": 568,
    "code": "PRINT_DLANG_LABEL :\n\t  // Feed for any prior blank lines...\n\t  if (dymo->feed)\n\t  {\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t    papplDevicePrintf(device, \"\\033f\\001%c\", dymo->feed);\n\t    dymo->feed = 0;\n\t  }\n\n\t  // Then write the non-blank line...\n\t  byte = 0x16;\n\t  papplDeviceWrite(device, &byte, 1);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n\t  break;\n\n    ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 550,
    "end_line": 568,
    "code": "PRINT_DLANG_LABEL :\n\t  // Feed for any prior blank lines...\n\t  if (dymo->feed)\n\t  {\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t    papplDevicePrintf(device, \"\\033f\\001%c\", dymo->feed);\n\t    dymo->feed = 0;\n\t  }\n\n\t  // Then write the non-blank line...\n\t  byte = 0x16;\n\t  papplDeviceWrite(device, &byte, 1);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n\t  break;\n\n    ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 552,
    "end_line": 562,
    "code": "mo->feed)\n\t  {\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t    papplDevicePrintf(device, \"\\033f\\001%c\", dymo->feed);\n\t    dymo->feed = 0;\n\t  }\n\n\t  /",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 552,
    "end_line": 562,
    "code": "mo->feed)\n\t  {\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t    papplDevicePrintf(device, \"\\033f\\001%c\", dymo->feed);\n\t    dymo->feed = 0;\n\t  }\n\n\t  /",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 553,
    "end_line": 562,
    "code": " while (dymo->feed > 255)\n\t    {\n\t      papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t    papplDevicePrintf(device, \"\\033f\\001%c\", dymo->feed);\n\t    dymo->feed = 0;\n\t  }\n\n\t  /",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 553,
    "end_line": 562,
    "code": " while (dymo->feed > 255)\n\t    {\n\t      papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t    papplDevicePrintf(device, \"\\033f\\001%c\", dymo->feed);\n\t    dymo->feed = 0;\n\t  }\n\n\t  /",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 554,
    "end_line": 558,
    "code": "(dymo->feed > 255)\n\t    {\n\t      papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t   ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 554,
    "end_line": 558,
    "code": "(dymo->feed > 255)\n\t    {\n\t      papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t   ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 555,
    "end_line": 558,
    "code": "   papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t   ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 555,
    "end_line": 558,
    "code": "   papplDevicePrintf(device, \"\\033f\\001%c\", 255);\n\t      dymo->feed -= 255;\n\t    }\n\n\t   ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 570,
    "end_line": 591,
    "code": "PRINT_DLANG_TAPE :\n\t  if (dymo->feed)\n\t  {\n\t    unsigned char buffer[256];\t// Write buffer\n\n            papplDevicePrintf(device, \"\\033D%c\", 0);\n\t    memset(buffer, 0x16, sizeof(buffer));\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n            if (dymo->feed > 0)\n            {\n\t      papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n\t  papplDevicePrintf(device, \"\\033D%c\\026\", dymo->dither.out_width);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n          break;\n    }",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 570,
    "end_line": 591,
    "code": "PRINT_DLANG_TAPE :\n\t  if (dymo->feed)\n\t  {\n\t    unsigned char buffer[256];\t// Write buffer\n\n            papplDevicePrintf(device, \"\\033D%c\", 0);\n\t    memset(buffer, 0x16, sizeof(buffer));\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n            if (dymo->feed > 0)\n            {\n\t      papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n\t  papplDevicePrintf(device, \"\\033D%c\\026\", dymo->dither.out_width);\n\t  papplDeviceWrite(device, dymo->dither.output, dymo->dither.out_width);\n          break;\n    }",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 571,
    "end_line": 588,
    "code": "mo->feed)\n\t  {\n\t    unsigned char buffer[256];\t// Write buffer\n\n            papplDevicePrintf(device, \"\\033D%c\", 0);\n\t    memset(buffer, 0x16, sizeof(buffer));\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n            if (dymo->feed > 0)\n            {\n\t      papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n\t  pa",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 571,
    "end_line": 588,
    "code": "mo->feed)\n\t  {\n\t    unsigned char buffer[256];\t// Write buffer\n\n            papplDevicePrintf(device, \"\\033D%c\", 0);\n\t    memset(buffer, 0x16, sizeof(buffer));\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n            if (dymo->feed > 0)\n            {\n\t      papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n\t  pa",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 572,
    "end_line": 588,
    "code": " unsigned char buffer[256];\t// Write buffer\n\n            papplDevicePrintf(device, \"\\033D%c\", 0);\n\t    memset(buffer, 0x16, sizeof(buffer));\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n            if (dymo->feed > 0)\n            {\n\t      papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n\t  pa",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 572,
    "end_line": 588,
    "code": " unsigned char buffer[256];\t// Write buffer\n\n            papplDevicePrintf(device, \"\\033D%c\", 0);\n\t    memset(buffer, 0x16, sizeof(buffer));\n\t    while (dymo->feed > 255)\n\t    {\n\t      papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n            if (dymo->feed > 0)\n            {\n\t      papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n\t  pa",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 577,
    "end_line": 581,
    "code": "(dymo->feed > 255)\n\t    {\n\t      papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n    ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 577,
    "end_line": 581,
    "code": "(dymo->feed > 255)\n\t    {\n\t      papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n    ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 578,
    "end_line": 581,
    "code": "   papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n    ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 578,
    "end_line": 581,
    "code": "   papplDeviceWrite(device, buffer, sizeof(buffer));\n\t      dymo->feed -= 256;\n\t    }\n\n    ",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 583,
    "end_line": 587,
    "code": "mo->feed > 0)\n            {\n\t      papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 583,
    "end_line": 587,
    "code": "mo->feed > 0)\n            {\n\t      papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "struct_assignment",
    "start_line": 584,
    "end_line": 587,
    "code": "   papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function_assignment",
    "start_line": 584,
    "end_line": 587,
    "code": "   papplDeviceWrite(device, buffer, dymo->feed);\n\t      dymo->feed = 0;\n\t    }\n\t  }\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  },
  {
    "type": "function",
    "start_line": 608,
    "end_line": 615,
    "name": "lprint_dymo_status",
    "parent": null,
    "hierarchy": "lprint_dymo_status",
    "code": " bool\t\t\t\t// O - `true` on success, `false` on failure\nlprint_dymo_status(\n    pappl_printer_t *printer)\t\t// I - Printer\n{\n  (void)printer;\n\n  return (true);\n}\n",
    "file": "data/codebase/lprint/lprint-dymo.c"
  }
]